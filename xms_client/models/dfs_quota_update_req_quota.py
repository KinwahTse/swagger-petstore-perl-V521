# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsQuotaUpdateReqQuota(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'files_grace_time': 'int',
        'files_hard_quota': 'int',
        'files_soft_quota': 'int',
        'files_suggest_quota': 'int',
        'size_grace_time': 'int',
        'size_hard_quota': 'int',
        'size_soft_quota': 'int',
        'size_suggest_quota': 'int'
    }

    attribute_map = {
        'files_grace_time': 'files_grace_time',
        'files_hard_quota': 'files_hard_quota',
        'files_soft_quota': 'files_soft_quota',
        'files_suggest_quota': 'files_suggest_quota',
        'size_grace_time': 'size_grace_time',
        'size_hard_quota': 'size_hard_quota',
        'size_soft_quota': 'size_soft_quota',
        'size_suggest_quota': 'size_suggest_quota'
    }

    def __init__(self, files_grace_time=None, files_hard_quota=None, files_soft_quota=None, files_suggest_quota=None, size_grace_time=None, size_hard_quota=None, size_soft_quota=None, size_suggest_quota=None):  # noqa: E501
        """DfsQuotaUpdateReqQuota - a model defined in Swagger"""  # noqa: E501

        self._files_grace_time = None
        self._files_hard_quota = None
        self._files_soft_quota = None
        self._files_suggest_quota = None
        self._size_grace_time = None
        self._size_hard_quota = None
        self._size_soft_quota = None
        self._size_suggest_quota = None
        self.discriminator = None

        self.files_grace_time = files_grace_time
        self.files_hard_quota = files_hard_quota
        self.files_soft_quota = files_soft_quota
        self.files_suggest_quota = files_suggest_quota
        self.size_grace_time = size_grace_time
        self.size_hard_quota = size_hard_quota
        self.size_soft_quota = size_soft_quota
        self.size_suggest_quota = size_suggest_quota

    @property
    def files_grace_time(self):
        """Gets the files_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501

        grace time for files soft quota  # noqa: E501

        :return: The files_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_grace_time

    @files_grace_time.setter
    def files_grace_time(self, files_grace_time):
        """Sets the files_grace_time of this DfsQuotaUpdateReqQuota.

        grace time for files soft quota  # noqa: E501

        :param files_grace_time: The files_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if files_grace_time is None:
            raise ValueError("Invalid value for `files_grace_time`, must not be `None`")  # noqa: E501

        self._files_grace_time = files_grace_time

    @property
    def files_hard_quota(self):
        """Gets the files_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        hard quota of files  # noqa: E501

        :return: The files_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_hard_quota

    @files_hard_quota.setter
    def files_hard_quota(self, files_hard_quota):
        """Sets the files_hard_quota of this DfsQuotaUpdateReqQuota.

        hard quota of files  # noqa: E501

        :param files_hard_quota: The files_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if files_hard_quota is None:
            raise ValueError("Invalid value for `files_hard_quota`, must not be `None`")  # noqa: E501

        self._files_hard_quota = files_hard_quota

    @property
    def files_soft_quota(self):
        """Gets the files_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        soft quota of files  # noqa: E501

        :return: The files_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_soft_quota

    @files_soft_quota.setter
    def files_soft_quota(self, files_soft_quota):
        """Sets the files_soft_quota of this DfsQuotaUpdateReqQuota.

        soft quota of files  # noqa: E501

        :param files_soft_quota: The files_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if files_soft_quota is None:
            raise ValueError("Invalid value for `files_soft_quota`, must not be `None`")  # noqa: E501

        self._files_soft_quota = files_soft_quota

    @property
    def files_suggest_quota(self):
        """Gets the files_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        suggest quota of files  # noqa: E501

        :return: The files_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_suggest_quota

    @files_suggest_quota.setter
    def files_suggest_quota(self, files_suggest_quota):
        """Sets the files_suggest_quota of this DfsQuotaUpdateReqQuota.

        suggest quota of files  # noqa: E501

        :param files_suggest_quota: The files_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if files_suggest_quota is None:
            raise ValueError("Invalid value for `files_suggest_quota`, must not be `None`")  # noqa: E501

        self._files_suggest_quota = files_suggest_quota

    @property
    def size_grace_time(self):
        """Gets the size_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501

        grace time for size soft quota  # noqa: E501

        :return: The size_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_grace_time

    @size_grace_time.setter
    def size_grace_time(self, size_grace_time):
        """Sets the size_grace_time of this DfsQuotaUpdateReqQuota.

        grace time for size soft quota  # noqa: E501

        :param size_grace_time: The size_grace_time of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if size_grace_time is None:
            raise ValueError("Invalid value for `size_grace_time`, must not be `None`")  # noqa: E501

        self._size_grace_time = size_grace_time

    @property
    def size_hard_quota(self):
        """Gets the size_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        hard quota of size  # noqa: E501

        :return: The size_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_hard_quota

    @size_hard_quota.setter
    def size_hard_quota(self, size_hard_quota):
        """Sets the size_hard_quota of this DfsQuotaUpdateReqQuota.

        hard quota of size  # noqa: E501

        :param size_hard_quota: The size_hard_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if size_hard_quota is None:
            raise ValueError("Invalid value for `size_hard_quota`, must not be `None`")  # noqa: E501

        self._size_hard_quota = size_hard_quota

    @property
    def size_soft_quota(self):
        """Gets the size_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        soft quota of size  # noqa: E501

        :return: The size_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_soft_quota

    @size_soft_quota.setter
    def size_soft_quota(self, size_soft_quota):
        """Sets the size_soft_quota of this DfsQuotaUpdateReqQuota.

        soft quota of size  # noqa: E501

        :param size_soft_quota: The size_soft_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if size_soft_quota is None:
            raise ValueError("Invalid value for `size_soft_quota`, must not be `None`")  # noqa: E501

        self._size_soft_quota = size_soft_quota

    @property
    def size_suggest_quota(self):
        """Gets the size_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501

        suggest quota of size  # noqa: E501

        :return: The size_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_suggest_quota

    @size_suggest_quota.setter
    def size_suggest_quota(self, size_suggest_quota):
        """Sets the size_suggest_quota of this DfsQuotaUpdateReqQuota.

        suggest quota of size  # noqa: E501

        :param size_suggest_quota: The size_suggest_quota of this DfsQuotaUpdateReqQuota.  # noqa: E501
        :type: int
        """
        if size_suggest_quota is None:
            raise ValueError("Invalid value for `size_suggest_quota`, must not be `None`")  # noqa: E501

        self._size_suggest_quota = size_suggest_quota

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaUpdateReqQuota):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
