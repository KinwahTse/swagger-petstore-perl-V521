# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_trash_nestview import DfsTrashNestview  # noqa: F401,E501
# from xms_client.models.progress_info import ProgressInfo  # noqa: F401,E501


class DfsTrashFileJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'create': 'datetime',
        'id': 'int',
        'path': 'str',
        'progress': 'float',
        'progress_info': 'ProgressInfo',
        'status': 'str',
        'trash': 'DfsTrashNestview',
        'update': 'datetime'
    }

    attribute_map = {
        'action': 'action',
        'create': 'create',
        'id': 'id',
        'path': 'path',
        'progress': 'progress',
        'progress_info': 'progress_info',
        'status': 'status',
        'trash': 'trash',
        'update': 'update'
    }

    def __init__(self, action=None, create=None, id=None, path=None, progress=None, progress_info=None, status=None, trash=None, update=None):  # noqa: E501
        """DfsTrashFileJob - a model defined in Swagger"""  # noqa: E501

        self._action = None
        self._create = None
        self._id = None
        self._path = None
        self._progress = None
        self._progress_info = None
        self._status = None
        self._trash = None
        self._update = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if progress is not None:
            self.progress = progress
        if progress_info is not None:
            self.progress_info = progress_info
        if status is not None:
            self.status = status
        if trash is not None:
            self.trash = trash
        if update is not None:
            self.update = update

    @property
    def action(self):
        """Gets the action of this DfsTrashFileJob.  # noqa: E501


        :return: The action of this DfsTrashFileJob.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this DfsTrashFileJob.


        :param action: The action of this DfsTrashFileJob.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def create(self):
        """Gets the create of this DfsTrashFileJob.  # noqa: E501


        :return: The create of this DfsTrashFileJob.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsTrashFileJob.


        :param create: The create of this DfsTrashFileJob.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this DfsTrashFileJob.  # noqa: E501


        :return: The id of this DfsTrashFileJob.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsTrashFileJob.


        :param id: The id of this DfsTrashFileJob.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this DfsTrashFileJob.  # noqa: E501


        :return: The path of this DfsTrashFileJob.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsTrashFileJob.


        :param path: The path of this DfsTrashFileJob.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def progress(self):
        """Gets the progress of this DfsTrashFileJob.  # noqa: E501


        :return: The progress of this DfsTrashFileJob.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DfsTrashFileJob.


        :param progress: The progress of this DfsTrashFileJob.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def progress_info(self):
        """Gets the progress_info of this DfsTrashFileJob.  # noqa: E501


        :return: The progress_info of this DfsTrashFileJob.  # noqa: E501
        :rtype: ProgressInfo
        """
        return self._progress_info

    @progress_info.setter
    def progress_info(self, progress_info):
        """Sets the progress_info of this DfsTrashFileJob.


        :param progress_info: The progress_info of this DfsTrashFileJob.  # noqa: E501
        :type: ProgressInfo
        """

        self._progress_info = progress_info

    @property
    def status(self):
        """Gets the status of this DfsTrashFileJob.  # noqa: E501


        :return: The status of this DfsTrashFileJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsTrashFileJob.


        :param status: The status of this DfsTrashFileJob.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def trash(self):
        """Gets the trash of this DfsTrashFileJob.  # noqa: E501


        :return: The trash of this DfsTrashFileJob.  # noqa: E501
        :rtype: DfsTrashNestview
        """
        return self._trash

    @trash.setter
    def trash(self, trash):
        """Sets the trash of this DfsTrashFileJob.


        :param trash: The trash of this DfsTrashFileJob.  # noqa: E501
        :type: DfsTrashNestview
        """

        self._trash = trash

    @property
    def update(self):
        """Gets the update of this DfsTrashFileJob.  # noqa: E501


        :return: The update of this DfsTrashFileJob.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsTrashFileJob.


        :param update: The update of this DfsTrashFileJob.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsTrashFileJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
