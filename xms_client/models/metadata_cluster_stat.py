# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class MetadataClusterStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'available_data_kbyte': 'int',
        'create': 'datetime',
        'delete_latency_us': 'float',
        'delete_ops': 'float',
        'gc_data_kbyte': 'int',
        'list_latency_us': 'float',
        'list_ops': 'float',
        'num_available_inodes': 'int',
        'num_gc_inodes': 'int',
        'num_inodes': 'int',
        'num_used_inodes': 'int',
        'read_latency_us': 'float',
        'read_ops': 'float',
        'recorded_data_kbyte': 'int',
        'recovery_done': 'int',
        'recovery_left_second': 'float',
        'recovery_ops': 'float',
        'recovery_total': 'int',
        'total_data_kbyte': 'int',
        'total_kbyte': 'int',
        'trash_files': 'int',
        'trash_kbyte': 'int',
        'used_data_kbyte': 'int',
        'used_kbyte': 'int',
        'write_latency_us': 'float',
        'write_ops': 'float'
    }

    attribute_map = {
        'available_data_kbyte': 'available_data_kbyte',
        'create': 'create',
        'delete_latency_us': 'delete_latency_us',
        'delete_ops': 'delete_ops',
        'gc_data_kbyte': 'gc_data_kbyte',
        'list_latency_us': 'list_latency_us',
        'list_ops': 'list_ops',
        'num_available_inodes': 'num_available_inodes',
        'num_gc_inodes': 'num_gc_inodes',
        'num_inodes': 'num_inodes',
        'num_used_inodes': 'num_used_inodes',
        'read_latency_us': 'read_latency_us',
        'read_ops': 'read_ops',
        'recorded_data_kbyte': 'recorded_data_kbyte',
        'recovery_done': 'recovery_done',
        'recovery_left_second': 'recovery_left_second',
        'recovery_ops': 'recovery_ops',
        'recovery_total': 'recovery_total',
        'total_data_kbyte': 'total_data_kbyte',
        'total_kbyte': 'total_kbyte',
        'trash_files': 'trash_files',
        'trash_kbyte': 'trash_kbyte',
        'used_data_kbyte': 'used_data_kbyte',
        'used_kbyte': 'used_kbyte',
        'write_latency_us': 'write_latency_us',
        'write_ops': 'write_ops'
    }

    def __init__(self, available_data_kbyte=None, create=None, delete_latency_us=None, delete_ops=None, gc_data_kbyte=None, list_latency_us=None, list_ops=None, num_available_inodes=None, num_gc_inodes=None, num_inodes=None, num_used_inodes=None, read_latency_us=None, read_ops=None, recorded_data_kbyte=None, recovery_done=None, recovery_left_second=None, recovery_ops=None, recovery_total=None, total_data_kbyte=None, total_kbyte=None, trash_files=None, trash_kbyte=None, used_data_kbyte=None, used_kbyte=None, write_latency_us=None, write_ops=None):  # noqa: E501
        """MetadataClusterStat - a model defined in Swagger"""  # noqa: E501

        self._available_data_kbyte = None
        self._create = None
        self._delete_latency_us = None
        self._delete_ops = None
        self._gc_data_kbyte = None
        self._list_latency_us = None
        self._list_ops = None
        self._num_available_inodes = None
        self._num_gc_inodes = None
        self._num_inodes = None
        self._num_used_inodes = None
        self._read_latency_us = None
        self._read_ops = None
        self._recorded_data_kbyte = None
        self._recovery_done = None
        self._recovery_left_second = None
        self._recovery_ops = None
        self._recovery_total = None
        self._total_data_kbyte = None
        self._total_kbyte = None
        self._trash_files = None
        self._trash_kbyte = None
        self._used_data_kbyte = None
        self._used_kbyte = None
        self._write_latency_us = None
        self._write_ops = None
        self.discriminator = None

        if available_data_kbyte is not None:
            self.available_data_kbyte = available_data_kbyte
        if create is not None:
            self.create = create
        if delete_latency_us is not None:
            self.delete_latency_us = delete_latency_us
        if delete_ops is not None:
            self.delete_ops = delete_ops
        if gc_data_kbyte is not None:
            self.gc_data_kbyte = gc_data_kbyte
        if list_latency_us is not None:
            self.list_latency_us = list_latency_us
        if list_ops is not None:
            self.list_ops = list_ops
        if num_available_inodes is not None:
            self.num_available_inodes = num_available_inodes
        if num_gc_inodes is not None:
            self.num_gc_inodes = num_gc_inodes
        if num_inodes is not None:
            self.num_inodes = num_inodes
        if num_used_inodes is not None:
            self.num_used_inodes = num_used_inodes
        if read_latency_us is not None:
            self.read_latency_us = read_latency_us
        if read_ops is not None:
            self.read_ops = read_ops
        if recorded_data_kbyte is not None:
            self.recorded_data_kbyte = recorded_data_kbyte
        if recovery_done is not None:
            self.recovery_done = recovery_done
        if recovery_left_second is not None:
            self.recovery_left_second = recovery_left_second
        if recovery_ops is not None:
            self.recovery_ops = recovery_ops
        if recovery_total is not None:
            self.recovery_total = recovery_total
        if total_data_kbyte is not None:
            self.total_data_kbyte = total_data_kbyte
        if total_kbyte is not None:
            self.total_kbyte = total_kbyte
        if trash_files is not None:
            self.trash_files = trash_files
        if trash_kbyte is not None:
            self.trash_kbyte = trash_kbyte
        if used_data_kbyte is not None:
            self.used_data_kbyte = used_data_kbyte
        if used_kbyte is not None:
            self.used_kbyte = used_kbyte
        if write_latency_us is not None:
            self.write_latency_us = write_latency_us
        if write_ops is not None:
            self.write_ops = write_ops

    @property
    def available_data_kbyte(self):
        """Gets the available_data_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The available_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._available_data_kbyte

    @available_data_kbyte.setter
    def available_data_kbyte(self, available_data_kbyte):
        """Sets the available_data_kbyte of this MetadataClusterStat.


        :param available_data_kbyte: The available_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._available_data_kbyte = available_data_kbyte

    @property
    def create(self):
        """Gets the create of this MetadataClusterStat.  # noqa: E501


        :return: The create of this MetadataClusterStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MetadataClusterStat.


        :param create: The create of this MetadataClusterStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def delete_latency_us(self):
        """Gets the delete_latency_us of this MetadataClusterStat.  # noqa: E501


        :return: The delete_latency_us of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._delete_latency_us

    @delete_latency_us.setter
    def delete_latency_us(self, delete_latency_us):
        """Sets the delete_latency_us of this MetadataClusterStat.


        :param delete_latency_us: The delete_latency_us of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._delete_latency_us = delete_latency_us

    @property
    def delete_ops(self):
        """Gets the delete_ops of this MetadataClusterStat.  # noqa: E501


        :return: The delete_ops of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._delete_ops

    @delete_ops.setter
    def delete_ops(self, delete_ops):
        """Sets the delete_ops of this MetadataClusterStat.


        :param delete_ops: The delete_ops of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._delete_ops = delete_ops

    @property
    def gc_data_kbyte(self):
        """Gets the gc_data_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The gc_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._gc_data_kbyte

    @gc_data_kbyte.setter
    def gc_data_kbyte(self, gc_data_kbyte):
        """Sets the gc_data_kbyte of this MetadataClusterStat.


        :param gc_data_kbyte: The gc_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._gc_data_kbyte = gc_data_kbyte

    @property
    def list_latency_us(self):
        """Gets the list_latency_us of this MetadataClusterStat.  # noqa: E501


        :return: The list_latency_us of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._list_latency_us

    @list_latency_us.setter
    def list_latency_us(self, list_latency_us):
        """Sets the list_latency_us of this MetadataClusterStat.


        :param list_latency_us: The list_latency_us of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._list_latency_us = list_latency_us

    @property
    def list_ops(self):
        """Gets the list_ops of this MetadataClusterStat.  # noqa: E501


        :return: The list_ops of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._list_ops

    @list_ops.setter
    def list_ops(self, list_ops):
        """Sets the list_ops of this MetadataClusterStat.


        :param list_ops: The list_ops of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._list_ops = list_ops

    @property
    def num_available_inodes(self):
        """Gets the num_available_inodes of this MetadataClusterStat.  # noqa: E501


        :return: The num_available_inodes of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._num_available_inodes

    @num_available_inodes.setter
    def num_available_inodes(self, num_available_inodes):
        """Sets the num_available_inodes of this MetadataClusterStat.


        :param num_available_inodes: The num_available_inodes of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._num_available_inodes = num_available_inodes

    @property
    def num_gc_inodes(self):
        """Gets the num_gc_inodes of this MetadataClusterStat.  # noqa: E501


        :return: The num_gc_inodes of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._num_gc_inodes

    @num_gc_inodes.setter
    def num_gc_inodes(self, num_gc_inodes):
        """Sets the num_gc_inodes of this MetadataClusterStat.


        :param num_gc_inodes: The num_gc_inodes of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._num_gc_inodes = num_gc_inodes

    @property
    def num_inodes(self):
        """Gets the num_inodes of this MetadataClusterStat.  # noqa: E501


        :return: The num_inodes of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._num_inodes

    @num_inodes.setter
    def num_inodes(self, num_inodes):
        """Sets the num_inodes of this MetadataClusterStat.


        :param num_inodes: The num_inodes of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._num_inodes = num_inodes

    @property
    def num_used_inodes(self):
        """Gets the num_used_inodes of this MetadataClusterStat.  # noqa: E501


        :return: The num_used_inodes of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._num_used_inodes

    @num_used_inodes.setter
    def num_used_inodes(self, num_used_inodes):
        """Sets the num_used_inodes of this MetadataClusterStat.


        :param num_used_inodes: The num_used_inodes of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._num_used_inodes = num_used_inodes

    @property
    def read_latency_us(self):
        """Gets the read_latency_us of this MetadataClusterStat.  # noqa: E501


        :return: The read_latency_us of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):
        """Sets the read_latency_us of this MetadataClusterStat.


        :param read_latency_us: The read_latency_us of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._read_latency_us = read_latency_us

    @property
    def read_ops(self):
        """Gets the read_ops of this MetadataClusterStat.  # noqa: E501

        primary metadata service stat  # noqa: E501

        :return: The read_ops of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._read_ops

    @read_ops.setter
    def read_ops(self, read_ops):
        """Sets the read_ops of this MetadataClusterStat.

        primary metadata service stat  # noqa: E501

        :param read_ops: The read_ops of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._read_ops = read_ops

    @property
    def recorded_data_kbyte(self):
        """Gets the recorded_data_kbyte of this MetadataClusterStat.  # noqa: E501

        data kbyte used by user, different from UsedDataKbyte  # noqa: E501

        :return: The recorded_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._recorded_data_kbyte

    @recorded_data_kbyte.setter
    def recorded_data_kbyte(self, recorded_data_kbyte):
        """Sets the recorded_data_kbyte of this MetadataClusterStat.

        data kbyte used by user, different from UsedDataKbyte  # noqa: E501

        :param recorded_data_kbyte: The recorded_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._recorded_data_kbyte = recorded_data_kbyte

    @property
    def recovery_done(self):
        """Gets the recovery_done of this MetadataClusterStat.  # noqa: E501


        :return: The recovery_done of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_done

    @recovery_done.setter
    def recovery_done(self, recovery_done):
        """Sets the recovery_done of this MetadataClusterStat.


        :param recovery_done: The recovery_done of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._recovery_done = recovery_done

    @property
    def recovery_left_second(self):
        """Gets the recovery_left_second of this MetadataClusterStat.  # noqa: E501


        :return: The recovery_left_second of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_left_second

    @recovery_left_second.setter
    def recovery_left_second(self, recovery_left_second):
        """Sets the recovery_left_second of this MetadataClusterStat.


        :param recovery_left_second: The recovery_left_second of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._recovery_left_second = recovery_left_second

    @property
    def recovery_ops(self):
        """Gets the recovery_ops of this MetadataClusterStat.  # noqa: E501


        :return: The recovery_ops of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_ops

    @recovery_ops.setter
    def recovery_ops(self, recovery_ops):
        """Sets the recovery_ops of this MetadataClusterStat.


        :param recovery_ops: The recovery_ops of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._recovery_ops = recovery_ops

    @property
    def recovery_total(self):
        """Gets the recovery_total of this MetadataClusterStat.  # noqa: E501


        :return: The recovery_total of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_total

    @recovery_total.setter
    def recovery_total(self, recovery_total):
        """Sets the recovery_total of this MetadataClusterStat.


        :param recovery_total: The recovery_total of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._recovery_total = recovery_total

    @property
    def total_data_kbyte(self):
        """Gets the total_data_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The total_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._total_data_kbyte

    @total_data_kbyte.setter
    def total_data_kbyte(self, total_data_kbyte):
        """Sets the total_data_kbyte of this MetadataClusterStat.


        :param total_data_kbyte: The total_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._total_data_kbyte = total_data_kbyte

    @property
    def total_kbyte(self):
        """Gets the total_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The total_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._total_kbyte

    @total_kbyte.setter
    def total_kbyte(self, total_kbyte):
        """Sets the total_kbyte of this MetadataClusterStat.


        :param total_kbyte: The total_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._total_kbyte = total_kbyte

    @property
    def trash_files(self):
        """Gets the trash_files of this MetadataClusterStat.  # noqa: E501


        :return: The trash_files of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._trash_files

    @trash_files.setter
    def trash_files(self, trash_files):
        """Sets the trash_files of this MetadataClusterStat.


        :param trash_files: The trash_files of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._trash_files = trash_files

    @property
    def trash_kbyte(self):
        """Gets the trash_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The trash_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._trash_kbyte

    @trash_kbyte.setter
    def trash_kbyte(self, trash_kbyte):
        """Sets the trash_kbyte of this MetadataClusterStat.


        :param trash_kbyte: The trash_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._trash_kbyte = trash_kbyte

    @property
    def used_data_kbyte(self):
        """Gets the used_data_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The used_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._used_data_kbyte

    @used_data_kbyte.setter
    def used_data_kbyte(self, used_data_kbyte):
        """Sets the used_data_kbyte of this MetadataClusterStat.


        :param used_data_kbyte: The used_data_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._used_data_kbyte = used_data_kbyte

    @property
    def used_kbyte(self):
        """Gets the used_kbyte of this MetadataClusterStat.  # noqa: E501


        :return: The used_kbyte of this MetadataClusterStat.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte

    @used_kbyte.setter
    def used_kbyte(self, used_kbyte):
        """Sets the used_kbyte of this MetadataClusterStat.


        :param used_kbyte: The used_kbyte of this MetadataClusterStat.  # noqa: E501
        :type: int
        """

        self._used_kbyte = used_kbyte

    @property
    def write_latency_us(self):
        """Gets the write_latency_us of this MetadataClusterStat.  # noqa: E501


        :return: The write_latency_us of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):
        """Sets the write_latency_us of this MetadataClusterStat.


        :param write_latency_us: The write_latency_us of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._write_latency_us = write_latency_us

    @property
    def write_ops(self):
        """Gets the write_ops of this MetadataClusterStat.  # noqa: E501


        :return: The write_ops of this MetadataClusterStat.  # noqa: E501
        :rtype: float
        """
        return self._write_ops

    @write_ops.setter
    def write_ops(self, write_ops):
        """Sets the write_ops of this MetadataClusterStat.


        :param write_ops: The write_ops of this MetadataClusterStat.  # noqa: E501
        :type: float
        """

        self._write_ops = write_ops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataClusterStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
