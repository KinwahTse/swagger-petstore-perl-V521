# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.access_path_nestview import AccessPathNestview  # noqa: F401,E501
# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class Lun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access_path': 'AccessPathNestview',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'id': 'int',
        'lun_id': 'int',
        'volume': 'VolumeNestview'
    }

    attribute_map = {
        'access_path': 'access_path',
        'cluster': 'cluster',
        'create': 'create',
        'id': 'id',
        'lun_id': 'lun_id',
        'volume': 'volume'
    }

    def __init__(self, access_path=None, cluster=None, create=None, id=None, lun_id=None, volume=None):  # noqa: E501
        """Lun - a model defined in Swagger"""  # noqa: E501

        self._access_path = None
        self._cluster = None
        self._create = None
        self._id = None
        self._lun_id = None
        self._volume = None
        self.discriminator = None

        if access_path is not None:
            self.access_path = access_path
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if id is not None:
            self.id = id
        if lun_id is not None:
            self.lun_id = lun_id
        if volume is not None:
            self.volume = volume

    @property
    def access_path(self):
        """Gets the access_path of this Lun.  # noqa: E501


        :return: The access_path of this Lun.  # noqa: E501
        :rtype: AccessPathNestview
        """
        return self._access_path

    @access_path.setter
    def access_path(self, access_path):
        """Sets the access_path of this Lun.


        :param access_path: The access_path of this Lun.  # noqa: E501
        :type: AccessPathNestview
        """

        self._access_path = access_path

    @property
    def cluster(self):
        """Gets the cluster of this Lun.  # noqa: E501


        :return: The cluster of this Lun.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Lun.


        :param cluster: The cluster of this Lun.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this Lun.  # noqa: E501


        :return: The create of this Lun.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Lun.


        :param create: The create of this Lun.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def id(self):
        """Gets the id of this Lun.  # noqa: E501


        :return: The id of this Lun.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Lun.


        :param id: The id of this Lun.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def lun_id(self):
        """Gets the lun_id of this Lun.  # noqa: E501


        :return: The lun_id of this Lun.  # noqa: E501
        :rtype: int
        """
        return self._lun_id

    @lun_id.setter
    def lun_id(self, lun_id):
        """Sets the lun_id of this Lun.


        :param lun_id: The lun_id of this Lun.  # noqa: E501
        :type: int
        """

        self._lun_id = lun_id

    @property
    def volume(self):
        """Gets the volume of this Lun.  # noqa: E501


        :return: The volume of this Lun.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Lun.


        :param volume: The volume of this Lun.  # noqa: E501
        :type: VolumeNestview
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Lun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
