# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.origin_conf import OriginConf  # noqa: F401,E501
# from xms_client.models.origin_info import OriginInfo  # noqa: F401,E501
# from xms_client.models.s3_load_balancer_group import S3LoadBalancerGroup  # noqa: F401,E501


class OSOriginPullRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_id': 'int',
        'cluster': 'ClusterNestview',
        'connected': 'bool',
        'create': 'datetime',
        'escape_to_slash': 'bool',
        'id': 'int',
        'mode_type': 'str',
        'origin_conf': 'OriginConf',
        'origin_info': 'OriginInfo',
        'prefix': 'str',
        's3_load_balancer_group': 'S3LoadBalancerGroup',
        'status': 'str',
        'suffix': 'str'
    }

    attribute_map = {
        'bucket_id': 'bucket_id',
        'cluster': 'cluster',
        'connected': 'connected',
        'create': 'create',
        'escape_to_slash': 'escape_to_slash',
        'id': 'id',
        'mode_type': 'mode_type',
        'origin_conf': 'origin_conf',
        'origin_info': 'origin_info',
        'prefix': 'prefix',
        's3_load_balancer_group': 's3_load_balancer_group',
        'status': 'status',
        'suffix': 'suffix'
    }

    def __init__(self, bucket_id=None, cluster=None, connected=None, create=None, escape_to_slash=None, id=None, mode_type=None, origin_conf=None, origin_info=None, prefix=None, s3_load_balancer_group=None, status=None, suffix=None):  # noqa: E501
        """OSOriginPullRule - a model defined in Swagger"""  # noqa: E501

        self._bucket_id = None
        self._cluster = None
        self._connected = None
        self._create = None
        self._escape_to_slash = None
        self._id = None
        self._mode_type = None
        self._origin_conf = None
        self._origin_info = None
        self._prefix = None
        self._s3_load_balancer_group = None
        self._status = None
        self._suffix = None
        self.discriminator = None

        if bucket_id is not None:
            self.bucket_id = bucket_id
        if cluster is not None:
            self.cluster = cluster
        if connected is not None:
            self.connected = connected
        if create is not None:
            self.create = create
        if escape_to_slash is not None:
            self.escape_to_slash = escape_to_slash
        if id is not None:
            self.id = id
        if mode_type is not None:
            self.mode_type = mode_type
        if origin_conf is not None:
            self.origin_conf = origin_conf
        if origin_info is not None:
            self.origin_info = origin_info
        if prefix is not None:
            self.prefix = prefix
        if s3_load_balancer_group is not None:
            self.s3_load_balancer_group = s3_load_balancer_group
        if status is not None:
            self.status = status
        if suffix is not None:
            self.suffix = suffix

    @property
    def bucket_id(self):
        """Gets the bucket_id of this OSOriginPullRule.  # noqa: E501


        :return: The bucket_id of this OSOriginPullRule.  # noqa: E501
        :rtype: int
        """
        return self._bucket_id

    @bucket_id.setter
    def bucket_id(self, bucket_id):
        """Sets the bucket_id of this OSOriginPullRule.


        :param bucket_id: The bucket_id of this OSOriginPullRule.  # noqa: E501
        :type: int
        """

        self._bucket_id = bucket_id

    @property
    def cluster(self):
        """Gets the cluster of this OSOriginPullRule.  # noqa: E501


        :return: The cluster of this OSOriginPullRule.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this OSOriginPullRule.


        :param cluster: The cluster of this OSOriginPullRule.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def connected(self):
        """Gets the connected of this OSOriginPullRule.  # noqa: E501


        :return: The connected of this OSOriginPullRule.  # noqa: E501
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected):
        """Sets the connected of this OSOriginPullRule.


        :param connected: The connected of this OSOriginPullRule.  # noqa: E501
        :type: bool
        """

        self._connected = connected

    @property
    def create(self):
        """Gets the create of this OSOriginPullRule.  # noqa: E501


        :return: The create of this OSOriginPullRule.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this OSOriginPullRule.


        :param create: The create of this OSOriginPullRule.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def escape_to_slash(self):
        """Gets the escape_to_slash of this OSOriginPullRule.  # noqa: E501


        :return: The escape_to_slash of this OSOriginPullRule.  # noqa: E501
        :rtype: bool
        """
        return self._escape_to_slash

    @escape_to_slash.setter
    def escape_to_slash(self, escape_to_slash):
        """Sets the escape_to_slash of this OSOriginPullRule.


        :param escape_to_slash: The escape_to_slash of this OSOriginPullRule.  # noqa: E501
        :type: bool
        """

        self._escape_to_slash = escape_to_slash

    @property
    def id(self):
        """Gets the id of this OSOriginPullRule.  # noqa: E501


        :return: The id of this OSOriginPullRule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OSOriginPullRule.


        :param id: The id of this OSOriginPullRule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def mode_type(self):
        """Gets the mode_type of this OSOriginPullRule.  # noqa: E501


        :return: The mode_type of this OSOriginPullRule.  # noqa: E501
        :rtype: str
        """
        return self._mode_type

    @mode_type.setter
    def mode_type(self, mode_type):
        """Sets the mode_type of this OSOriginPullRule.


        :param mode_type: The mode_type of this OSOriginPullRule.  # noqa: E501
        :type: str
        """

        self._mode_type = mode_type

    @property
    def origin_conf(self):
        """Gets the origin_conf of this OSOriginPullRule.  # noqa: E501


        :return: The origin_conf of this OSOriginPullRule.  # noqa: E501
        :rtype: OriginConf
        """
        return self._origin_conf

    @origin_conf.setter
    def origin_conf(self, origin_conf):
        """Sets the origin_conf of this OSOriginPullRule.


        :param origin_conf: The origin_conf of this OSOriginPullRule.  # noqa: E501
        :type: OriginConf
        """

        self._origin_conf = origin_conf

    @property
    def origin_info(self):
        """Gets the origin_info of this OSOriginPullRule.  # noqa: E501


        :return: The origin_info of this OSOriginPullRule.  # noqa: E501
        :rtype: OriginInfo
        """
        return self._origin_info

    @origin_info.setter
    def origin_info(self, origin_info):
        """Sets the origin_info of this OSOriginPullRule.


        :param origin_info: The origin_info of this OSOriginPullRule.  # noqa: E501
        :type: OriginInfo
        """

        self._origin_info = origin_info

    @property
    def prefix(self):
        """Gets the prefix of this OSOriginPullRule.  # noqa: E501


        :return: The prefix of this OSOriginPullRule.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this OSOriginPullRule.


        :param prefix: The prefix of this OSOriginPullRule.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def s3_load_balancer_group(self):
        """Gets the s3_load_balancer_group of this OSOriginPullRule.  # noqa: E501


        :return: The s3_load_balancer_group of this OSOriginPullRule.  # noqa: E501
        :rtype: S3LoadBalancerGroup
        """
        return self._s3_load_balancer_group

    @s3_load_balancer_group.setter
    def s3_load_balancer_group(self, s3_load_balancer_group):
        """Sets the s3_load_balancer_group of this OSOriginPullRule.


        :param s3_load_balancer_group: The s3_load_balancer_group of this OSOriginPullRule.  # noqa: E501
        :type: S3LoadBalancerGroup
        """

        self._s3_load_balancer_group = s3_load_balancer_group

    @property
    def status(self):
        """Gets the status of this OSOriginPullRule.  # noqa: E501


        :return: The status of this OSOriginPullRule.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OSOriginPullRule.


        :param status: The status of this OSOriginPullRule.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def suffix(self):
        """Gets the suffix of this OSOriginPullRule.  # noqa: E501


        :return: The suffix of this OSOriginPullRule.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this OSOriginPullRule.


        :param suffix: The suffix of this OSOriginPullRule.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSOriginPullRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
