# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_file_trash import DfsFileTrash  # noqa: F401,E501
# from xms_client.models.dfs_file_worm import DfsFileWorm  # noqa: F401,E501
# from xms_client.models.nested_rootfs import NestedRootfs  # noqa: F401,E501


class DfsFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'datetime',
        'change': 'datetime',
        'dfs_path_id': 'int',
        'dfs_rootfs': 'NestedRootfs',
        'dp_snapshot_num': 'int',
        'files': 'int',
        'group': 'int',
        'hdfs_num': 'int',
        'inode': 'int',
        'is_bucket': 'bool',
        'is_bucket_parent': 'bool',
        'modify': 'datetime',
        'name': 'str',
        'original_name': 'str',
        'owner': 'int',
        'parent': 'str',
        'path': 'str',
        'quota_num': 'int',
        'shared': 'bool',
        'shares': 'list[str]',
        'size': 'int',
        'snapshot_num': 'int',
        'total_snapshot_num': 'int',
        'trash': 'DfsFileTrash',
        'type': 'str',
        'worm': 'DfsFileWorm'
    }

    attribute_map = {
        'access': 'access',
        'change': 'change',
        'dfs_path_id': 'dfs_path_id',
        'dfs_rootfs': 'dfs_rootfs',
        'dp_snapshot_num': 'dp_snapshot_num',
        'files': 'files',
        'group': 'group',
        'hdfs_num': 'hdfs_num',
        'inode': 'inode',
        'is_bucket': 'is_bucket',
        'is_bucket_parent': 'is_bucket_parent',
        'modify': 'modify',
        'name': 'name',
        'original_name': 'original_name',
        'owner': 'owner',
        'parent': 'parent',
        'path': 'path',
        'quota_num': 'quota_num',
        'shared': 'shared',
        'shares': 'shares',
        'size': 'size',
        'snapshot_num': 'snapshot_num',
        'total_snapshot_num': 'total_snapshot_num',
        'trash': 'trash',
        'type': 'type',
        'worm': 'worm'
    }

    def __init__(self, access=None, change=None, dfs_path_id=None, dfs_rootfs=None, dp_snapshot_num=None, files=None, group=None, hdfs_num=None, inode=None, is_bucket=None, is_bucket_parent=None, modify=None, name=None, original_name=None, owner=None, parent=None, path=None, quota_num=None, shared=None, shares=None, size=None, snapshot_num=None, total_snapshot_num=None, trash=None, type=None, worm=None):  # noqa: E501
        """DfsFile - a model defined in Swagger"""  # noqa: E501

        self._access = None
        self._change = None
        self._dfs_path_id = None
        self._dfs_rootfs = None
        self._dp_snapshot_num = None
        self._files = None
        self._group = None
        self._hdfs_num = None
        self._inode = None
        self._is_bucket = None
        self._is_bucket_parent = None
        self._modify = None
        self._name = None
        self._original_name = None
        self._owner = None
        self._parent = None
        self._path = None
        self._quota_num = None
        self._shared = None
        self._shares = None
        self._size = None
        self._snapshot_num = None
        self._total_snapshot_num = None
        self._trash = None
        self._type = None
        self._worm = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if change is not None:
            self.change = change
        if dfs_path_id is not None:
            self.dfs_path_id = dfs_path_id
        if dfs_rootfs is not None:
            self.dfs_rootfs = dfs_rootfs
        if dp_snapshot_num is not None:
            self.dp_snapshot_num = dp_snapshot_num
        if files is not None:
            self.files = files
        if group is not None:
            self.group = group
        if hdfs_num is not None:
            self.hdfs_num = hdfs_num
        if inode is not None:
            self.inode = inode
        if is_bucket is not None:
            self.is_bucket = is_bucket
        if is_bucket_parent is not None:
            self.is_bucket_parent = is_bucket_parent
        if modify is not None:
            self.modify = modify
        if name is not None:
            self.name = name
        if original_name is not None:
            self.original_name = original_name
        if owner is not None:
            self.owner = owner
        if parent is not None:
            self.parent = parent
        if path is not None:
            self.path = path
        if quota_num is not None:
            self.quota_num = quota_num
        if shared is not None:
            self.shared = shared
        if shares is not None:
            self.shares = shares
        if size is not None:
            self.size = size
        if snapshot_num is not None:
            self.snapshot_num = snapshot_num
        if total_snapshot_num is not None:
            self.total_snapshot_num = total_snapshot_num
        if trash is not None:
            self.trash = trash
        if type is not None:
            self.type = type
        if worm is not None:
            self.worm = worm

    @property
    def access(self):
        """Gets the access of this DfsFile.  # noqa: E501

        access time  # noqa: E501

        :return: The access of this DfsFile.  # noqa: E501
        :rtype: datetime
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this DfsFile.

        access time  # noqa: E501

        :param access: The access of this DfsFile.  # noqa: E501
        :type: datetime
        """

        self._access = access

    @property
    def change(self):
        """Gets the change of this DfsFile.  # noqa: E501

        change time  # noqa: E501

        :return: The change of this DfsFile.  # noqa: E501
        :rtype: datetime
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this DfsFile.

        change time  # noqa: E501

        :param change: The change of this DfsFile.  # noqa: E501
        :type: datetime
        """

        self._change = change

    @property
    def dfs_path_id(self):
        """Gets the dfs_path_id of this DfsFile.  # noqa: E501

        dfs path id  # noqa: E501

        :return: The dfs_path_id of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._dfs_path_id

    @dfs_path_id.setter
    def dfs_path_id(self, dfs_path_id):
        """Sets the dfs_path_id of this DfsFile.

        dfs path id  # noqa: E501

        :param dfs_path_id: The dfs_path_id of this DfsFile.  # noqa: E501
        :type: int
        """

        self._dfs_path_id = dfs_path_id

    @property
    def dfs_rootfs(self):
        """Gets the dfs_rootfs of this DfsFile.  # noqa: E501

        dfs rootfs  # noqa: E501

        :return: The dfs_rootfs of this DfsFile.  # noqa: E501
        :rtype: NestedRootfs
        """
        return self._dfs_rootfs

    @dfs_rootfs.setter
    def dfs_rootfs(self, dfs_rootfs):
        """Sets the dfs_rootfs of this DfsFile.

        dfs rootfs  # noqa: E501

        :param dfs_rootfs: The dfs_rootfs of this DfsFile.  # noqa: E501
        :type: NestedRootfs
        """

        self._dfs_rootfs = dfs_rootfs

    @property
    def dp_snapshot_num(self):
        """Gets the dp_snapshot_num of this DfsFile.  # noqa: E501

        count of data protection snapshot  # noqa: E501

        :return: The dp_snapshot_num of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._dp_snapshot_num

    @dp_snapshot_num.setter
    def dp_snapshot_num(self, dp_snapshot_num):
        """Sets the dp_snapshot_num of this DfsFile.

        count of data protection snapshot  # noqa: E501

        :param dp_snapshot_num: The dp_snapshot_num of this DfsFile.  # noqa: E501
        :type: int
        """

        self._dp_snapshot_num = dp_snapshot_num

    @property
    def files(self):
        """Gets the files of this DfsFile.  # noqa: E501

        sub file count when it is a directory  # noqa: E501

        :return: The files of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this DfsFile.

        sub file count when it is a directory  # noqa: E501

        :param files: The files of this DfsFile.  # noqa: E501
        :type: int
        """

        self._files = files

    @property
    def group(self):
        """Gets the group of this DfsFile.  # noqa: E501

        owner group  # noqa: E501

        :return: The group of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this DfsFile.

        owner group  # noqa: E501

        :param group: The group of this DfsFile.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def hdfs_num(self):
        """Gets the hdfs_num of this DfsFile.  # noqa: E501

        count of hdfs  # noqa: E501

        :return: The hdfs_num of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_num

    @hdfs_num.setter
    def hdfs_num(self, hdfs_num):
        """Sets the hdfs_num of this DfsFile.

        count of hdfs  # noqa: E501

        :param hdfs_num: The hdfs_num of this DfsFile.  # noqa: E501
        :type: int
        """

        self._hdfs_num = hdfs_num

    @property
    def inode(self):
        """Gets the inode of this DfsFile.  # noqa: E501

        inode count  # noqa: E501

        :return: The inode of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._inode

    @inode.setter
    def inode(self, inode):
        """Sets the inode of this DfsFile.

        inode count  # noqa: E501

        :param inode: The inode of this DfsFile.  # noqa: E501
        :type: int
        """

        self._inode = inode

    @property
    def is_bucket(self):
        """Gets the is_bucket of this DfsFile.  # noqa: E501

        is bucket path  # noqa: E501

        :return: The is_bucket of this DfsFile.  # noqa: E501
        :rtype: bool
        """
        return self._is_bucket

    @is_bucket.setter
    def is_bucket(self, is_bucket):
        """Sets the is_bucket of this DfsFile.

        is bucket path  # noqa: E501

        :param is_bucket: The is_bucket of this DfsFile.  # noqa: E501
        :type: bool
        """

        self._is_bucket = is_bucket

    @property
    def is_bucket_parent(self):
        """Gets the is_bucket_parent of this DfsFile.  # noqa: E501

        is bucked parent path  # noqa: E501

        :return: The is_bucket_parent of this DfsFile.  # noqa: E501
        :rtype: bool
        """
        return self._is_bucket_parent

    @is_bucket_parent.setter
    def is_bucket_parent(self, is_bucket_parent):
        """Sets the is_bucket_parent of this DfsFile.

        is bucked parent path  # noqa: E501

        :param is_bucket_parent: The is_bucket_parent of this DfsFile.  # noqa: E501
        :type: bool
        """

        self._is_bucket_parent = is_bucket_parent

    @property
    def modify(self):
        """Gets the modify of this DfsFile.  # noqa: E501

        modify time  # noqa: E501

        :return: The modify of this DfsFile.  # noqa: E501
        :rtype: datetime
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this DfsFile.

        modify time  # noqa: E501

        :param modify: The modify of this DfsFile.  # noqa: E501
        :type: datetime
        """

        self._modify = modify

    @property
    def name(self):
        """Gets the name of this DfsFile.  # noqa: E501

        file name  # noqa: E501

        :return: The name of this DfsFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsFile.

        file name  # noqa: E501

        :param name: The name of this DfsFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this DfsFile.  # noqa: E501

        original name before file moved to trash  # noqa: E501

        :return: The original_name of this DfsFile.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this DfsFile.

        original name before file moved to trash  # noqa: E501

        :param original_name: The original_name of this DfsFile.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def owner(self):
        """Gets the owner of this DfsFile.  # noqa: E501

        owner user  # noqa: E501

        :return: The owner of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DfsFile.

        owner user  # noqa: E501

        :param owner: The owner of this DfsFile.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def parent(self):
        """Gets the parent of this DfsFile.  # noqa: E501

        parent path  # noqa: E501

        :return: The parent of this DfsFile.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DfsFile.

        parent path  # noqa: E501

        :param parent: The parent of this DfsFile.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def path(self):
        """Gets the path of this DfsFile.  # noqa: E501

        full path  # noqa: E501

        :return: The path of this DfsFile.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsFile.

        full path  # noqa: E501

        :param path: The path of this DfsFile.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def quota_num(self):
        """Gets the quota_num of this DfsFile.  # noqa: E501

        count of quota  # noqa: E501

        :return: The quota_num of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._quota_num

    @quota_num.setter
    def quota_num(self, quota_num):
        """Sets the quota_num of this DfsFile.

        count of quota  # noqa: E501

        :param quota_num: The quota_num of this DfsFile.  # noqa: E501
        :type: int
        """

        self._quota_num = quota_num

    @property
    def shared(self):
        """Gets the shared of this DfsFile.  # noqa: E501

        shared  # noqa: E501

        :return: The shared of this DfsFile.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this DfsFile.

        shared  # noqa: E501

        :param shared: The shared of this DfsFile.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def shares(self):
        """Gets the shares of this DfsFile.  # noqa: E501

        share types  # noqa: E501

        :return: The shares of this DfsFile.  # noqa: E501
        :rtype: list[str]
        """
        return self._shares

    @shares.setter
    def shares(self, shares):
        """Sets the shares of this DfsFile.

        share types  # noqa: E501

        :param shares: The shares of this DfsFile.  # noqa: E501
        :type: list[str]
        """

        self._shares = shares

    @property
    def size(self):
        """Gets the size of this DfsFile.  # noqa: E501

        file size  # noqa: E501

        :return: The size of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DfsFile.

        file size  # noqa: E501

        :param size: The size of this DfsFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def snapshot_num(self):
        """Gets the snapshot_num of this DfsFile.  # noqa: E501

        count of snapshot  # noqa: E501

        :return: The snapshot_num of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._snapshot_num

    @snapshot_num.setter
    def snapshot_num(self, snapshot_num):
        """Sets the snapshot_num of this DfsFile.

        count of snapshot  # noqa: E501

        :param snapshot_num: The snapshot_num of this DfsFile.  # noqa: E501
        :type: int
        """

        self._snapshot_num = snapshot_num

    @property
    def total_snapshot_num(self):
        """Gets the total_snapshot_num of this DfsFile.  # noqa: E501

        count of total snapshot  # noqa: E501

        :return: The total_snapshot_num of this DfsFile.  # noqa: E501
        :rtype: int
        """
        return self._total_snapshot_num

    @total_snapshot_num.setter
    def total_snapshot_num(self, total_snapshot_num):
        """Sets the total_snapshot_num of this DfsFile.

        count of total snapshot  # noqa: E501

        :param total_snapshot_num: The total_snapshot_num of this DfsFile.  # noqa: E501
        :type: int
        """

        self._total_snapshot_num = total_snapshot_num

    @property
    def trash(self):
        """Gets the trash of this DfsFile.  # noqa: E501

        dfs trash resource  # noqa: E501

        :return: The trash of this DfsFile.  # noqa: E501
        :rtype: DfsFileTrash
        """
        return self._trash

    @trash.setter
    def trash(self, trash):
        """Sets the trash of this DfsFile.

        dfs trash resource  # noqa: E501

        :param trash: The trash of this DfsFile.  # noqa: E501
        :type: DfsFileTrash
        """

        self._trash = trash

    @property
    def type(self):
        """Gets the type of this DfsFile.  # noqa: E501

        file type  # noqa: E501

        :return: The type of this DfsFile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DfsFile.

        file type  # noqa: E501

        :param type: The type of this DfsFile.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def worm(self):
        """Gets the worm of this DfsFile.  # noqa: E501

        worm info  # noqa: E501

        :return: The worm of this DfsFile.  # noqa: E501
        :rtype: DfsFileWorm
        """
        return self._worm

    @worm.setter
    def worm(self, worm):
        """Sets the worm of this DfsFile.

        worm info  # noqa: E501

        :param worm: The worm of this DfsFile.  # noqa: E501
        :type: DfsFileWorm
        """

        self._worm = worm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
