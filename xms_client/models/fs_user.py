# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_group import DfsGatewayGroup  # noqa: F401,E501
# from xms_client.models.dfs_path_nestview import DfsPathNestview  # noqa: F401,E501
# from xms_client.models.fs_user_group_nestview import FSUserGroupNestview  # noqa: F401,E501


class FSUser(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_limit': 'int',
        'bucket_num': 'int',
        'bucket_parent_path': 'DfsPathNestview',
        'bucket_permission': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'email': 'str',
        'fs_user_group_num': 'int',
        'fs_user_groups': 'list[FSUserGroupNestview]',
        'gateway_group': 'DfsGatewayGroup',
        'hdfs_num': 'int',
        'id': 'int',
        'name': 'str',
        'primary_group': 'FSUserGroupNestview',
        'quota_num': 'int',
        's3_enabled': 'bool',
        's3_status': 'str',
        'share_nums': 'dict(str, int)',
        'update': 'datetime',
        'user_id': 'int',
        'version': 'int'
    }

    attribute_map = {
        'bucket_limit': 'bucket_limit',
        'bucket_num': 'bucket_num',
        'bucket_parent_path': 'bucket_parent_path',
        'bucket_permission': 'bucket_permission',
        'cluster': 'cluster',
        'create': 'create',
        'email': 'email',
        'fs_user_group_num': 'fs_user_group_num',
        'fs_user_groups': 'fs_user_groups',
        'gateway_group': 'gateway_group',
        'hdfs_num': 'hdfs_num',
        'id': 'id',
        'name': 'name',
        'primary_group': 'primary_group',
        'quota_num': 'quota_num',
        's3_enabled': 's3_enabled',
        's3_status': 's3_status',
        'share_nums': 'share_nums',
        'update': 'update',
        'user_id': 'user_id',
        'version': 'version'
    }

    def __init__(self, bucket_limit=None, bucket_num=None, bucket_parent_path=None, bucket_permission=None, cluster=None, create=None, email=None, fs_user_group_num=None, fs_user_groups=None, gateway_group=None, hdfs_num=None, id=None, name=None, primary_group=None, quota_num=None, s3_enabled=None, s3_status=None, share_nums=None, update=None, user_id=None, version=None):  # noqa: E501
        """FSUser - a model defined in Swagger"""  # noqa: E501

        self._bucket_limit = None
        self._bucket_num = None
        self._bucket_parent_path = None
        self._bucket_permission = None
        self._cluster = None
        self._create = None
        self._email = None
        self._fs_user_group_num = None
        self._fs_user_groups = None
        self._gateway_group = None
        self._hdfs_num = None
        self._id = None
        self._name = None
        self._primary_group = None
        self._quota_num = None
        self._s3_enabled = None
        self._s3_status = None
        self._share_nums = None
        self._update = None
        self._user_id = None
        self._version = None
        self.discriminator = None

        if bucket_limit is not None:
            self.bucket_limit = bucket_limit
        if bucket_num is not None:
            self.bucket_num = bucket_num
        if bucket_parent_path is not None:
            self.bucket_parent_path = bucket_parent_path
        if bucket_permission is not None:
            self.bucket_permission = bucket_permission
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if email is not None:
            self.email = email
        if fs_user_group_num is not None:
            self.fs_user_group_num = fs_user_group_num
        if fs_user_groups is not None:
            self.fs_user_groups = fs_user_groups
        if gateway_group is not None:
            self.gateway_group = gateway_group
        if hdfs_num is not None:
            self.hdfs_num = hdfs_num
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if primary_group is not None:
            self.primary_group = primary_group
        if quota_num is not None:
            self.quota_num = quota_num
        if s3_enabled is not None:
            self.s3_enabled = s3_enabled
        if s3_status is not None:
            self.s3_status = s3_status
        if share_nums is not None:
            self.share_nums = share_nums
        if update is not None:
            self.update = update
        if user_id is not None:
            self.user_id = user_id
        if version is not None:
            self.version = version

    @property
    def bucket_limit(self):
        """Gets the bucket_limit of this FSUser.  # noqa: E501


        :return: The bucket_limit of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._bucket_limit

    @bucket_limit.setter
    def bucket_limit(self, bucket_limit):
        """Sets the bucket_limit of this FSUser.


        :param bucket_limit: The bucket_limit of this FSUser.  # noqa: E501
        :type: int
        """

        self._bucket_limit = bucket_limit

    @property
    def bucket_num(self):
        """Gets the bucket_num of this FSUser.  # noqa: E501


        :return: The bucket_num of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._bucket_num

    @bucket_num.setter
    def bucket_num(self, bucket_num):
        """Sets the bucket_num of this FSUser.


        :param bucket_num: The bucket_num of this FSUser.  # noqa: E501
        :type: int
        """

        self._bucket_num = bucket_num

    @property
    def bucket_parent_path(self):
        """Gets the bucket_parent_path of this FSUser.  # noqa: E501


        :return: The bucket_parent_path of this FSUser.  # noqa: E501
        :rtype: DfsPathNestview
        """
        return self._bucket_parent_path

    @bucket_parent_path.setter
    def bucket_parent_path(self, bucket_parent_path):
        """Sets the bucket_parent_path of this FSUser.


        :param bucket_parent_path: The bucket_parent_path of this FSUser.  # noqa: E501
        :type: DfsPathNestview
        """

        self._bucket_parent_path = bucket_parent_path

    @property
    def bucket_permission(self):
        """Gets the bucket_permission of this FSUser.  # noqa: E501


        :return: The bucket_permission of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._bucket_permission

    @bucket_permission.setter
    def bucket_permission(self, bucket_permission):
        """Sets the bucket_permission of this FSUser.


        :param bucket_permission: The bucket_permission of this FSUser.  # noqa: E501
        :type: str
        """

        self._bucket_permission = bucket_permission

    @property
    def cluster(self):
        """Gets the cluster of this FSUser.  # noqa: E501


        :return: The cluster of this FSUser.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this FSUser.


        :param cluster: The cluster of this FSUser.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this FSUser.  # noqa: E501


        :return: The create of this FSUser.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FSUser.


        :param create: The create of this FSUser.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def email(self):
        """Gets the email of this FSUser.  # noqa: E501


        :return: The email of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this FSUser.


        :param email: The email of this FSUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def fs_user_group_num(self):
        """Gets the fs_user_group_num of this FSUser.  # noqa: E501


        :return: The fs_user_group_num of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._fs_user_group_num

    @fs_user_group_num.setter
    def fs_user_group_num(self, fs_user_group_num):
        """Sets the fs_user_group_num of this FSUser.


        :param fs_user_group_num: The fs_user_group_num of this FSUser.  # noqa: E501
        :type: int
        """

        self._fs_user_group_num = fs_user_group_num

    @property
    def fs_user_groups(self):
        """Gets the fs_user_groups of this FSUser.  # noqa: E501


        :return: The fs_user_groups of this FSUser.  # noqa: E501
        :rtype: list[FSUserGroupNestview]
        """
        return self._fs_user_groups

    @fs_user_groups.setter
    def fs_user_groups(self, fs_user_groups):
        """Sets the fs_user_groups of this FSUser.


        :param fs_user_groups: The fs_user_groups of this FSUser.  # noqa: E501
        :type: list[FSUserGroupNestview]
        """

        self._fs_user_groups = fs_user_groups

    @property
    def gateway_group(self):
        """Gets the gateway_group of this FSUser.  # noqa: E501


        :return: The gateway_group of this FSUser.  # noqa: E501
        :rtype: DfsGatewayGroup
        """
        return self._gateway_group

    @gateway_group.setter
    def gateway_group(self, gateway_group):
        """Sets the gateway_group of this FSUser.


        :param gateway_group: The gateway_group of this FSUser.  # noqa: E501
        :type: DfsGatewayGroup
        """

        self._gateway_group = gateway_group

    @property
    def hdfs_num(self):
        """Gets the hdfs_num of this FSUser.  # noqa: E501


        :return: The hdfs_num of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_num

    @hdfs_num.setter
    def hdfs_num(self, hdfs_num):
        """Sets the hdfs_num of this FSUser.


        :param hdfs_num: The hdfs_num of this FSUser.  # noqa: E501
        :type: int
        """

        self._hdfs_num = hdfs_num

    @property
    def id(self):
        """Gets the id of this FSUser.  # noqa: E501


        :return: The id of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FSUser.


        :param id: The id of this FSUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FSUser.  # noqa: E501


        :return: The name of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FSUser.


        :param name: The name of this FSUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def primary_group(self):
        """Gets the primary_group of this FSUser.  # noqa: E501


        :return: The primary_group of this FSUser.  # noqa: E501
        :rtype: FSUserGroupNestview
        """
        return self._primary_group

    @primary_group.setter
    def primary_group(self, primary_group):
        """Sets the primary_group of this FSUser.


        :param primary_group: The primary_group of this FSUser.  # noqa: E501
        :type: FSUserGroupNestview
        """

        self._primary_group = primary_group

    @property
    def quota_num(self):
        """Gets the quota_num of this FSUser.  # noqa: E501


        :return: The quota_num of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._quota_num

    @quota_num.setter
    def quota_num(self, quota_num):
        """Sets the quota_num of this FSUser.


        :param quota_num: The quota_num of this FSUser.  # noqa: E501
        :type: int
        """

        self._quota_num = quota_num

    @property
    def s3_enabled(self):
        """Gets the s3_enabled of this FSUser.  # noqa: E501

        dfs s3 support  # noqa: E501

        :return: The s3_enabled of this FSUser.  # noqa: E501
        :rtype: bool
        """
        return self._s3_enabled

    @s3_enabled.setter
    def s3_enabled(self, s3_enabled):
        """Sets the s3_enabled of this FSUser.

        dfs s3 support  # noqa: E501

        :param s3_enabled: The s3_enabled of this FSUser.  # noqa: E501
        :type: bool
        """

        self._s3_enabled = s3_enabled

    @property
    def s3_status(self):
        """Gets the s3_status of this FSUser.  # noqa: E501

        indicate that s3 service is ok or not  # noqa: E501

        :return: The s3_status of this FSUser.  # noqa: E501
        :rtype: str
        """
        return self._s3_status

    @s3_status.setter
    def s3_status(self, s3_status):
        """Sets the s3_status of this FSUser.

        indicate that s3 service is ok or not  # noqa: E501

        :param s3_status: The s3_status of this FSUser.  # noqa: E501
        :type: str
        """

        self._s3_status = s3_status

    @property
    def share_nums(self):
        """Gets the share_nums of this FSUser.  # noqa: E501


        :return: The share_nums of this FSUser.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._share_nums

    @share_nums.setter
    def share_nums(self, share_nums):
        """Sets the share_nums of this FSUser.


        :param share_nums: The share_nums of this FSUser.  # noqa: E501
        :type: dict(str, int)
        """

        self._share_nums = share_nums

    @property
    def update(self):
        """Gets the update of this FSUser.  # noqa: E501


        :return: The update of this FSUser.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FSUser.


        :param update: The update of this FSUser.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def user_id(self):
        """Gets the user_id of this FSUser.  # noqa: E501


        :return: The user_id of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this FSUser.


        :param user_id: The user_id of this FSUser.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def version(self):
        """Gets the version of this FSUser.  # noqa: E501


        :return: The version of this FSUser.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this FSUser.


        :param version: The version of this FSUser.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FSUser):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
