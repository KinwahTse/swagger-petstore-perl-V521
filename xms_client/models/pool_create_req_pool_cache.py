# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PoolCreateReqPoolCache(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'compress_algorithm': 'str',
        'compressed': 'bool',
        'osd_ids': 'list[int]',
        'size': 'int'
    }

    attribute_map = {
        'compress_algorithm': 'compress_algorithm',
        'compressed': 'compressed',
        'osd_ids': 'osd_ids',
        'size': 'size'
    }

    def __init__(self, compress_algorithm=None, compressed=None, osd_ids=None, size=None):  # noqa: E501
        """PoolCreateReqPoolCache - a model defined in Swagger"""  # noqa: E501

        self._compress_algorithm = None
        self._compressed = None
        self._osd_ids = None
        self._size = None
        self.discriminator = None

        if compress_algorithm is not None:
            self.compress_algorithm = compress_algorithm
        if compressed is not None:
            self.compressed = compressed
        if osd_ids is not None:
            self.osd_ids = osd_ids
        if size is not None:
            self.size = size

    @property
    def compress_algorithm(self):
        """Gets the compress_algorithm of this PoolCreateReqPoolCache.  # noqa: E501


        :return: The compress_algorithm of this PoolCreateReqPoolCache.  # noqa: E501
        :rtype: str
        """
        return self._compress_algorithm

    @compress_algorithm.setter
    def compress_algorithm(self, compress_algorithm):
        """Sets the compress_algorithm of this PoolCreateReqPoolCache.


        :param compress_algorithm: The compress_algorithm of this PoolCreateReqPoolCache.  # noqa: E501
        :type: str
        """

        self._compress_algorithm = compress_algorithm

    @property
    def compressed(self):
        """Gets the compressed of this PoolCreateReqPoolCache.  # noqa: E501


        :return: The compressed of this PoolCreateReqPoolCache.  # noqa: E501
        :rtype: bool
        """
        return self._compressed

    @compressed.setter
    def compressed(self, compressed):
        """Sets the compressed of this PoolCreateReqPoolCache.


        :param compressed: The compressed of this PoolCreateReqPoolCache.  # noqa: E501
        :type: bool
        """

        self._compressed = compressed

    @property
    def osd_ids(self):
        """Gets the osd_ids of this PoolCreateReqPoolCache.  # noqa: E501


        :return: The osd_ids of this PoolCreateReqPoolCache.  # noqa: E501
        :rtype: list[int]
        """
        return self._osd_ids

    @osd_ids.setter
    def osd_ids(self, osd_ids):
        """Sets the osd_ids of this PoolCreateReqPoolCache.


        :param osd_ids: The osd_ids of this PoolCreateReqPoolCache.  # noqa: E501
        :type: list[int]
        """

        self._osd_ids = osd_ids

    @property
    def size(self):
        """Gets the size of this PoolCreateReqPoolCache.  # noqa: E501


        :return: The size of this PoolCreateReqPoolCache.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PoolCreateReqPoolCache.


        :param size: The size of this PoolCreateReqPoolCache.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolCreateReqPoolCache):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
