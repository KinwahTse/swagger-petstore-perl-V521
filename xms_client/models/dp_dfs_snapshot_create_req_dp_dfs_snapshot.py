# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DpDfsSnapshotCreateReqDpDfsSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dp_dfs_snapshot_policy_id': 'int',
        'path': 'str',
        'rootfs_id': 'int',
        'trigger': 'bool'
    }

    attribute_map = {
        'dp_dfs_snapshot_policy_id': 'dp_dfs_snapshot_policy_id',
        'path': 'path',
        'rootfs_id': 'rootfs_id',
        'trigger': 'trigger'
    }

    def __init__(self, dp_dfs_snapshot_policy_id=None, path=None, rootfs_id=None, trigger=None):  # noqa: E501
        """DpDfsSnapshotCreateReqDpDfsSnapshot - a model defined in Swagger"""  # noqa: E501

        self._dp_dfs_snapshot_policy_id = None
        self._path = None
        self._rootfs_id = None
        self._trigger = None
        self.discriminator = None

        self.dp_dfs_snapshot_policy_id = dp_dfs_snapshot_policy_id
        self.path = path
        self.rootfs_id = rootfs_id
        self.trigger = trigger

    @property
    def dp_dfs_snapshot_policy_id(self):
        """Gets the dp_dfs_snapshot_policy_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501


        :return: The dp_dfs_snapshot_policy_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._dp_dfs_snapshot_policy_id

    @dp_dfs_snapshot_policy_id.setter
    def dp_dfs_snapshot_policy_id(self, dp_dfs_snapshot_policy_id):
        """Sets the dp_dfs_snapshot_policy_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.


        :param dp_dfs_snapshot_policy_id: The dp_dfs_snapshot_policy_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :type: int
        """
        if dp_dfs_snapshot_policy_id is None:
            raise ValueError("Invalid value for `dp_dfs_snapshot_policy_id`, must not be `None`")  # noqa: E501

        self._dp_dfs_snapshot_policy_id = dp_dfs_snapshot_policy_id

    @property
    def path(self):
        """Gets the path of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501


        :return: The path of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DpDfsSnapshotCreateReqDpDfsSnapshot.


        :param path: The path of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def rootfs_id(self):
        """Gets the rootfs_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501


        :return: The rootfs_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._rootfs_id

    @rootfs_id.setter
    def rootfs_id(self, rootfs_id):
        """Sets the rootfs_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.


        :param rootfs_id: The rootfs_id of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :type: int
        """
        if rootfs_id is None:
            raise ValueError("Invalid value for `rootfs_id`, must not be `None`")  # noqa: E501

        self._rootfs_id = rootfs_id

    @property
    def trigger(self):
        """Gets the trigger of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501


        :return: The trigger of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :rtype: bool
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this DpDfsSnapshotCreateReqDpDfsSnapshot.


        :param trigger: The trigger of this DpDfsSnapshotCreateReqDpDfsSnapshot.  # noqa: E501
        :type: bool
        """
        if trigger is None:
            raise ValueError("Invalid value for `trigger`, must not be `None`")  # noqa: E501

        self._trigger = trigger

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpDfsSnapshotCreateReqDpDfsSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
