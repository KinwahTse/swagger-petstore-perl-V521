# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_gateway_req import DfsGatewayReq  # noqa: F401,E501


class DfsGatewayGroupCreateReqGatewayGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'dfs_gateways': 'list[DfsGatewayReq]',
        'dfs_vip_gateways': 'list[str]',
        'dfs_vips': 'list[str]',
        'encoding': 'str',
        'name': 'str',
        'nfs_versions': 'list[str]',
        'securities': 'list[str]',
        'smb1_enabled': 'bool',
        'smb_ports': 'list[int]',
        'types': 'list[str]'
    }

    attribute_map = {
        'description': 'description',
        'dfs_gateways': 'dfs_gateways',
        'dfs_vip_gateways': 'dfs_vip_gateways',
        'dfs_vips': 'dfs_vips',
        'encoding': 'encoding',
        'name': 'name',
        'nfs_versions': 'nfs_versions',
        'securities': 'securities',
        'smb1_enabled': 'smb1_enabled',
        'smb_ports': 'smb_ports',
        'types': 'types'
    }

    def __init__(self, description=None, dfs_gateways=None, dfs_vip_gateways=None, dfs_vips=None, encoding=None, name=None, nfs_versions=None, securities=None, smb1_enabled=None, smb_ports=None, types=None):  # noqa: E501
        """DfsGatewayGroupCreateReqGatewayGroup - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._dfs_gateways = None
        self._dfs_vip_gateways = None
        self._dfs_vips = None
        self._encoding = None
        self._name = None
        self._nfs_versions = None
        self._securities = None
        self._smb1_enabled = None
        self._smb_ports = None
        self._types = None
        self.discriminator = None

        if description is not None:
            self.description = description
        self.dfs_gateways = dfs_gateways
        if dfs_vip_gateways is not None:
            self.dfs_vip_gateways = dfs_vip_gateways
        self.dfs_vips = dfs_vips
        if encoding is not None:
            self.encoding = encoding
        self.name = name
        if nfs_versions is not None:
            self.nfs_versions = nfs_versions
        if securities is not None:
            self.securities = securities
        if smb1_enabled is not None:
            self.smb1_enabled = smb1_enabled
        if smb_ports is not None:
            self.smb_ports = smb_ports
        self.types = types

    @property
    def description(self):
        """Gets the description of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        description of gateway group  # noqa: E501

        :return: The description of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DfsGatewayGroupCreateReqGatewayGroup.

        description of gateway group  # noqa: E501

        :param description: The description of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dfs_gateways(self):
        """Gets the dfs_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        dfs gateways list  # noqa: E501

        :return: The dfs_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[DfsGatewayReq]
        """
        return self._dfs_gateways

    @dfs_gateways.setter
    def dfs_gateways(self, dfs_gateways):
        """Sets the dfs_gateways of this DfsGatewayGroupCreateReqGatewayGroup.

        dfs gateways list  # noqa: E501

        :param dfs_gateways: The dfs_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[DfsGatewayReq]
        """
        if dfs_gateways is None:
            raise ValueError("Invalid value for `dfs_gateways`, must not be `None`")  # noqa: E501

        self._dfs_gateways = dfs_gateways

    @property
    def dfs_vip_gateways(self):
        """Gets the dfs_vip_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        VIPGateways contains all the gateways of VIP network  # noqa: E501

        :return: The dfs_vip_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._dfs_vip_gateways

    @dfs_vip_gateways.setter
    def dfs_vip_gateways(self, dfs_vip_gateways):
        """Sets the dfs_vip_gateways of this DfsGatewayGroupCreateReqGatewayGroup.

        VIPGateways contains all the gateways of VIP network  # noqa: E501

        :param dfs_vip_gateways: The dfs_vip_gateways of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._dfs_vip_gateways = dfs_vip_gateways

    @property
    def dfs_vips(self):
        """Gets the dfs_vips of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        VIPs of gateway group  # noqa: E501

        :return: The dfs_vips of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._dfs_vips

    @dfs_vips.setter
    def dfs_vips(self, dfs_vips):
        """Sets the dfs_vips of this DfsGatewayGroupCreateReqGatewayGroup.

        VIPs of gateway group  # noqa: E501

        :param dfs_vips: The dfs_vips of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """
        if dfs_vips is None:
            raise ValueError("Invalid value for `dfs_vips`, must not be `None`")  # noqa: E501

        self._dfs_vips = dfs_vips

    @property
    def encoding(self):
        """Gets the encoding of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        ftp encoding format, default is utf8  # noqa: E501

        :return: The encoding of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this DfsGatewayGroupCreateReqGatewayGroup.

        ftp encoding format, default is utf8  # noqa: E501

        :param encoding: The encoding of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def name(self):
        """Gets the name of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        name of gateway group  # noqa: E501

        :return: The name of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsGatewayGroupCreateReqGatewayGroup.

        name of gateway group  # noqa: E501

        :param name: The name of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def nfs_versions(self):
        """Gets the nfs_versions of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        nfs versions of nfs supported  # noqa: E501

        :return: The nfs_versions of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._nfs_versions

    @nfs_versions.setter
    def nfs_versions(self, nfs_versions):
        """Sets the nfs_versions of this DfsGatewayGroupCreateReqGatewayGroup.

        nfs versions of nfs supported  # noqa: E501

        :param nfs_versions: The nfs_versions of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._nfs_versions = nfs_versions

    @property
    def securities(self):
        """Gets the securities of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        smb security type  # noqa: E501

        :return: The securities of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._securities

    @securities.setter
    def securities(self, securities):
        """Sets the securities of this DfsGatewayGroupCreateReqGatewayGroup.

        smb security type  # noqa: E501

        :param securities: The securities of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._securities = securities

    @property
    def smb1_enabled(self):
        """Gets the smb1_enabled of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        smb version 1.0 enabled  # noqa: E501

        :return: The smb1_enabled of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: bool
        """
        return self._smb1_enabled

    @smb1_enabled.setter
    def smb1_enabled(self, smb1_enabled):
        """Sets the smb1_enabled of this DfsGatewayGroupCreateReqGatewayGroup.

        smb version 1.0 enabled  # noqa: E501

        :param smb1_enabled: The smb1_enabled of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: bool
        """

        self._smb1_enabled = smb1_enabled

    @property
    def smb_ports(self):
        """Gets the smb_ports of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        smb ports  # noqa: E501

        :return: The smb_ports of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._smb_ports

    @smb_ports.setter
    def smb_ports(self, smb_ports):
        """Sets the smb_ports of this DfsGatewayGroupCreateReqGatewayGroup.

        smb ports  # noqa: E501

        :param smb_ports: The smb_ports of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[int]
        """

        self._smb_ports = smb_ports

    @property
    def types(self):
        """Gets the types of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501

        types of supported (smb, nfs, ftp)  # noqa: E501

        :return: The types of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this DfsGatewayGroupCreateReqGatewayGroup.

        types of supported (smb, nfs, ftp)  # noqa: E501

        :param types: The types of this DfsGatewayGroupCreateReqGatewayGroup.  # noqa: E501
        :type: list[str]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")  # noqa: E501

        self._types = types

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsGatewayGroupCreateReqGatewayGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
