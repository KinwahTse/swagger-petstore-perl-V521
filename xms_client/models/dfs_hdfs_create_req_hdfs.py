# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_hdfs_acl_req import DfsHdfsACLReq  # noqa: F401,E501


class DfsHdfsCreateReqHdfs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_size': 'int',
        'checksum_type': 'str',
        'dfs_gateway_zone_id': 'int',
        'dfs_hdfs_acls': 'list[DfsHdfsACLReq]',
        'name': 'str',
        'path': 'str',
        'rootfs_id': 'int'
    }

    attribute_map = {
        'block_size': 'block_size',
        'checksum_type': 'checksum_type',
        'dfs_gateway_zone_id': 'dfs_gateway_zone_id',
        'dfs_hdfs_acls': 'dfs_hdfs_acls',
        'name': 'name',
        'path': 'path',
        'rootfs_id': 'rootfs_id'
    }

    def __init__(self, block_size=None, checksum_type=None, dfs_gateway_zone_id=None, dfs_hdfs_acls=None, name=None, path=None, rootfs_id=None):  # noqa: E501
        """DfsHdfsCreateReqHdfs - a model defined in Swagger"""  # noqa: E501

        self._block_size = None
        self._checksum_type = None
        self._dfs_gateway_zone_id = None
        self._dfs_hdfs_acls = None
        self._name = None
        self._path = None
        self._rootfs_id = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if checksum_type is not None:
            self.checksum_type = checksum_type
        if dfs_gateway_zone_id is not None:
            self.dfs_gateway_zone_id = dfs_gateway_zone_id
        if dfs_hdfs_acls is not None:
            self.dfs_hdfs_acls = dfs_hdfs_acls
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if rootfs_id is not None:
            self.rootfs_id = rootfs_id

    @property
    def block_size(self):
        """Gets the block_size of this DfsHdfsCreateReqHdfs.  # noqa: E501

        block size  # noqa: E501

        :return: The block_size of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this DfsHdfsCreateReqHdfs.

        block size  # noqa: E501

        :param block_size: The block_size of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def checksum_type(self):
        """Gets the checksum_type of this DfsHdfsCreateReqHdfs.  # noqa: E501

        checksum type  # noqa: E501

        :return: The checksum_type of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: str
        """
        return self._checksum_type

    @checksum_type.setter
    def checksum_type(self, checksum_type):
        """Sets the checksum_type of this DfsHdfsCreateReqHdfs.

        checksum type  # noqa: E501

        :param checksum_type: The checksum_type of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: str
        """

        self._checksum_type = checksum_type

    @property
    def dfs_gateway_zone_id(self):
        """Gets the dfs_gateway_zone_id of this DfsHdfsCreateReqHdfs.  # noqa: E501

        id of dfs gateway zone  # noqa: E501

        :return: The dfs_gateway_zone_id of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: int
        """
        return self._dfs_gateway_zone_id

    @dfs_gateway_zone_id.setter
    def dfs_gateway_zone_id(self, dfs_gateway_zone_id):
        """Sets the dfs_gateway_zone_id of this DfsHdfsCreateReqHdfs.

        id of dfs gateway zone  # noqa: E501

        :param dfs_gateway_zone_id: The dfs_gateway_zone_id of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: int
        """

        self._dfs_gateway_zone_id = dfs_gateway_zone_id

    @property
    def dfs_hdfs_acls(self):
        """Gets the dfs_hdfs_acls of this DfsHdfsCreateReqHdfs.  # noqa: E501

        dfs hdfs acl list  # noqa: E501

        :return: The dfs_hdfs_acls of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: list[DfsHdfsACLReq]
        """
        return self._dfs_hdfs_acls

    @dfs_hdfs_acls.setter
    def dfs_hdfs_acls(self, dfs_hdfs_acls):
        """Sets the dfs_hdfs_acls of this DfsHdfsCreateReqHdfs.

        dfs hdfs acl list  # noqa: E501

        :param dfs_hdfs_acls: The dfs_hdfs_acls of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: list[DfsHdfsACLReq]
        """

        self._dfs_hdfs_acls = dfs_hdfs_acls

    @property
    def name(self):
        """Gets the name of this DfsHdfsCreateReqHdfs.  # noqa: E501

        dfs hdfs name  # noqa: E501

        :return: The name of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsHdfsCreateReqHdfs.

        dfs hdfs name  # noqa: E501

        :param name: The name of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this DfsHdfsCreateReqHdfs.  # noqa: E501

        path  # noqa: E501

        :return: The path of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsHdfsCreateReqHdfs.

        path  # noqa: E501

        :param path: The path of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def rootfs_id(self):
        """Gets the rootfs_id of this DfsHdfsCreateReqHdfs.  # noqa: E501

        id of dfs rootfs  # noqa: E501

        :return: The rootfs_id of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :rtype: int
        """
        return self._rootfs_id

    @rootfs_id.setter
    def rootfs_id(self, rootfs_id):
        """Sets the rootfs_id of this DfsHdfsCreateReqHdfs.

        id of dfs rootfs  # noqa: E501

        :param rootfs_id: The rootfs_id of this DfsHdfsCreateReqHdfs.  # noqa: E501
        :type: int
        """

        self._rootfs_id = rootfs_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsHdfsCreateReqHdfs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
