# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.disk_stat import DiskStat  # noqa: F401,E501


class MetadataServiceStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_util': 'float',
        'create': 'datetime',
        'delete_latency_us': 'float',
        'delete_ops': 'float',
        'disk': 'DiskStat',
        'getattrs_latency_us': 'float',
        'list_latency_us': 'float',
        'list_ops': 'float',
        'mem_usage_percent': 'float',
        'op_latency_us': 'float',
        'open_latency_us': 'float',
        'read_latency_us': 'float',
        'read_ops': 'float',
        'recovery_done': 'int',
        'recovery_left_second': 'float',
        'recovery_ops': 'float',
        'recovery_total': 'int',
        'write_latency_us': 'float',
        'write_ops': 'float'
    }

    attribute_map = {
        'cpu_util': 'cpu_util',
        'create': 'create',
        'delete_latency_us': 'delete_latency_us',
        'delete_ops': 'delete_ops',
        'disk': 'disk',
        'getattrs_latency_us': 'getattrs_latency_us',
        'list_latency_us': 'list_latency_us',
        'list_ops': 'list_ops',
        'mem_usage_percent': 'mem_usage_percent',
        'op_latency_us': 'op_latency_us',
        'open_latency_us': 'open_latency_us',
        'read_latency_us': 'read_latency_us',
        'read_ops': 'read_ops',
        'recovery_done': 'recovery_done',
        'recovery_left_second': 'recovery_left_second',
        'recovery_ops': 'recovery_ops',
        'recovery_total': 'recovery_total',
        'write_latency_us': 'write_latency_us',
        'write_ops': 'write_ops'
    }

    def __init__(self, cpu_util=None, create=None, delete_latency_us=None, delete_ops=None, disk=None, getattrs_latency_us=None, list_latency_us=None, list_ops=None, mem_usage_percent=None, op_latency_us=None, open_latency_us=None, read_latency_us=None, read_ops=None, recovery_done=None, recovery_left_second=None, recovery_ops=None, recovery_total=None, write_latency_us=None, write_ops=None):  # noqa: E501
        """MetadataServiceStat - a model defined in Swagger"""  # noqa: E501

        self._cpu_util = None
        self._create = None
        self._delete_latency_us = None
        self._delete_ops = None
        self._disk = None
        self._getattrs_latency_us = None
        self._list_latency_us = None
        self._list_ops = None
        self._mem_usage_percent = None
        self._op_latency_us = None
        self._open_latency_us = None
        self._read_latency_us = None
        self._read_ops = None
        self._recovery_done = None
        self._recovery_left_second = None
        self._recovery_ops = None
        self._recovery_total = None
        self._write_latency_us = None
        self._write_ops = None
        self.discriminator = None

        if cpu_util is not None:
            self.cpu_util = cpu_util
        if create is not None:
            self.create = create
        if delete_latency_us is not None:
            self.delete_latency_us = delete_latency_us
        if delete_ops is not None:
            self.delete_ops = delete_ops
        if disk is not None:
            self.disk = disk
        if getattrs_latency_us is not None:
            self.getattrs_latency_us = getattrs_latency_us
        if list_latency_us is not None:
            self.list_latency_us = list_latency_us
        if list_ops is not None:
            self.list_ops = list_ops
        if mem_usage_percent is not None:
            self.mem_usage_percent = mem_usage_percent
        if op_latency_us is not None:
            self.op_latency_us = op_latency_us
        if open_latency_us is not None:
            self.open_latency_us = open_latency_us
        if read_latency_us is not None:
            self.read_latency_us = read_latency_us
        if read_ops is not None:
            self.read_ops = read_ops
        if recovery_done is not None:
            self.recovery_done = recovery_done
        if recovery_left_second is not None:
            self.recovery_left_second = recovery_left_second
        if recovery_ops is not None:
            self.recovery_ops = recovery_ops
        if recovery_total is not None:
            self.recovery_total = recovery_total
        if write_latency_us is not None:
            self.write_latency_us = write_latency_us
        if write_ops is not None:
            self.write_ops = write_ops

    @property
    def cpu_util(self):
        """Gets the cpu_util of this MetadataServiceStat.  # noqa: E501


        :return: The cpu_util of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._cpu_util

    @cpu_util.setter
    def cpu_util(self, cpu_util):
        """Sets the cpu_util of this MetadataServiceStat.


        :param cpu_util: The cpu_util of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._cpu_util = cpu_util

    @property
    def create(self):
        """Gets the create of this MetadataServiceStat.  # noqa: E501


        :return: The create of this MetadataServiceStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MetadataServiceStat.


        :param create: The create of this MetadataServiceStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def delete_latency_us(self):
        """Gets the delete_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The delete_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._delete_latency_us

    @delete_latency_us.setter
    def delete_latency_us(self, delete_latency_us):
        """Sets the delete_latency_us of this MetadataServiceStat.


        :param delete_latency_us: The delete_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._delete_latency_us = delete_latency_us

    @property
    def delete_ops(self):
        """Gets the delete_ops of this MetadataServiceStat.  # noqa: E501


        :return: The delete_ops of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._delete_ops

    @delete_ops.setter
    def delete_ops(self, delete_ops):
        """Sets the delete_ops of this MetadataServiceStat.


        :param delete_ops: The delete_ops of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._delete_ops = delete_ops

    @property
    def disk(self):
        """Gets the disk of this MetadataServiceStat.  # noqa: E501


        :return: The disk of this MetadataServiceStat.  # noqa: E501
        :rtype: DiskStat
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this MetadataServiceStat.


        :param disk: The disk of this MetadataServiceStat.  # noqa: E501
        :type: DiskStat
        """

        self._disk = disk

    @property
    def getattrs_latency_us(self):
        """Gets the getattrs_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The getattrs_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._getattrs_latency_us

    @getattrs_latency_us.setter
    def getattrs_latency_us(self, getattrs_latency_us):
        """Sets the getattrs_latency_us of this MetadataServiceStat.


        :param getattrs_latency_us: The getattrs_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._getattrs_latency_us = getattrs_latency_us

    @property
    def list_latency_us(self):
        """Gets the list_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The list_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._list_latency_us

    @list_latency_us.setter
    def list_latency_us(self, list_latency_us):
        """Sets the list_latency_us of this MetadataServiceStat.


        :param list_latency_us: The list_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._list_latency_us = list_latency_us

    @property
    def list_ops(self):
        """Gets the list_ops of this MetadataServiceStat.  # noqa: E501


        :return: The list_ops of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._list_ops

    @list_ops.setter
    def list_ops(self, list_ops):
        """Sets the list_ops of this MetadataServiceStat.


        :param list_ops: The list_ops of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._list_ops = list_ops

    @property
    def mem_usage_percent(self):
        """Gets the mem_usage_percent of this MetadataServiceStat.  # noqa: E501


        :return: The mem_usage_percent of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._mem_usage_percent

    @mem_usage_percent.setter
    def mem_usage_percent(self, mem_usage_percent):
        """Sets the mem_usage_percent of this MetadataServiceStat.


        :param mem_usage_percent: The mem_usage_percent of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._mem_usage_percent = mem_usage_percent

    @property
    def op_latency_us(self):
        """Gets the op_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The op_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._op_latency_us

    @op_latency_us.setter
    def op_latency_us(self, op_latency_us):
        """Sets the op_latency_us of this MetadataServiceStat.


        :param op_latency_us: The op_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._op_latency_us = op_latency_us

    @property
    def open_latency_us(self):
        """Gets the open_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The open_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._open_latency_us

    @open_latency_us.setter
    def open_latency_us(self, open_latency_us):
        """Sets the open_latency_us of this MetadataServiceStat.


        :param open_latency_us: The open_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._open_latency_us = open_latency_us

    @property
    def read_latency_us(self):
        """Gets the read_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The read_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):
        """Sets the read_latency_us of this MetadataServiceStat.


        :param read_latency_us: The read_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._read_latency_us = read_latency_us

    @property
    def read_ops(self):
        """Gets the read_ops of this MetadataServiceStat.  # noqa: E501


        :return: The read_ops of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._read_ops

    @read_ops.setter
    def read_ops(self, read_ops):
        """Sets the read_ops of this MetadataServiceStat.


        :param read_ops: The read_ops of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._read_ops = read_ops

    @property
    def recovery_done(self):
        """Gets the recovery_done of this MetadataServiceStat.  # noqa: E501


        :return: The recovery_done of this MetadataServiceStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_done

    @recovery_done.setter
    def recovery_done(self, recovery_done):
        """Sets the recovery_done of this MetadataServiceStat.


        :param recovery_done: The recovery_done of this MetadataServiceStat.  # noqa: E501
        :type: int
        """

        self._recovery_done = recovery_done

    @property
    def recovery_left_second(self):
        """Gets the recovery_left_second of this MetadataServiceStat.  # noqa: E501


        :return: The recovery_left_second of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_left_second

    @recovery_left_second.setter
    def recovery_left_second(self, recovery_left_second):
        """Sets the recovery_left_second of this MetadataServiceStat.


        :param recovery_left_second: The recovery_left_second of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._recovery_left_second = recovery_left_second

    @property
    def recovery_ops(self):
        """Gets the recovery_ops of this MetadataServiceStat.  # noqa: E501


        :return: The recovery_ops of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_ops

    @recovery_ops.setter
    def recovery_ops(self, recovery_ops):
        """Sets the recovery_ops of this MetadataServiceStat.


        :param recovery_ops: The recovery_ops of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._recovery_ops = recovery_ops

    @property
    def recovery_total(self):
        """Gets the recovery_total of this MetadataServiceStat.  # noqa: E501

        those fields are only for primary xmds  # noqa: E501

        :return: The recovery_total of this MetadataServiceStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_total

    @recovery_total.setter
    def recovery_total(self, recovery_total):
        """Sets the recovery_total of this MetadataServiceStat.

        those fields are only for primary xmds  # noqa: E501

        :param recovery_total: The recovery_total of this MetadataServiceStat.  # noqa: E501
        :type: int
        """

        self._recovery_total = recovery_total

    @property
    def write_latency_us(self):
        """Gets the write_latency_us of this MetadataServiceStat.  # noqa: E501


        :return: The write_latency_us of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):
        """Sets the write_latency_us of this MetadataServiceStat.


        :param write_latency_us: The write_latency_us of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._write_latency_us = write_latency_us

    @property
    def write_ops(self):
        """Gets the write_ops of this MetadataServiceStat.  # noqa: E501


        :return: The write_ops of this MetadataServiceStat.  # noqa: E501
        :rtype: float
        """
        return self._write_ops

    @write_ops.setter
    def write_ops(self, write_ops):
        """Sets the write_ops of this MetadataServiceStat.


        :param write_ops: The write_ops of this MetadataServiceStat.  # noqa: E501
        :type: float
        """

        self._write_ops = write_ops

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataServiceStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
