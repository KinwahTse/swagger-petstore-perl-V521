# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.product_function import ProductFunction  # noqa: F401,E501
# from xms_client.models.product_info import ProductInfo  # noqa: F401,E501
# from xms_client.models.product_limits import ProductLimits  # noqa: F401,E501
# from xms_client.models.product_service import ProductService  # noqa: F401,E501
# from xms_client.models.storage_protocol import StorageProtocol  # noqa: F401,E501
# from xms_client.models.type import Type  # noqa: F401,E501


class License(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'create': 'datetime',
        'customer': 'str',
        'expired_time': 'datetime',
        'features': 'list[ProductFunction]',
        'id': 'int',
        'limits': 'ProductLimits',
        'name': 'str',
        'name_cn': 'str',
        'product_info': 'ProductInfo',
        'protocols': 'list[StorageProtocol]',
        'services': 'list[ProductService]',
        'signed_time': 'datetime',
        'status': 'str',
        'type': 'Type',
        'uuid': 'str',
        'version': 'str'
    }

    attribute_map = {
        'active': 'active',
        'create': 'create',
        'customer': 'customer',
        'expired_time': 'expired_time',
        'features': 'features',
        'id': 'id',
        'limits': 'limits',
        'name': 'name',
        'name_cn': 'name_cn',
        'product_info': 'product_info',
        'protocols': 'protocols',
        'services': 'services',
        'signed_time': 'signed_time',
        'status': 'status',
        'type': 'type',
        'uuid': 'uuid',
        'version': 'version'
    }

    def __init__(self, active=None, create=None, customer=None, expired_time=None, features=None, id=None, limits=None, name=None, name_cn=None, product_info=None, protocols=None, services=None, signed_time=None, status=None, type=None, uuid=None, version=None):  # noqa: E501
        """License - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._create = None
        self._customer = None
        self._expired_time = None
        self._features = None
        self._id = None
        self._limits = None
        self._name = None
        self._name_cn = None
        self._product_info = None
        self._protocols = None
        self._services = None
        self._signed_time = None
        self._status = None
        self._type = None
        self._uuid = None
        self._version = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if create is not None:
            self.create = create
        if customer is not None:
            self.customer = customer
        if expired_time is not None:
            self.expired_time = expired_time
        if features is not None:
            self.features = features
        if id is not None:
            self.id = id
        if limits is not None:
            self.limits = limits
        if name is not None:
            self.name = name
        if name_cn is not None:
            self.name_cn = name_cn
        if product_info is not None:
            self.product_info = product_info
        if protocols is not None:
            self.protocols = protocols
        if services is not None:
            self.services = services
        if signed_time is not None:
            self.signed_time = signed_time
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if uuid is not None:
            self.uuid = uuid
        if version is not None:
            self.version = version

    @property
    def active(self):
        """Gets the active of this License.  # noqa: E501


        :return: The active of this License.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this License.


        :param active: The active of this License.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def create(self):
        """Gets the create of this License.  # noqa: E501


        :return: The create of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this License.


        :param create: The create of this License.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def customer(self):
        """Gets the customer of this License.  # noqa: E501


        :return: The customer of this License.  # noqa: E501
        :rtype: str
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this License.


        :param customer: The customer of this License.  # noqa: E501
        :type: str
        """

        self._customer = customer

    @property
    def expired_time(self):
        """Gets the expired_time of this License.  # noqa: E501


        :return: The expired_time of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this License.


        :param expired_time: The expired_time of this License.  # noqa: E501
        :type: datetime
        """

        self._expired_time = expired_time

    @property
    def features(self):
        """Gets the features of this License.  # noqa: E501


        :return: The features of this License.  # noqa: E501
        :rtype: list[ProductFunction]
        """
        return self._features

    @features.setter
    def features(self, features):
        """Sets the features of this License.


        :param features: The features of this License.  # noqa: E501
        :type: list[ProductFunction]
        """

        self._features = features

    @property
    def id(self):
        """Gets the id of this License.  # noqa: E501


        :return: The id of this License.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this License.


        :param id: The id of this License.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def limits(self):
        """Gets the limits of this License.  # noqa: E501


        :return: The limits of this License.  # noqa: E501
        :rtype: ProductLimits
        """
        return self._limits

    @limits.setter
    def limits(self, limits):
        """Sets the limits of this License.


        :param limits: The limits of this License.  # noqa: E501
        :type: ProductLimits
        """

        self._limits = limits

    @property
    def name(self):
        """Gets the name of this License.  # noqa: E501


        :return: The name of this License.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this License.


        :param name: The name of this License.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def name_cn(self):
        """Gets the name_cn of this License.  # noqa: E501


        :return: The name_cn of this License.  # noqa: E501
        :rtype: str
        """
        return self._name_cn

    @name_cn.setter
    def name_cn(self, name_cn):
        """Sets the name_cn of this License.


        :param name_cn: The name_cn of this License.  # noqa: E501
        :type: str
        """

        self._name_cn = name_cn

    @property
    def product_info(self):
        """Gets the product_info of this License.  # noqa: E501


        :return: The product_info of this License.  # noqa: E501
        :rtype: ProductInfo
        """
        return self._product_info

    @product_info.setter
    def product_info(self, product_info):
        """Sets the product_info of this License.


        :param product_info: The product_info of this License.  # noqa: E501
        :type: ProductInfo
        """

        self._product_info = product_info

    @property
    def protocols(self):
        """Gets the protocols of this License.  # noqa: E501


        :return: The protocols of this License.  # noqa: E501
        :rtype: list[StorageProtocol]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this License.


        :param protocols: The protocols of this License.  # noqa: E501
        :type: list[StorageProtocol]
        """

        self._protocols = protocols

    @property
    def services(self):
        """Gets the services of this License.  # noqa: E501


        :return: The services of this License.  # noqa: E501
        :rtype: list[ProductService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this License.


        :param services: The services of this License.  # noqa: E501
        :type: list[ProductService]
        """

        self._services = services

    @property
    def signed_time(self):
        """Gets the signed_time of this License.  # noqa: E501


        :return: The signed_time of this License.  # noqa: E501
        :rtype: datetime
        """
        return self._signed_time

    @signed_time.setter
    def signed_time(self, signed_time):
        """Sets the signed_time of this License.


        :param signed_time: The signed_time of this License.  # noqa: E501
        :type: datetime
        """

        self._signed_time = signed_time

    @property
    def status(self):
        """Gets the status of this License.  # noqa: E501


        :return: The status of this License.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this License.


        :param status: The status of this License.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this License.  # noqa: E501


        :return: The type of this License.  # noqa: E501
        :rtype: Type
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this License.


        :param type: The type of this License.  # noqa: E501
        :type: Type
        """

        self._type = type

    @property
    def uuid(self):
        """Gets the uuid of this License.  # noqa: E501


        :return: The uuid of this License.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this License.


        :param uuid: The uuid of this License.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def version(self):
        """Gets the version of this License.  # noqa: E501

        load from license info  # noqa: E501

        :return: The version of this License.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this License.

        load from license info  # noqa: E501

        :param version: The version of this License.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
