# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_group_nestview import DfsGatewayGroupNestview  # noqa: F401,E501
# from xms_client.models.dfs_rootfs import DfsRootfs  # noqa: F401,E501
# from xms_client.models.dfs_rootfs_stat import DfsRootfsStat  # noqa: F401,E501
# from xms_client.models.metadata_cluster_nestview import MetadataClusterNestview  # noqa: F401,E501
# from xms_client.models.progress_info import ProgressInfo  # noqa: F401,E501


class DfsRootfsRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'description': 'str',
        'dfs_gateway_group': 'DfsGatewayGroupNestview',
        'hdfs_num': 'int',
        'id': 'int',
        'metadata_cluster': 'MetadataClusterNestview',
        'name': 'str',
        'priority_policy_ids': 'list[int]',
        'progress': 'float',
        'progress_info': 'ProgressInfo',
        's3_bucket_num': 'int',
        'share_nums': 'dict(str, int)',
        'shared': 'bool',
        'size': 'int',
        'status': 'str',
        'update': 'datetime',
        'uuid': 'str',
        'worm_log_path': 'str',
        'samples': 'list[DfsRootfsStat]'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'create': 'create',
        'description': 'description',
        'dfs_gateway_group': 'dfs_gateway_group',
        'hdfs_num': 'hdfs_num',
        'id': 'id',
        'metadata_cluster': 'metadata_cluster',
        'name': 'name',
        'priority_policy_ids': 'priority_policy_ids',
        'progress': 'progress',
        'progress_info': 'progress_info',
        's3_bucket_num': 's3_bucket_num',
        'share_nums': 'share_nums',
        'shared': 'shared',
        'size': 'size',
        'status': 'status',
        'update': 'update',
        'uuid': 'uuid',
        'worm_log_path': 'worm_log_path',
        'samples': 'samples'
    }

    def __init__(self, action_status=None, cluster=None, create=None, description=None, dfs_gateway_group=None, hdfs_num=None, id=None, metadata_cluster=None, name=None, priority_policy_ids=None, progress=None, progress_info=None, s3_bucket_num=None, share_nums=None, shared=None, size=None, status=None, update=None, uuid=None, worm_log_path=None, samples=None):  # noqa: E501
        """DfsRootfsRecord - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._create = None
        self._description = None
        self._dfs_gateway_group = None
        self._hdfs_num = None
        self._id = None
        self._metadata_cluster = None
        self._name = None
        self._priority_policy_ids = None
        self._progress = None
        self._progress_info = None
        self._s3_bucket_num = None
        self._share_nums = None
        self._shared = None
        self._size = None
        self._status = None
        self._update = None
        self._uuid = None
        self._worm_log_path = None
        self._samples = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if dfs_gateway_group is not None:
            self.dfs_gateway_group = dfs_gateway_group
        if hdfs_num is not None:
            self.hdfs_num = hdfs_num
        if id is not None:
            self.id = id
        if metadata_cluster is not None:
            self.metadata_cluster = metadata_cluster
        if name is not None:
            self.name = name
        if priority_policy_ids is not None:
            self.priority_policy_ids = priority_policy_ids
        if progress is not None:
            self.progress = progress
        if progress_info is not None:
            self.progress_info = progress_info
        if s3_bucket_num is not None:
            self.s3_bucket_num = s3_bucket_num
        if share_nums is not None:
            self.share_nums = share_nums
        if shared is not None:
            self.shared = shared
        if size is not None:
            self.size = size
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if uuid is not None:
            self.uuid = uuid
        if worm_log_path is not None:
            self.worm_log_path = worm_log_path
        if samples is not None:
            self.samples = samples

    @property
    def action_status(self):
        """Gets the action_status of this DfsRootfsRecord.  # noqa: E501


        :return: The action_status of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsRootfsRecord.


        :param action_status: The action_status of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this DfsRootfsRecord.  # noqa: E501


        :return: The cluster of this DfsRootfsRecord.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsRootfsRecord.


        :param cluster: The cluster of this DfsRootfsRecord.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsRootfsRecord.  # noqa: E501


        :return: The create of this DfsRootfsRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsRootfsRecord.


        :param create: The create of this DfsRootfsRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this DfsRootfsRecord.  # noqa: E501


        :return: The description of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DfsRootfsRecord.


        :param description: The description of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dfs_gateway_group(self):
        """Gets the dfs_gateway_group of this DfsRootfsRecord.  # noqa: E501


        :return: The dfs_gateway_group of this DfsRootfsRecord.  # noqa: E501
        :rtype: DfsGatewayGroupNestview
        """
        return self._dfs_gateway_group

    @dfs_gateway_group.setter
    def dfs_gateway_group(self, dfs_gateway_group):
        """Sets the dfs_gateway_group of this DfsRootfsRecord.


        :param dfs_gateway_group: The dfs_gateway_group of this DfsRootfsRecord.  # noqa: E501
        :type: DfsGatewayGroupNestview
        """

        self._dfs_gateway_group = dfs_gateway_group

    @property
    def hdfs_num(self):
        """Gets the hdfs_num of this DfsRootfsRecord.  # noqa: E501


        :return: The hdfs_num of this DfsRootfsRecord.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_num

    @hdfs_num.setter
    def hdfs_num(self, hdfs_num):
        """Sets the hdfs_num of this DfsRootfsRecord.


        :param hdfs_num: The hdfs_num of this DfsRootfsRecord.  # noqa: E501
        :type: int
        """

        self._hdfs_num = hdfs_num

    @property
    def id(self):
        """Gets the id of this DfsRootfsRecord.  # noqa: E501


        :return: The id of this DfsRootfsRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsRootfsRecord.


        :param id: The id of this DfsRootfsRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def metadata_cluster(self):
        """Gets the metadata_cluster of this DfsRootfsRecord.  # noqa: E501


        :return: The metadata_cluster of this DfsRootfsRecord.  # noqa: E501
        :rtype: MetadataClusterNestview
        """
        return self._metadata_cluster

    @metadata_cluster.setter
    def metadata_cluster(self, metadata_cluster):
        """Sets the metadata_cluster of this DfsRootfsRecord.


        :param metadata_cluster: The metadata_cluster of this DfsRootfsRecord.  # noqa: E501
        :type: MetadataClusterNestview
        """

        self._metadata_cluster = metadata_cluster

    @property
    def name(self):
        """Gets the name of this DfsRootfsRecord.  # noqa: E501


        :return: The name of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsRootfsRecord.


        :param name: The name of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def priority_policy_ids(self):
        """Gets the priority_policy_ids of this DfsRootfsRecord.  # noqa: E501


        :return: The priority_policy_ids of this DfsRootfsRecord.  # noqa: E501
        :rtype: list[int]
        """
        return self._priority_policy_ids

    @priority_policy_ids.setter
    def priority_policy_ids(self, priority_policy_ids):
        """Sets the priority_policy_ids of this DfsRootfsRecord.


        :param priority_policy_ids: The priority_policy_ids of this DfsRootfsRecord.  # noqa: E501
        :type: list[int]
        """

        self._priority_policy_ids = priority_policy_ids

    @property
    def progress(self):
        """Gets the progress of this DfsRootfsRecord.  # noqa: E501


        :return: The progress of this DfsRootfsRecord.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DfsRootfsRecord.


        :param progress: The progress of this DfsRootfsRecord.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def progress_info(self):
        """Gets the progress_info of this DfsRootfsRecord.  # noqa: E501


        :return: The progress_info of this DfsRootfsRecord.  # noqa: E501
        :rtype: ProgressInfo
        """
        return self._progress_info

    @progress_info.setter
    def progress_info(self, progress_info):
        """Sets the progress_info of this DfsRootfsRecord.


        :param progress_info: The progress_info of this DfsRootfsRecord.  # noqa: E501
        :type: ProgressInfo
        """

        self._progress_info = progress_info

    @property
    def s3_bucket_num(self):
        """Gets the s3_bucket_num of this DfsRootfsRecord.  # noqa: E501


        :return: The s3_bucket_num of this DfsRootfsRecord.  # noqa: E501
        :rtype: int
        """
        return self._s3_bucket_num

    @s3_bucket_num.setter
    def s3_bucket_num(self, s3_bucket_num):
        """Sets the s3_bucket_num of this DfsRootfsRecord.


        :param s3_bucket_num: The s3_bucket_num of this DfsRootfsRecord.  # noqa: E501
        :type: int
        """

        self._s3_bucket_num = s3_bucket_num

    @property
    def share_nums(self):
        """Gets the share_nums of this DfsRootfsRecord.  # noqa: E501


        :return: The share_nums of this DfsRootfsRecord.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._share_nums

    @share_nums.setter
    def share_nums(self, share_nums):
        """Sets the share_nums of this DfsRootfsRecord.


        :param share_nums: The share_nums of this DfsRootfsRecord.  # noqa: E501
        :type: dict(str, int)
        """

        self._share_nums = share_nums

    @property
    def shared(self):
        """Gets the shared of this DfsRootfsRecord.  # noqa: E501


        :return: The shared of this DfsRootfsRecord.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this DfsRootfsRecord.


        :param shared: The shared of this DfsRootfsRecord.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def size(self):
        """Gets the size of this DfsRootfsRecord.  # noqa: E501


        :return: The size of this DfsRootfsRecord.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DfsRootfsRecord.


        :param size: The size of this DfsRootfsRecord.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def status(self):
        """Gets the status of this DfsRootfsRecord.  # noqa: E501


        :return: The status of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsRootfsRecord.


        :param status: The status of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DfsRootfsRecord.  # noqa: E501


        :return: The update of this DfsRootfsRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsRootfsRecord.


        :param update: The update of this DfsRootfsRecord.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def uuid(self):
        """Gets the uuid of this DfsRootfsRecord.  # noqa: E501


        :return: The uuid of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this DfsRootfsRecord.


        :param uuid: The uuid of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    @property
    def worm_log_path(self):
        """Gets the worm_log_path of this DfsRootfsRecord.  # noqa: E501


        :return: The worm_log_path of this DfsRootfsRecord.  # noqa: E501
        :rtype: str
        """
        return self._worm_log_path

    @worm_log_path.setter
    def worm_log_path(self, worm_log_path):
        """Sets the worm_log_path of this DfsRootfsRecord.


        :param worm_log_path: The worm_log_path of this DfsRootfsRecord.  # noqa: E501
        :type: str
        """

        self._worm_log_path = worm_log_path

    @property
    def samples(self):
        """Gets the samples of this DfsRootfsRecord.  # noqa: E501


        :return: The samples of this DfsRootfsRecord.  # noqa: E501
        :rtype: list[DfsRootfsStat]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this DfsRootfsRecord.


        :param samples: The samples of this DfsRootfsRecord.  # noqa: E501
        :type: list[DfsRootfsStat]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsRootfsRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
