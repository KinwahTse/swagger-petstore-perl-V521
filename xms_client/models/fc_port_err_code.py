# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.fc_port_nestview import FCPortNestview  # noqa: F401,E501


class FCPortErrCode(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'error_frames': 'int',
        'error_frames_offset': 'int',
        'error_frames_value': 'int',
        'fc_port': 'FCPortNestview',
        'id': 'int',
        'link_failure_count': 'int',
        'loss_of_signal_count': 'int',
        'loss_of_sync_count': 'int',
        'start': 'datetime',
        'update': 'datetime'
    }

    attribute_map = {
        'create': 'create',
        'error_frames': 'error_frames',
        'error_frames_offset': 'error_frames_offset',
        'error_frames_value': 'error_frames_value',
        'fc_port': 'fc_port',
        'id': 'id',
        'link_failure_count': 'link_failure_count',
        'loss_of_signal_count': 'loss_of_signal_count',
        'loss_of_sync_count': 'loss_of_sync_count',
        'start': 'start',
        'update': 'update'
    }

    def __init__(self, create=None, error_frames=None, error_frames_offset=None, error_frames_value=None, fc_port=None, id=None, link_failure_count=None, loss_of_signal_count=None, loss_of_sync_count=None, start=None, update=None):  # noqa: E501
        """FCPortErrCode - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._error_frames = None
        self._error_frames_offset = None
        self._error_frames_value = None
        self._fc_port = None
        self._id = None
        self._link_failure_count = None
        self._loss_of_signal_count = None
        self._loss_of_sync_count = None
        self._start = None
        self._update = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if error_frames is not None:
            self.error_frames = error_frames
        if error_frames_offset is not None:
            self.error_frames_offset = error_frames_offset
        if error_frames_value is not None:
            self.error_frames_value = error_frames_value
        if fc_port is not None:
            self.fc_port = fc_port
        if id is not None:
            self.id = id
        if link_failure_count is not None:
            self.link_failure_count = link_failure_count
        if loss_of_signal_count is not None:
            self.loss_of_signal_count = loss_of_signal_count
        if loss_of_sync_count is not None:
            self.loss_of_sync_count = loss_of_sync_count
        if start is not None:
            self.start = start
        if update is not None:
            self.update = update

    @property
    def create(self):
        """Gets the create of this FCPortErrCode.  # noqa: E501


        :return: The create of this FCPortErrCode.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FCPortErrCode.


        :param create: The create of this FCPortErrCode.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def error_frames(self):
        """Gets the error_frames of this FCPortErrCode.  # noqa: E501


        :return: The error_frames of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._error_frames

    @error_frames.setter
    def error_frames(self, error_frames):
        """Sets the error_frames of this FCPortErrCode.


        :param error_frames: The error_frames of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._error_frames = error_frames

    @property
    def error_frames_offset(self):
        """Gets the error_frames_offset of this FCPortErrCode.  # noqa: E501


        :return: The error_frames_offset of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._error_frames_offset

    @error_frames_offset.setter
    def error_frames_offset(self, error_frames_offset):
        """Sets the error_frames_offset of this FCPortErrCode.


        :param error_frames_offset: The error_frames_offset of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._error_frames_offset = error_frames_offset

    @property
    def error_frames_value(self):
        """Gets the error_frames_value of this FCPortErrCode.  # noqa: E501


        :return: The error_frames_value of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._error_frames_value

    @error_frames_value.setter
    def error_frames_value(self, error_frames_value):
        """Sets the error_frames_value of this FCPortErrCode.


        :param error_frames_value: The error_frames_value of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._error_frames_value = error_frames_value

    @property
    def fc_port(self):
        """Gets the fc_port of this FCPortErrCode.  # noqa: E501


        :return: The fc_port of this FCPortErrCode.  # noqa: E501
        :rtype: FCPortNestview
        """
        return self._fc_port

    @fc_port.setter
    def fc_port(self, fc_port):
        """Sets the fc_port of this FCPortErrCode.


        :param fc_port: The fc_port of this FCPortErrCode.  # noqa: E501
        :type: FCPortNestview
        """

        self._fc_port = fc_port

    @property
    def id(self):
        """Gets the id of this FCPortErrCode.  # noqa: E501


        :return: The id of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FCPortErrCode.


        :param id: The id of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link_failure_count(self):
        """Gets the link_failure_count of this FCPortErrCode.  # noqa: E501


        :return: The link_failure_count of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._link_failure_count

    @link_failure_count.setter
    def link_failure_count(self, link_failure_count):
        """Sets the link_failure_count of this FCPortErrCode.


        :param link_failure_count: The link_failure_count of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._link_failure_count = link_failure_count

    @property
    def loss_of_signal_count(self):
        """Gets the loss_of_signal_count of this FCPortErrCode.  # noqa: E501


        :return: The loss_of_signal_count of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._loss_of_signal_count

    @loss_of_signal_count.setter
    def loss_of_signal_count(self, loss_of_signal_count):
        """Sets the loss_of_signal_count of this FCPortErrCode.


        :param loss_of_signal_count: The loss_of_signal_count of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._loss_of_signal_count = loss_of_signal_count

    @property
    def loss_of_sync_count(self):
        """Gets the loss_of_sync_count of this FCPortErrCode.  # noqa: E501


        :return: The loss_of_sync_count of this FCPortErrCode.  # noqa: E501
        :rtype: int
        """
        return self._loss_of_sync_count

    @loss_of_sync_count.setter
    def loss_of_sync_count(self, loss_of_sync_count):
        """Sets the loss_of_sync_count of this FCPortErrCode.


        :param loss_of_sync_count: The loss_of_sync_count of this FCPortErrCode.  # noqa: E501
        :type: int
        """

        self._loss_of_sync_count = loss_of_sync_count

    @property
    def start(self):
        """Gets the start of this FCPortErrCode.  # noqa: E501


        :return: The start of this FCPortErrCode.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this FCPortErrCode.


        :param start: The start of this FCPortErrCode.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def update(self):
        """Gets the update of this FCPortErrCode.  # noqa: E501


        :return: The update of this FCPortErrCode.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FCPortErrCode.


        :param update: The update of this FCPortErrCode.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FCPortErrCode):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
