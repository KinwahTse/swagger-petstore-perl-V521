# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cron_expr': 'str',
        'description': 'str',
        'dp_gateway_id': 'int',
        'name': 'str',
        'retain_time': 'str'
    }

    attribute_map = {
        'cron_expr': 'cron_expr',
        'description': 'description',
        'dp_gateway_id': 'dp_gateway_id',
        'name': 'name',
        'retain_time': 'retain_time'
    }

    def __init__(self, cron_expr=None, description=None, dp_gateway_id=None, name=None, retain_time=None):  # noqa: E501
        """DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy - a model defined in Swagger"""  # noqa: E501

        self._cron_expr = None
        self._description = None
        self._dp_gateway_id = None
        self._name = None
        self._retain_time = None
        self.discriminator = None

        self.cron_expr = cron_expr
        if description is not None:
            self.description = description
        self.dp_gateway_id = dp_gateway_id
        self.name = name
        self.retain_time = retain_time

    @property
    def cron_expr(self):
        """Gets the cron_expr of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501


        :return: The cron_expr of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._cron_expr

    @cron_expr.setter
    def cron_expr(self, cron_expr):
        """Sets the cron_expr of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.


        :param cron_expr: The cron_expr of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if cron_expr is None:
            raise ValueError("Invalid value for `cron_expr`, must not be `None`")  # noqa: E501

        self._cron_expr = cron_expr

    @property
    def description(self):
        """Gets the description of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501


        :return: The description of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.


        :param description: The description of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dp_gateway_id(self):
        """Gets the dp_gateway_id of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501


        :return: The dp_gateway_id of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :rtype: int
        """
        return self._dp_gateway_id

    @dp_gateway_id.setter
    def dp_gateway_id(self, dp_gateway_id):
        """Sets the dp_gateway_id of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.


        :param dp_gateway_id: The dp_gateway_id of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :type: int
        """
        if dp_gateway_id is None:
            raise ValueError("Invalid value for `dp_gateway_id`, must not be `None`")  # noqa: E501

        self._dp_gateway_id = dp_gateway_id

    @property
    def name(self):
        """Gets the name of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501


        :return: The name of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.


        :param name: The name of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def retain_time(self):
        """Gets the retain_time of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501


        :return: The retain_time of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :rtype: str
        """
        return self._retain_time

    @retain_time.setter
    def retain_time(self, retain_time):
        """Sets the retain_time of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.


        :param retain_time: The retain_time of this DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy.  # noqa: E501
        :type: str
        """
        if retain_time is None:
            raise ValueError("Invalid value for `retain_time`, must not be `None`")  # noqa: E501

        self._retain_time = retain_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DpDfsSnapshotPolicyCreateReqDpDfsSnapshotPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
