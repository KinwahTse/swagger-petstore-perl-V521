# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.disk_nestview import DiskNestview  # noqa: F401,E501
# from xms_client.models.virtual_machine_nestview import VirtualMachineNestview  # noqa: F401,E501
# from xms_client.models.volume_nestview import VolumeNestview  # noqa: F401,E501


class VMDisk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterNestview',
        'disk': 'DiskNestview',
        'id': 'int',
        'type': 'str',
        'vm': 'VirtualMachineNestview',
        'volume': 'VolumeNestview'
    }

    attribute_map = {
        'cluster': 'cluster',
        'disk': 'disk',
        'id': 'id',
        'type': 'type',
        'vm': 'vm',
        'volume': 'volume'
    }

    def __init__(self, cluster=None, disk=None, id=None, type=None, vm=None, volume=None):  # noqa: E501
        """VMDisk - a model defined in Swagger"""  # noqa: E501

        self._cluster = None
        self._disk = None
        self._id = None
        self._type = None
        self._vm = None
        self._volume = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if disk is not None:
            self.disk = disk
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if vm is not None:
            self.vm = vm
        if volume is not None:
            self.volume = volume

    @property
    def cluster(self):
        """Gets the cluster of this VMDisk.  # noqa: E501


        :return: The cluster of this VMDisk.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this VMDisk.


        :param cluster: The cluster of this VMDisk.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def disk(self):
        """Gets the disk of this VMDisk.  # noqa: E501


        :return: The disk of this VMDisk.  # noqa: E501
        :rtype: DiskNestview
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this VMDisk.


        :param disk: The disk of this VMDisk.  # noqa: E501
        :type: DiskNestview
        """

        self._disk = disk

    @property
    def id(self):
        """Gets the id of this VMDisk.  # noqa: E501


        :return: The id of this VMDisk.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VMDisk.


        :param id: The id of this VMDisk.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this VMDisk.  # noqa: E501


        :return: The type of this VMDisk.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VMDisk.


        :param type: The type of this VMDisk.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def vm(self):
        """Gets the vm of this VMDisk.  # noqa: E501


        :return: The vm of this VMDisk.  # noqa: E501
        :rtype: VirtualMachineNestview
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this VMDisk.


        :param vm: The vm of this VMDisk.  # noqa: E501
        :type: VirtualMachineNestview
        """

        self._vm = vm

    @property
    def volume(self):
        """Gets the volume of this VMDisk.  # noqa: E501


        :return: The volume of this VMDisk.  # noqa: E501
        :rtype: VolumeNestview
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this VMDisk.


        :param volume: The volume of this VMDisk.  # noqa: E501
        :type: VolumeNestview
        """

        self._volume = volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMDisk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
