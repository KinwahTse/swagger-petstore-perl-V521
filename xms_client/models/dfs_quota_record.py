# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_path_nestview import DfsPathNestview  # noqa: F401,E501
# from xms_client.models.dfs_quota import DfsQuota  # noqa: F401,E501
# from xms_client.models.dfs_quota_stat import DfsQuotaStat  # noqa: F401,E501
# from xms_client.models.dfs_rootfs_nestview import DfsRootfsNestview  # noqa: F401,E501
# from xms_client.models.domain_user_group_nestview import DomainUserGroupNestview  # noqa: F401,E501
# from xms_client.models.domain_user_nestview import DomainUserNestview  # noqa: F401,E501
# from xms_client.models.fs_user_group_nestview import FSUserGroupNestview  # noqa: F401,E501
# from xms_client.models.fs_user_nestview import FSUserNestview  # noqa: F401,E501


class DfsQuotaRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'dfs_path': 'DfsPathNestview',
        'dfs_rootfs': 'DfsRootfsNestview',
        'domain_user': 'DomainUserNestview',
        'domain_user_group': 'DomainUserGroupNestview',
        'files_exceed_time': 'datetime',
        'files_grace_time': 'int',
        'files_hard_quota': 'int',
        'files_soft_quota': 'int',
        'files_suggest_quota': 'int',
        'fs_user': 'FSUserNestview',
        'fs_user_group': 'FSUserGroupNestview',
        'id': 'int',
        'inode': 'int',
        'shared': 'bool',
        'size_exceed_time': 'datetime',
        'size_grace_time': 'int',
        'size_hard_quota': 'int',
        'size_soft_quota': 'int',
        'size_suggest_quota': 'int',
        'source_type': 'str',
        'source_uuid': 'str',
        'status': 'str',
        'type': 'str',
        'update': 'datetime',
        'samples': 'list[DfsQuotaStat]'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'create': 'create',
        'dfs_path': 'dfs_path',
        'dfs_rootfs': 'dfs_rootfs',
        'domain_user': 'domain_user',
        'domain_user_group': 'domain_user_group',
        'files_exceed_time': 'files_exceed_time',
        'files_grace_time': 'files_grace_time',
        'files_hard_quota': 'files_hard_quota',
        'files_soft_quota': 'files_soft_quota',
        'files_suggest_quota': 'files_suggest_quota',
        'fs_user': 'fs_user',
        'fs_user_group': 'fs_user_group',
        'id': 'id',
        'inode': 'inode',
        'shared': 'shared',
        'size_exceed_time': 'size_exceed_time',
        'size_grace_time': 'size_grace_time',
        'size_hard_quota': 'size_hard_quota',
        'size_soft_quota': 'size_soft_quota',
        'size_suggest_quota': 'size_suggest_quota',
        'source_type': 'source_type',
        'source_uuid': 'source_uuid',
        'status': 'status',
        'type': 'type',
        'update': 'update',
        'samples': 'samples'
    }

    def __init__(self, action_status=None, cluster=None, create=None, dfs_path=None, dfs_rootfs=None, domain_user=None, domain_user_group=None, files_exceed_time=None, files_grace_time=None, files_hard_quota=None, files_soft_quota=None, files_suggest_quota=None, fs_user=None, fs_user_group=None, id=None, inode=None, shared=None, size_exceed_time=None, size_grace_time=None, size_hard_quota=None, size_soft_quota=None, size_suggest_quota=None, source_type=None, source_uuid=None, status=None, type=None, update=None, samples=None):  # noqa: E501
        """DfsQuotaRecord - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._create = None
        self._dfs_path = None
        self._dfs_rootfs = None
        self._domain_user = None
        self._domain_user_group = None
        self._files_exceed_time = None
        self._files_grace_time = None
        self._files_hard_quota = None
        self._files_soft_quota = None
        self._files_suggest_quota = None
        self._fs_user = None
        self._fs_user_group = None
        self._id = None
        self._inode = None
        self._shared = None
        self._size_exceed_time = None
        self._size_grace_time = None
        self._size_hard_quota = None
        self._size_soft_quota = None
        self._size_suggest_quota = None
        self._source_type = None
        self._source_uuid = None
        self._status = None
        self._type = None
        self._update = None
        self._samples = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if dfs_path is not None:
            self.dfs_path = dfs_path
        if dfs_rootfs is not None:
            self.dfs_rootfs = dfs_rootfs
        if domain_user is not None:
            self.domain_user = domain_user
        if domain_user_group is not None:
            self.domain_user_group = domain_user_group
        if files_exceed_time is not None:
            self.files_exceed_time = files_exceed_time
        if files_grace_time is not None:
            self.files_grace_time = files_grace_time
        if files_hard_quota is not None:
            self.files_hard_quota = files_hard_quota
        if files_soft_quota is not None:
            self.files_soft_quota = files_soft_quota
        if files_suggest_quota is not None:
            self.files_suggest_quota = files_suggest_quota
        if fs_user is not None:
            self.fs_user = fs_user
        if fs_user_group is not None:
            self.fs_user_group = fs_user_group
        if id is not None:
            self.id = id
        if inode is not None:
            self.inode = inode
        if shared is not None:
            self.shared = shared
        if size_exceed_time is not None:
            self.size_exceed_time = size_exceed_time
        if size_grace_time is not None:
            self.size_grace_time = size_grace_time
        if size_hard_quota is not None:
            self.size_hard_quota = size_hard_quota
        if size_soft_quota is not None:
            self.size_soft_quota = size_soft_quota
        if size_suggest_quota is not None:
            self.size_suggest_quota = size_suggest_quota
        if source_type is not None:
            self.source_type = source_type
        if source_uuid is not None:
            self.source_uuid = source_uuid
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if update is not None:
            self.update = update
        if samples is not None:
            self.samples = samples

    @property
    def action_status(self):
        """Gets the action_status of this DfsQuotaRecord.  # noqa: E501


        :return: The action_status of this DfsQuotaRecord.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsQuotaRecord.


        :param action_status: The action_status of this DfsQuotaRecord.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this DfsQuotaRecord.  # noqa: E501


        :return: The cluster of this DfsQuotaRecord.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsQuotaRecord.


        :param cluster: The cluster of this DfsQuotaRecord.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsQuotaRecord.  # noqa: E501


        :return: The create of this DfsQuotaRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsQuotaRecord.


        :param create: The create of this DfsQuotaRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dfs_path(self):
        """Gets the dfs_path of this DfsQuotaRecord.  # noqa: E501


        :return: The dfs_path of this DfsQuotaRecord.  # noqa: E501
        :rtype: DfsPathNestview
        """
        return self._dfs_path

    @dfs_path.setter
    def dfs_path(self, dfs_path):
        """Sets the dfs_path of this DfsQuotaRecord.


        :param dfs_path: The dfs_path of this DfsQuotaRecord.  # noqa: E501
        :type: DfsPathNestview
        """

        self._dfs_path = dfs_path

    @property
    def dfs_rootfs(self):
        """Gets the dfs_rootfs of this DfsQuotaRecord.  # noqa: E501


        :return: The dfs_rootfs of this DfsQuotaRecord.  # noqa: E501
        :rtype: DfsRootfsNestview
        """
        return self._dfs_rootfs

    @dfs_rootfs.setter
    def dfs_rootfs(self, dfs_rootfs):
        """Sets the dfs_rootfs of this DfsQuotaRecord.


        :param dfs_rootfs: The dfs_rootfs of this DfsQuotaRecord.  # noqa: E501
        :type: DfsRootfsNestview
        """

        self._dfs_rootfs = dfs_rootfs

    @property
    def domain_user(self):
        """Gets the domain_user of this DfsQuotaRecord.  # noqa: E501


        :return: The domain_user of this DfsQuotaRecord.  # noqa: E501
        :rtype: DomainUserNestview
        """
        return self._domain_user

    @domain_user.setter
    def domain_user(self, domain_user):
        """Sets the domain_user of this DfsQuotaRecord.


        :param domain_user: The domain_user of this DfsQuotaRecord.  # noqa: E501
        :type: DomainUserNestview
        """

        self._domain_user = domain_user

    @property
    def domain_user_group(self):
        """Gets the domain_user_group of this DfsQuotaRecord.  # noqa: E501


        :return: The domain_user_group of this DfsQuotaRecord.  # noqa: E501
        :rtype: DomainUserGroupNestview
        """
        return self._domain_user_group

    @domain_user_group.setter
    def domain_user_group(self, domain_user_group):
        """Sets the domain_user_group of this DfsQuotaRecord.


        :param domain_user_group: The domain_user_group of this DfsQuotaRecord.  # noqa: E501
        :type: DomainUserGroupNestview
        """

        self._domain_user_group = domain_user_group

    @property
    def files_exceed_time(self):
        """Gets the files_exceed_time of this DfsQuotaRecord.  # noqa: E501


        :return: The files_exceed_time of this DfsQuotaRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._files_exceed_time

    @files_exceed_time.setter
    def files_exceed_time(self, files_exceed_time):
        """Sets the files_exceed_time of this DfsQuotaRecord.


        :param files_exceed_time: The files_exceed_time of this DfsQuotaRecord.  # noqa: E501
        :type: datetime
        """

        self._files_exceed_time = files_exceed_time

    @property
    def files_grace_time(self):
        """Gets the files_grace_time of this DfsQuotaRecord.  # noqa: E501


        :return: The files_grace_time of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._files_grace_time

    @files_grace_time.setter
    def files_grace_time(self, files_grace_time):
        """Sets the files_grace_time of this DfsQuotaRecord.


        :param files_grace_time: The files_grace_time of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._files_grace_time = files_grace_time

    @property
    def files_hard_quota(self):
        """Gets the files_hard_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The files_hard_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._files_hard_quota

    @files_hard_quota.setter
    def files_hard_quota(self, files_hard_quota):
        """Sets the files_hard_quota of this DfsQuotaRecord.


        :param files_hard_quota: The files_hard_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._files_hard_quota = files_hard_quota

    @property
    def files_soft_quota(self):
        """Gets the files_soft_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The files_soft_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._files_soft_quota

    @files_soft_quota.setter
    def files_soft_quota(self, files_soft_quota):
        """Sets the files_soft_quota of this DfsQuotaRecord.


        :param files_soft_quota: The files_soft_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._files_soft_quota = files_soft_quota

    @property
    def files_suggest_quota(self):
        """Gets the files_suggest_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The files_suggest_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._files_suggest_quota

    @files_suggest_quota.setter
    def files_suggest_quota(self, files_suggest_quota):
        """Sets the files_suggest_quota of this DfsQuotaRecord.


        :param files_suggest_quota: The files_suggest_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._files_suggest_quota = files_suggest_quota

    @property
    def fs_user(self):
        """Gets the fs_user of this DfsQuotaRecord.  # noqa: E501


        :return: The fs_user of this DfsQuotaRecord.  # noqa: E501
        :rtype: FSUserNestview
        """
        return self._fs_user

    @fs_user.setter
    def fs_user(self, fs_user):
        """Sets the fs_user of this DfsQuotaRecord.


        :param fs_user: The fs_user of this DfsQuotaRecord.  # noqa: E501
        :type: FSUserNestview
        """

        self._fs_user = fs_user

    @property
    def fs_user_group(self):
        """Gets the fs_user_group of this DfsQuotaRecord.  # noqa: E501


        :return: The fs_user_group of this DfsQuotaRecord.  # noqa: E501
        :rtype: FSUserGroupNestview
        """
        return self._fs_user_group

    @fs_user_group.setter
    def fs_user_group(self, fs_user_group):
        """Sets the fs_user_group of this DfsQuotaRecord.


        :param fs_user_group: The fs_user_group of this DfsQuotaRecord.  # noqa: E501
        :type: FSUserGroupNestview
        """

        self._fs_user_group = fs_user_group

    @property
    def id(self):
        """Gets the id of this DfsQuotaRecord.  # noqa: E501


        :return: The id of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsQuotaRecord.


        :param id: The id of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inode(self):
        """Gets the inode of this DfsQuotaRecord.  # noqa: E501


        :return: The inode of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._inode

    @inode.setter
    def inode(self, inode):
        """Sets the inode of this DfsQuotaRecord.


        :param inode: The inode of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._inode = inode

    @property
    def shared(self):
        """Gets the shared of this DfsQuotaRecord.  # noqa: E501


        :return: The shared of this DfsQuotaRecord.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this DfsQuotaRecord.


        :param shared: The shared of this DfsQuotaRecord.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def size_exceed_time(self):
        """Gets the size_exceed_time of this DfsQuotaRecord.  # noqa: E501


        :return: The size_exceed_time of this DfsQuotaRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._size_exceed_time

    @size_exceed_time.setter
    def size_exceed_time(self, size_exceed_time):
        """Sets the size_exceed_time of this DfsQuotaRecord.


        :param size_exceed_time: The size_exceed_time of this DfsQuotaRecord.  # noqa: E501
        :type: datetime
        """

        self._size_exceed_time = size_exceed_time

    @property
    def size_grace_time(self):
        """Gets the size_grace_time of this DfsQuotaRecord.  # noqa: E501


        :return: The size_grace_time of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._size_grace_time

    @size_grace_time.setter
    def size_grace_time(self, size_grace_time):
        """Sets the size_grace_time of this DfsQuotaRecord.


        :param size_grace_time: The size_grace_time of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._size_grace_time = size_grace_time

    @property
    def size_hard_quota(self):
        """Gets the size_hard_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The size_hard_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._size_hard_quota

    @size_hard_quota.setter
    def size_hard_quota(self, size_hard_quota):
        """Sets the size_hard_quota of this DfsQuotaRecord.


        :param size_hard_quota: The size_hard_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._size_hard_quota = size_hard_quota

    @property
    def size_soft_quota(self):
        """Gets the size_soft_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The size_soft_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._size_soft_quota

    @size_soft_quota.setter
    def size_soft_quota(self, size_soft_quota):
        """Sets the size_soft_quota of this DfsQuotaRecord.


        :param size_soft_quota: The size_soft_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._size_soft_quota = size_soft_quota

    @property
    def size_suggest_quota(self):
        """Gets the size_suggest_quota of this DfsQuotaRecord.  # noqa: E501


        :return: The size_suggest_quota of this DfsQuotaRecord.  # noqa: E501
        :rtype: int
        """
        return self._size_suggest_quota

    @size_suggest_quota.setter
    def size_suggest_quota(self, size_suggest_quota):
        """Sets the size_suggest_quota of this DfsQuotaRecord.


        :param size_suggest_quota: The size_suggest_quota of this DfsQuotaRecord.  # noqa: E501
        :type: int
        """

        self._size_suggest_quota = size_suggest_quota

    @property
    def source_type(self):
        """Gets the source_type of this DfsQuotaRecord.  # noqa: E501


        :return: The source_type of this DfsQuotaRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DfsQuotaRecord.


        :param source_type: The source_type of this DfsQuotaRecord.  # noqa: E501
        :type: str
        """

        self._source_type = source_type

    @property
    def source_uuid(self):
        """Gets the source_uuid of this DfsQuotaRecord.  # noqa: E501


        :return: The source_uuid of this DfsQuotaRecord.  # noqa: E501
        :rtype: str
        """
        return self._source_uuid

    @source_uuid.setter
    def source_uuid(self, source_uuid):
        """Sets the source_uuid of this DfsQuotaRecord.


        :param source_uuid: The source_uuid of this DfsQuotaRecord.  # noqa: E501
        :type: str
        """

        self._source_uuid = source_uuid

    @property
    def status(self):
        """Gets the status of this DfsQuotaRecord.  # noqa: E501


        :return: The status of this DfsQuotaRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsQuotaRecord.


        :param status: The status of this DfsQuotaRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this DfsQuotaRecord.  # noqa: E501


        :return: The type of this DfsQuotaRecord.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DfsQuotaRecord.


        :param type: The type of this DfsQuotaRecord.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update(self):
        """Gets the update of this DfsQuotaRecord.  # noqa: E501


        :return: The update of this DfsQuotaRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsQuotaRecord.


        :param update: The update of this DfsQuotaRecord.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def samples(self):
        """Gets the samples of this DfsQuotaRecord.  # noqa: E501


        :return: The samples of this DfsQuotaRecord.  # noqa: E501
        :rtype: list[DfsQuotaStat]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this DfsQuotaRecord.


        :param samples: The samples of this DfsQuotaRecord.  # noqa: E501
        :type: list[DfsQuotaStat]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
