# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class OSBucketQosUserRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'max_bandwidth_bytes': 'int',
        'requests_per_second': 'int',
        'sudden_bandwidth_bytes': 'int'
    }

    attribute_map = {
        'max_bandwidth_bytes': 'max_bandwidth_bytes',
        'requests_per_second': 'requests_per_second',
        'sudden_bandwidth_bytes': 'sudden_bandwidth_bytes'
    }

    def __init__(self, max_bandwidth_bytes=None, requests_per_second=None, sudden_bandwidth_bytes=None):  # noqa: E501
        """OSBucketQosUserRequest - a model defined in Swagger"""  # noqa: E501

        self._max_bandwidth_bytes = None
        self._requests_per_second = None
        self._sudden_bandwidth_bytes = None
        self.discriminator = None

        self.max_bandwidth_bytes = max_bandwidth_bytes
        self.requests_per_second = requests_per_second
        if sudden_bandwidth_bytes is not None:
            self.sudden_bandwidth_bytes = sudden_bandwidth_bytes

    @property
    def max_bandwidth_bytes(self):
        """Gets the max_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501


        :return: The max_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_bandwidth_bytes

    @max_bandwidth_bytes.setter
    def max_bandwidth_bytes(self, max_bandwidth_bytes):
        """Sets the max_bandwidth_bytes of this OSBucketQosUserRequest.


        :param max_bandwidth_bytes: The max_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501
        :type: int
        """
        if max_bandwidth_bytes is None:
            raise ValueError("Invalid value for `max_bandwidth_bytes`, must not be `None`")  # noqa: E501

        self._max_bandwidth_bytes = max_bandwidth_bytes

    @property
    def requests_per_second(self):
        """Gets the requests_per_second of this OSBucketQosUserRequest.  # noqa: E501


        :return: The requests_per_second of this OSBucketQosUserRequest.  # noqa: E501
        :rtype: int
        """
        return self._requests_per_second

    @requests_per_second.setter
    def requests_per_second(self, requests_per_second):
        """Sets the requests_per_second of this OSBucketQosUserRequest.


        :param requests_per_second: The requests_per_second of this OSBucketQosUserRequest.  # noqa: E501
        :type: int
        """
        if requests_per_second is None:
            raise ValueError("Invalid value for `requests_per_second`, must not be `None`")  # noqa: E501

        self._requests_per_second = requests_per_second

    @property
    def sudden_bandwidth_bytes(self):
        """Gets the sudden_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501


        :return: The sudden_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501
        :rtype: int
        """
        return self._sudden_bandwidth_bytes

    @sudden_bandwidth_bytes.setter
    def sudden_bandwidth_bytes(self, sudden_bandwidth_bytes):
        """Sets the sudden_bandwidth_bytes of this OSBucketQosUserRequest.


        :param sudden_bandwidth_bytes: The sudden_bandwidth_bytes of this OSBucketQosUserRequest.  # noqa: E501
        :type: int
        """

        self._sudden_bandwidth_bytes = sudden_bandwidth_bytes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OSBucketQosUserRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
