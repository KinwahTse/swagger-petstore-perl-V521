# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.ssl_certificate_nestview import SSLCertificateNestview  # noqa: F401,E501


class DfsGatewayGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'bucket_num': 'int',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'description': 'str',
        'encoding': 'str',
        'gateway_num': 'int',
        'hdfs_num': 'int',
        'id': 'int',
        'name': 'str',
        'nfs_versions': 'list[str]',
        'port': 'int',
        'rootfs_num': 'int',
        's3_port': 'int',
        's3_scheme': 'str',
        's3_user_num': 'int',
        'securities': 'list[str]',
        'share_nums': 'dict(str, int)',
        'shared': 'bool',
        'smb1_enabled': 'bool',
        'smb_ports': 'list[int]',
        'ssl_certificate': 'SSLCertificateNestview',
        'status': 'str',
        'types': 'list[str]',
        'update': 'datetime',
        'zone_num': 'int'
    }

    attribute_map = {
        'action_status': 'action_status',
        'bucket_num': 'bucket_num',
        'cluster': 'cluster',
        'create': 'create',
        'description': 'description',
        'encoding': 'encoding',
        'gateway_num': 'gateway_num',
        'hdfs_num': 'hdfs_num',
        'id': 'id',
        'name': 'name',
        'nfs_versions': 'nfs_versions',
        'port': 'port',
        'rootfs_num': 'rootfs_num',
        's3_port': 's3_port',
        's3_scheme': 's3_scheme',
        's3_user_num': 's3_user_num',
        'securities': 'securities',
        'share_nums': 'share_nums',
        'shared': 'shared',
        'smb1_enabled': 'smb1_enabled',
        'smb_ports': 'smb_ports',
        'ssl_certificate': 'ssl_certificate',
        'status': 'status',
        'types': 'types',
        'update': 'update',
        'zone_num': 'zone_num'
    }

    def __init__(self, action_status=None, bucket_num=None, cluster=None, create=None, description=None, encoding=None, gateway_num=None, hdfs_num=None, id=None, name=None, nfs_versions=None, port=None, rootfs_num=None, s3_port=None, s3_scheme=None, s3_user_num=None, securities=None, share_nums=None, shared=None, smb1_enabled=None, smb_ports=None, ssl_certificate=None, status=None, types=None, update=None, zone_num=None):  # noqa: E501
        """DfsGatewayGroup - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._bucket_num = None
        self._cluster = None
        self._create = None
        self._description = None
        self._encoding = None
        self._gateway_num = None
        self._hdfs_num = None
        self._id = None
        self._name = None
        self._nfs_versions = None
        self._port = None
        self._rootfs_num = None
        self._s3_port = None
        self._s3_scheme = None
        self._s3_user_num = None
        self._securities = None
        self._share_nums = None
        self._shared = None
        self._smb1_enabled = None
        self._smb_ports = None
        self._ssl_certificate = None
        self._status = None
        self._types = None
        self._update = None
        self._zone_num = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if bucket_num is not None:
            self.bucket_num = bucket_num
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if encoding is not None:
            self.encoding = encoding
        if gateway_num is not None:
            self.gateway_num = gateway_num
        if hdfs_num is not None:
            self.hdfs_num = hdfs_num
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if nfs_versions is not None:
            self.nfs_versions = nfs_versions
        if port is not None:
            self.port = port
        if rootfs_num is not None:
            self.rootfs_num = rootfs_num
        if s3_port is not None:
            self.s3_port = s3_port
        if s3_scheme is not None:
            self.s3_scheme = s3_scheme
        if s3_user_num is not None:
            self.s3_user_num = s3_user_num
        if securities is not None:
            self.securities = securities
        if share_nums is not None:
            self.share_nums = share_nums
        if shared is not None:
            self.shared = shared
        if smb1_enabled is not None:
            self.smb1_enabled = smb1_enabled
        if smb_ports is not None:
            self.smb_ports = smb_ports
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if status is not None:
            self.status = status
        if types is not None:
            self.types = types
        if update is not None:
            self.update = update
        if zone_num is not None:
            self.zone_num = zone_num

    @property
    def action_status(self):
        """Gets the action_status of this DfsGatewayGroup.  # noqa: E501


        :return: The action_status of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsGatewayGroup.


        :param action_status: The action_status of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def bucket_num(self):
        """Gets the bucket_num of this DfsGatewayGroup.  # noqa: E501


        :return: The bucket_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._bucket_num

    @bucket_num.setter
    def bucket_num(self, bucket_num):
        """Sets the bucket_num of this DfsGatewayGroup.


        :param bucket_num: The bucket_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._bucket_num = bucket_num

    @property
    def cluster(self):
        """Gets the cluster of this DfsGatewayGroup.  # noqa: E501


        :return: The cluster of this DfsGatewayGroup.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsGatewayGroup.


        :param cluster: The cluster of this DfsGatewayGroup.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsGatewayGroup.  # noqa: E501


        :return: The create of this DfsGatewayGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsGatewayGroup.


        :param create: The create of this DfsGatewayGroup.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this DfsGatewayGroup.  # noqa: E501


        :return: The description of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DfsGatewayGroup.


        :param description: The description of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def encoding(self):
        """Gets the encoding of this DfsGatewayGroup.  # noqa: E501


        :return: The encoding of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this DfsGatewayGroup.


        :param encoding: The encoding of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._encoding = encoding

    @property
    def gateway_num(self):
        """Gets the gateway_num of this DfsGatewayGroup.  # noqa: E501


        :return: The gateway_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._gateway_num

    @gateway_num.setter
    def gateway_num(self, gateway_num):
        """Sets the gateway_num of this DfsGatewayGroup.


        :param gateway_num: The gateway_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._gateway_num = gateway_num

    @property
    def hdfs_num(self):
        """Gets the hdfs_num of this DfsGatewayGroup.  # noqa: E501


        :return: The hdfs_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._hdfs_num

    @hdfs_num.setter
    def hdfs_num(self, hdfs_num):
        """Sets the hdfs_num of this DfsGatewayGroup.


        :param hdfs_num: The hdfs_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._hdfs_num = hdfs_num

    @property
    def id(self):
        """Gets the id of this DfsGatewayGroup.  # noqa: E501


        :return: The id of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsGatewayGroup.


        :param id: The id of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DfsGatewayGroup.  # noqa: E501


        :return: The name of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsGatewayGroup.


        :param name: The name of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nfs_versions(self):
        """Gets the nfs_versions of this DfsGatewayGroup.  # noqa: E501

        NFS attributes  # noqa: E501

        :return: The nfs_versions of this DfsGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._nfs_versions

    @nfs_versions.setter
    def nfs_versions(self, nfs_versions):
        """Sets the nfs_versions of this DfsGatewayGroup.

        NFS attributes  # noqa: E501

        :param nfs_versions: The nfs_versions of this DfsGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._nfs_versions = nfs_versions

    @property
    def port(self):
        """Gets the port of this DfsGatewayGroup.  # noqa: E501

        FTP attributes  # noqa: E501

        :return: The port of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DfsGatewayGroup.

        FTP attributes  # noqa: E501

        :param port: The port of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._port = port

    @property
    def rootfs_num(self):
        """Gets the rootfs_num of this DfsGatewayGroup.  # noqa: E501


        :return: The rootfs_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._rootfs_num

    @rootfs_num.setter
    def rootfs_num(self, rootfs_num):
        """Sets the rootfs_num of this DfsGatewayGroup.


        :param rootfs_num: The rootfs_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._rootfs_num = rootfs_num

    @property
    def s3_port(self):
        """Gets the s3_port of this DfsGatewayGroup.  # noqa: E501


        :return: The s3_port of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._s3_port

    @s3_port.setter
    def s3_port(self, s3_port):
        """Sets the s3_port of this DfsGatewayGroup.


        :param s3_port: The s3_port of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._s3_port = s3_port

    @property
    def s3_scheme(self):
        """Gets the s3_scheme of this DfsGatewayGroup.  # noqa: E501


        :return: The s3_scheme of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._s3_scheme

    @s3_scheme.setter
    def s3_scheme(self, s3_scheme):
        """Sets the s3_scheme of this DfsGatewayGroup.


        :param s3_scheme: The s3_scheme of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._s3_scheme = s3_scheme

    @property
    def s3_user_num(self):
        """Gets the s3_user_num of this DfsGatewayGroup.  # noqa: E501


        :return: The s3_user_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._s3_user_num

    @s3_user_num.setter
    def s3_user_num(self, s3_user_num):
        """Sets the s3_user_num of this DfsGatewayGroup.


        :param s3_user_num: The s3_user_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._s3_user_num = s3_user_num

    @property
    def securities(self):
        """Gets the securities of this DfsGatewayGroup.  # noqa: E501

        SMB attributes  # noqa: E501

        :return: The securities of this DfsGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._securities

    @securities.setter
    def securities(self, securities):
        """Sets the securities of this DfsGatewayGroup.

        SMB attributes  # noqa: E501

        :param securities: The securities of this DfsGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._securities = securities

    @property
    def share_nums(self):
        """Gets the share_nums of this DfsGatewayGroup.  # noqa: E501


        :return: The share_nums of this DfsGatewayGroup.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._share_nums

    @share_nums.setter
    def share_nums(self, share_nums):
        """Sets the share_nums of this DfsGatewayGroup.


        :param share_nums: The share_nums of this DfsGatewayGroup.  # noqa: E501
        :type: dict(str, int)
        """

        self._share_nums = share_nums

    @property
    def shared(self):
        """Gets the shared of this DfsGatewayGroup.  # noqa: E501


        :return: The shared of this DfsGatewayGroup.  # noqa: E501
        :rtype: bool
        """
        return self._shared

    @shared.setter
    def shared(self, shared):
        """Sets the shared of this DfsGatewayGroup.


        :param shared: The shared of this DfsGatewayGroup.  # noqa: E501
        :type: bool
        """

        self._shared = shared

    @property
    def smb1_enabled(self):
        """Gets the smb1_enabled of this DfsGatewayGroup.  # noqa: E501


        :return: The smb1_enabled of this DfsGatewayGroup.  # noqa: E501
        :rtype: bool
        """
        return self._smb1_enabled

    @smb1_enabled.setter
    def smb1_enabled(self, smb1_enabled):
        """Sets the smb1_enabled of this DfsGatewayGroup.


        :param smb1_enabled: The smb1_enabled of this DfsGatewayGroup.  # noqa: E501
        :type: bool
        """

        self._smb1_enabled = smb1_enabled

    @property
    def smb_ports(self):
        """Gets the smb_ports of this DfsGatewayGroup.  # noqa: E501


        :return: The smb_ports of this DfsGatewayGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._smb_ports

    @smb_ports.setter
    def smb_ports(self, smb_ports):
        """Sets the smb_ports of this DfsGatewayGroup.


        :param smb_ports: The smb_ports of this DfsGatewayGroup.  # noqa: E501
        :type: list[int]
        """

        self._smb_ports = smb_ports

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this DfsGatewayGroup.  # noqa: E501


        :return: The ssl_certificate of this DfsGatewayGroup.  # noqa: E501
        :rtype: SSLCertificateNestview
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this DfsGatewayGroup.


        :param ssl_certificate: The ssl_certificate of this DfsGatewayGroup.  # noqa: E501
        :type: SSLCertificateNestview
        """

        self._ssl_certificate = ssl_certificate

    @property
    def status(self):
        """Gets the status of this DfsGatewayGroup.  # noqa: E501


        :return: The status of this DfsGatewayGroup.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsGatewayGroup.


        :param status: The status of this DfsGatewayGroup.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def types(self):
        """Gets the types of this DfsGatewayGroup.  # noqa: E501


        :return: The types of this DfsGatewayGroup.  # noqa: E501
        :rtype: list[str]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this DfsGatewayGroup.


        :param types: The types of this DfsGatewayGroup.  # noqa: E501
        :type: list[str]
        """

        self._types = types

    @property
    def update(self):
        """Gets the update of this DfsGatewayGroup.  # noqa: E501


        :return: The update of this DfsGatewayGroup.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsGatewayGroup.


        :param update: The update of this DfsGatewayGroup.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def zone_num(self):
        """Gets the zone_num of this DfsGatewayGroup.  # noqa: E501


        :return: The zone_num of this DfsGatewayGroup.  # noqa: E501
        :rtype: int
        """
        return self._zone_num

    @zone_num.setter
    def zone_num(self, zone_num):
        """Sets the zone_num of this DfsGatewayGroup.


        :param zone_num: The zone_num of this DfsGatewayGroup.  # noqa: E501
        :type: int
        """

        self._zone_num = zone_num

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsGatewayGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
