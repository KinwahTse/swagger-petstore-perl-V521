# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway import DfsGateway  # noqa: F401,E501
# from xms_client.models.dfs_gateway_group_nestview import DfsGatewayGroupNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_stat import DfsGatewayStat  # noqa: F401,E501
# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from xms_client.models.ssl_certificate_nestview import SSLCertificateNestview  # noqa: F401,E501


class DfsGatewayRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterNestview',
        'conn_num': 'int',
        'create': 'datetime',
        'ctdb_service_status': 'str',
        'dfs_gateway_group': 'DfsGatewayGroupNestview',
        'host': 'HostNestview',
        'id': 'int',
        's3_port': 'int',
        's3_scheme': 'str',
        'ssl_certificate': 'SSLCertificateNestview',
        'status': 'str',
        'update': 'datetime',
        'samples': 'list[DfsGatewayStat]'
    }

    attribute_map = {
        'cluster': 'cluster',
        'conn_num': 'conn_num',
        'create': 'create',
        'ctdb_service_status': 'ctdb_service_status',
        'dfs_gateway_group': 'dfs_gateway_group',
        'host': 'host',
        'id': 'id',
        's3_port': 's3_port',
        's3_scheme': 's3_scheme',
        'ssl_certificate': 'ssl_certificate',
        'status': 'status',
        'update': 'update',
        'samples': 'samples'
    }

    def __init__(self, cluster=None, conn_num=None, create=None, ctdb_service_status=None, dfs_gateway_group=None, host=None, id=None, s3_port=None, s3_scheme=None, ssl_certificate=None, status=None, update=None, samples=None):  # noqa: E501
        """DfsGatewayRecord - a model defined in Swagger"""  # noqa: E501

        self._cluster = None
        self._conn_num = None
        self._create = None
        self._ctdb_service_status = None
        self._dfs_gateway_group = None
        self._host = None
        self._id = None
        self._s3_port = None
        self._s3_scheme = None
        self._ssl_certificate = None
        self._status = None
        self._update = None
        self._samples = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if conn_num is not None:
            self.conn_num = conn_num
        if create is not None:
            self.create = create
        if ctdb_service_status is not None:
            self.ctdb_service_status = ctdb_service_status
        if dfs_gateway_group is not None:
            self.dfs_gateway_group = dfs_gateway_group
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if s3_port is not None:
            self.s3_port = s3_port
        if s3_scheme is not None:
            self.s3_scheme = s3_scheme
        if ssl_certificate is not None:
            self.ssl_certificate = ssl_certificate
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update
        if samples is not None:
            self.samples = samples

    @property
    def cluster(self):
        """Gets the cluster of this DfsGatewayRecord.  # noqa: E501


        :return: The cluster of this DfsGatewayRecord.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsGatewayRecord.


        :param cluster: The cluster of this DfsGatewayRecord.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def conn_num(self):
        """Gets the conn_num of this DfsGatewayRecord.  # noqa: E501


        :return: The conn_num of this DfsGatewayRecord.  # noqa: E501
        :rtype: int
        """
        return self._conn_num

    @conn_num.setter
    def conn_num(self, conn_num):
        """Sets the conn_num of this DfsGatewayRecord.


        :param conn_num: The conn_num of this DfsGatewayRecord.  # noqa: E501
        :type: int
        """

        self._conn_num = conn_num

    @property
    def create(self):
        """Gets the create of this DfsGatewayRecord.  # noqa: E501


        :return: The create of this DfsGatewayRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsGatewayRecord.


        :param create: The create of this DfsGatewayRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def ctdb_service_status(self):
        """Gets the ctdb_service_status of this DfsGatewayRecord.  # noqa: E501


        :return: The ctdb_service_status of this DfsGatewayRecord.  # noqa: E501
        :rtype: str
        """
        return self._ctdb_service_status

    @ctdb_service_status.setter
    def ctdb_service_status(self, ctdb_service_status):
        """Sets the ctdb_service_status of this DfsGatewayRecord.


        :param ctdb_service_status: The ctdb_service_status of this DfsGatewayRecord.  # noqa: E501
        :type: str
        """

        self._ctdb_service_status = ctdb_service_status

    @property
    def dfs_gateway_group(self):
        """Gets the dfs_gateway_group of this DfsGatewayRecord.  # noqa: E501


        :return: The dfs_gateway_group of this DfsGatewayRecord.  # noqa: E501
        :rtype: DfsGatewayGroupNestview
        """
        return self._dfs_gateway_group

    @dfs_gateway_group.setter
    def dfs_gateway_group(self, dfs_gateway_group):
        """Sets the dfs_gateway_group of this DfsGatewayRecord.


        :param dfs_gateway_group: The dfs_gateway_group of this DfsGatewayRecord.  # noqa: E501
        :type: DfsGatewayGroupNestview
        """

        self._dfs_gateway_group = dfs_gateway_group

    @property
    def host(self):
        """Gets the host of this DfsGatewayRecord.  # noqa: E501


        :return: The host of this DfsGatewayRecord.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DfsGatewayRecord.


        :param host: The host of this DfsGatewayRecord.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this DfsGatewayRecord.  # noqa: E501


        :return: The id of this DfsGatewayRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsGatewayRecord.


        :param id: The id of this DfsGatewayRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def s3_port(self):
        """Gets the s3_port of this DfsGatewayRecord.  # noqa: E501


        :return: The s3_port of this DfsGatewayRecord.  # noqa: E501
        :rtype: int
        """
        return self._s3_port

    @s3_port.setter
    def s3_port(self, s3_port):
        """Sets the s3_port of this DfsGatewayRecord.


        :param s3_port: The s3_port of this DfsGatewayRecord.  # noqa: E501
        :type: int
        """

        self._s3_port = s3_port

    @property
    def s3_scheme(self):
        """Gets the s3_scheme of this DfsGatewayRecord.  # noqa: E501


        :return: The s3_scheme of this DfsGatewayRecord.  # noqa: E501
        :rtype: str
        """
        return self._s3_scheme

    @s3_scheme.setter
    def s3_scheme(self, s3_scheme):
        """Sets the s3_scheme of this DfsGatewayRecord.


        :param s3_scheme: The s3_scheme of this DfsGatewayRecord.  # noqa: E501
        :type: str
        """

        self._s3_scheme = s3_scheme

    @property
    def ssl_certificate(self):
        """Gets the ssl_certificate of this DfsGatewayRecord.  # noqa: E501


        :return: The ssl_certificate of this DfsGatewayRecord.  # noqa: E501
        :rtype: SSLCertificateNestview
        """
        return self._ssl_certificate

    @ssl_certificate.setter
    def ssl_certificate(self, ssl_certificate):
        """Sets the ssl_certificate of this DfsGatewayRecord.


        :param ssl_certificate: The ssl_certificate of this DfsGatewayRecord.  # noqa: E501
        :type: SSLCertificateNestview
        """

        self._ssl_certificate = ssl_certificate

    @property
    def status(self):
        """Gets the status of this DfsGatewayRecord.  # noqa: E501


        :return: The status of this DfsGatewayRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsGatewayRecord.


        :param status: The status of this DfsGatewayRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DfsGatewayRecord.  # noqa: E501


        :return: The update of this DfsGatewayRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsGatewayRecord.


        :param update: The update of this DfsGatewayRecord.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def samples(self):
        """Gets the samples of this DfsGatewayRecord.  # noqa: E501


        :return: The samples of this DfsGatewayRecord.  # noqa: E501
        :rtype: list[DfsGatewayStat]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this DfsGatewayRecord.


        :param samples: The samples of this DfsGatewayRecord.  # noqa: E501
        :type: list[DfsGatewayStat]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsGatewayRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
