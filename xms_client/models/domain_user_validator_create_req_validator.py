# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DomainUserValidatorCreateReqValidator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gateway_group_id': 'int',
        'gateway_group_type': 'str',
        'groups': 'list[str]',
        'type': 'str',
        'users': 'list[str]'
    }

    attribute_map = {
        'gateway_group_id': 'gateway_group_id',
        'gateway_group_type': 'gateway_group_type',
        'groups': 'groups',
        'type': 'type',
        'users': 'users'
    }

    def __init__(self, gateway_group_id=None, gateway_group_type=None, groups=None, type=None, users=None):  # noqa: E501
        """DomainUserValidatorCreateReqValidator - a model defined in Swagger"""  # noqa: E501

        self._gateway_group_id = None
        self._gateway_group_type = None
        self._groups = None
        self._type = None
        self._users = None
        self.discriminator = None

        if gateway_group_id is not None:
            self.gateway_group_id = gateway_group_id
        if gateway_group_type is not None:
            self.gateway_group_type = gateway_group_type
        if groups is not None:
            self.groups = groups
        self.type = type
        if users is not None:
            self.users = users

    @property
    def gateway_group_id(self):
        """Gets the gateway_group_id of this DomainUserValidatorCreateReqValidator.  # noqa: E501

        Gateway Group ID  # noqa: E501

        :return: The gateway_group_id of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :rtype: int
        """
        return self._gateway_group_id

    @gateway_group_id.setter
    def gateway_group_id(self, gateway_group_id):
        """Sets the gateway_group_id of this DomainUserValidatorCreateReqValidator.

        Gateway Group ID  # noqa: E501

        :param gateway_group_id: The gateway_group_id of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :type: int
        """

        self._gateway_group_id = gateway_group_id

    @property
    def gateway_group_type(self):
        """Gets the gateway_group_type of this DomainUserValidatorCreateReqValidator.  # noqa: E501

        Gateway Group type  # noqa: E501

        :return: The gateway_group_type of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._gateway_group_type

    @gateway_group_type.setter
    def gateway_group_type(self, gateway_group_type):
        """Sets the gateway_group_type of this DomainUserValidatorCreateReqValidator.

        Gateway Group type  # noqa: E501

        :param gateway_group_type: The gateway_group_type of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """

        self._gateway_group_type = gateway_group_type

    @property
    def groups(self):
        """Gets the groups of this DomainUserValidatorCreateReqValidator.  # noqa: E501

        Domain groups  # noqa: E501

        :return: The groups of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this DomainUserValidatorCreateReqValidator.

        Domain groups  # noqa: E501

        :param groups: The groups of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def type(self):
        """Gets the type of this DomainUserValidatorCreateReqValidator.  # noqa: E501

        Domain type  # noqa: E501

        :return: The type of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DomainUserValidatorCreateReqValidator.

        Domain type  # noqa: E501

        :param type: The type of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def users(self):
        """Gets the users of this DomainUserValidatorCreateReqValidator.  # noqa: E501

        Domain users  # noqa: E501

        :return: The users of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :rtype: list[str]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this DomainUserValidatorCreateReqValidator.

        Domain users  # noqa: E501

        :param users: The users of this DomainUserValidatorCreateReqValidator.  # noqa: E501
        :type: list[str]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DomainUserValidatorCreateReqValidator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
