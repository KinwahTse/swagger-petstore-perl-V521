# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_path_nestview import DfsPathNestview  # noqa: F401,E501
# from xms_client.models.dfs_rootfs_nestview import DfsRootfsNestview  # noqa: F401,E501


class DfsWorm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_lock_period': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'default_protect_period': 'str',
        'id': 'int',
        'max_protect_period': 'str',
        'min_protect_period': 'str',
        'path': 'DfsPathNestview',
        'rootfs': 'DfsRootfsNestview',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'auto_lock_period': 'auto_lock_period',
        'cluster': 'cluster',
        'create': 'create',
        'default_protect_period': 'default_protect_period',
        'id': 'id',
        'max_protect_period': 'max_protect_period',
        'min_protect_period': 'min_protect_period',
        'path': 'path',
        'rootfs': 'rootfs',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, auto_lock_period=None, cluster=None, create=None, default_protect_period=None, id=None, max_protect_period=None, min_protect_period=None, path=None, rootfs=None, status=None, update=None):  # noqa: E501
        """DfsWorm - a model defined in Swagger"""  # noqa: E501

        self._auto_lock_period = None
        self._cluster = None
        self._create = None
        self._default_protect_period = None
        self._id = None
        self._max_protect_period = None
        self._min_protect_period = None
        self._path = None
        self._rootfs = None
        self._status = None
        self._update = None
        self.discriminator = None

        if auto_lock_period is not None:
            self.auto_lock_period = auto_lock_period
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if default_protect_period is not None:
            self.default_protect_period = default_protect_period
        if id is not None:
            self.id = id
        if max_protect_period is not None:
            self.max_protect_period = max_protect_period
        if min_protect_period is not None:
            self.min_protect_period = min_protect_period
        if path is not None:
            self.path = path
        if rootfs is not None:
            self.rootfs = rootfs
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def auto_lock_period(self):
        """Gets the auto_lock_period of this DfsWorm.  # noqa: E501


        :return: The auto_lock_period of this DfsWorm.  # noqa: E501
        :rtype: str
        """
        return self._auto_lock_period

    @auto_lock_period.setter
    def auto_lock_period(self, auto_lock_period):
        """Sets the auto_lock_period of this DfsWorm.


        :param auto_lock_period: The auto_lock_period of this DfsWorm.  # noqa: E501
        :type: str
        """

        self._auto_lock_period = auto_lock_period

    @property
    def cluster(self):
        """Gets the cluster of this DfsWorm.  # noqa: E501


        :return: The cluster of this DfsWorm.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsWorm.


        :param cluster: The cluster of this DfsWorm.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsWorm.  # noqa: E501


        :return: The create of this DfsWorm.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsWorm.


        :param create: The create of this DfsWorm.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def default_protect_period(self):
        """Gets the default_protect_period of this DfsWorm.  # noqa: E501


        :return: The default_protect_period of this DfsWorm.  # noqa: E501
        :rtype: str
        """
        return self._default_protect_period

    @default_protect_period.setter
    def default_protect_period(self, default_protect_period):
        """Sets the default_protect_period of this DfsWorm.


        :param default_protect_period: The default_protect_period of this DfsWorm.  # noqa: E501
        :type: str
        """

        self._default_protect_period = default_protect_period

    @property
    def id(self):
        """Gets the id of this DfsWorm.  # noqa: E501


        :return: The id of this DfsWorm.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsWorm.


        :param id: The id of this DfsWorm.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def max_protect_period(self):
        """Gets the max_protect_period of this DfsWorm.  # noqa: E501


        :return: The max_protect_period of this DfsWorm.  # noqa: E501
        :rtype: str
        """
        return self._max_protect_period

    @max_protect_period.setter
    def max_protect_period(self, max_protect_period):
        """Sets the max_protect_period of this DfsWorm.


        :param max_protect_period: The max_protect_period of this DfsWorm.  # noqa: E501
        :type: str
        """

        self._max_protect_period = max_protect_period

    @property
    def min_protect_period(self):
        """Gets the min_protect_period of this DfsWorm.  # noqa: E501


        :return: The min_protect_period of this DfsWorm.  # noqa: E501
        :rtype: str
        """
        return self._min_protect_period

    @min_protect_period.setter
    def min_protect_period(self, min_protect_period):
        """Sets the min_protect_period of this DfsWorm.


        :param min_protect_period: The min_protect_period of this DfsWorm.  # noqa: E501
        :type: str
        """

        self._min_protect_period = min_protect_period

    @property
    def path(self):
        """Gets the path of this DfsWorm.  # noqa: E501


        :return: The path of this DfsWorm.  # noqa: E501
        :rtype: DfsPathNestview
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsWorm.


        :param path: The path of this DfsWorm.  # noqa: E501
        :type: DfsPathNestview
        """

        self._path = path

    @property
    def rootfs(self):
        """Gets the rootfs of this DfsWorm.  # noqa: E501


        :return: The rootfs of this DfsWorm.  # noqa: E501
        :rtype: DfsRootfsNestview
        """
        return self._rootfs

    @rootfs.setter
    def rootfs(self, rootfs):
        """Sets the rootfs of this DfsWorm.


        :param rootfs: The rootfs of this DfsWorm.  # noqa: E501
        :type: DfsRootfsNestview
        """

        self._rootfs = rootfs

    @property
    def status(self):
        """Gets the status of this DfsWorm.  # noqa: E501


        :return: The status of this DfsWorm.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsWorm.


        :param status: The status of this DfsWorm.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DfsWorm.  # noqa: E501


        :return: The update of this DfsWorm.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsWorm.


        :param update: The update of this DfsWorm.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsWorm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
