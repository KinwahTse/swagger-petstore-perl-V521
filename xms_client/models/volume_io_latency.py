# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class VolumeIOLatency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_0_4k_us': 'float',
        '_32_64k_us': 'float',
        '_4_8k_us': 'float',
        '_64_512k_us': 'float',
        '_8_32k_us': 'float',
        'above_512k_us': 'float'
    }

    attribute_map = {
        '_0_4k_us': '0_4k_us',
        '_32_64k_us': '32_64k_us',
        '_4_8k_us': '4_8k_us',
        '_64_512k_us': '64_512k_us',
        '_8_32k_us': '8_32k_us',
        'above_512k_us': 'above_512k_us'
    }

    def __init__(self, _0_4k_us=None, _32_64k_us=None, _4_8k_us=None, _64_512k_us=None, _8_32k_us=None, above_512k_us=None):  # noqa: E501
        """VolumeIOLatency - a model defined in Swagger"""  # noqa: E501

        self.__0_4k_us = None
        self.__32_64k_us = None
        self.__4_8k_us = None
        self.__64_512k_us = None
        self.__8_32k_us = None
        self._above_512k_us = None
        self.discriminator = None

        if _0_4k_us is not None:
            self._0_4k_us = _0_4k_us
        if _32_64k_us is not None:
            self._32_64k_us = _32_64k_us
        if _4_8k_us is not None:
            self._4_8k_us = _4_8k_us
        if _64_512k_us is not None:
            self._64_512k_us = _64_512k_us
        if _8_32k_us is not None:
            self._8_32k_us = _8_32k_us
        if above_512k_us is not None:
            self.above_512k_us = above_512k_us

    @property
    def _0_4k_us(self):
        """Gets the _0_4k_us of this VolumeIOLatency.  # noqa: E501


        :return: The _0_4k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self.__0_4k_us

    @_0_4k_us.setter
    def _0_4k_us(self, _0_4k_us):
        """Sets the _0_4k_us of this VolumeIOLatency.


        :param _0_4k_us: The _0_4k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self.__0_4k_us = _0_4k_us

    @property
    def _32_64k_us(self):
        """Gets the _32_64k_us of this VolumeIOLatency.  # noqa: E501


        :return: The _32_64k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self.__32_64k_us

    @_32_64k_us.setter
    def _32_64k_us(self, _32_64k_us):
        """Sets the _32_64k_us of this VolumeIOLatency.


        :param _32_64k_us: The _32_64k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self.__32_64k_us = _32_64k_us

    @property
    def _4_8k_us(self):
        """Gets the _4_8k_us of this VolumeIOLatency.  # noqa: E501


        :return: The _4_8k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self.__4_8k_us

    @_4_8k_us.setter
    def _4_8k_us(self, _4_8k_us):
        """Sets the _4_8k_us of this VolumeIOLatency.


        :param _4_8k_us: The _4_8k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self.__4_8k_us = _4_8k_us

    @property
    def _64_512k_us(self):
        """Gets the _64_512k_us of this VolumeIOLatency.  # noqa: E501


        :return: The _64_512k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self.__64_512k_us

    @_64_512k_us.setter
    def _64_512k_us(self, _64_512k_us):
        """Sets the _64_512k_us of this VolumeIOLatency.


        :param _64_512k_us: The _64_512k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self.__64_512k_us = _64_512k_us

    @property
    def _8_32k_us(self):
        """Gets the _8_32k_us of this VolumeIOLatency.  # noqa: E501


        :return: The _8_32k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self.__8_32k_us

    @_8_32k_us.setter
    def _8_32k_us(self, _8_32k_us):
        """Sets the _8_32k_us of this VolumeIOLatency.


        :param _8_32k_us: The _8_32k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self.__8_32k_us = _8_32k_us

    @property
    def above_512k_us(self):
        """Gets the above_512k_us of this VolumeIOLatency.  # noqa: E501


        :return: The above_512k_us of this VolumeIOLatency.  # noqa: E501
        :rtype: float
        """
        return self._above_512k_us

    @above_512k_us.setter
    def above_512k_us(self, above_512k_us):
        """Sets the above_512k_us of this VolumeIOLatency.


        :param above_512k_us: The above_512k_us of this VolumeIOLatency.  # noqa: E501
        :type: float
        """

        self._above_512k_us = above_512k_us

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VolumeIOLatency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
