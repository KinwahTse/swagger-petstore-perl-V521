# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.gc_policy import GCPolicy  # noqa: F401,E501
# from xms_client.models.osd_group_nestview import OsdGroupNestview  # noqa: F401,E501
# from xms_client.models.osd_qos import OsdQos  # noqa: F401,E501
# from xms_client.models.placement_node_nestview import PlacementNodeNestview  # noqa: F401,E501
# from xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501
# from xms_client.models.protection_domain_nestview import ProtectionDomainNestview  # noqa: F401,E501


class Pool(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'allocated_size': 'int',
        'bind_osd_num': 'int',
        'block_volume_num': 'int',
        'cache_pool': 'PoolNestview',
        'cluster': 'ClusterNestview',
        'coding_chunk_num': 'int',
        'compress_algorithm': 'str',
        'compressed': 'bool',
        'create': 'datetime',
        'data_chunk_num': 'int',
        'data_pool': 'PoolNestview',
        'default_managed_volume_format': 'int',
        'device_type': 'str',
        'device_type_check_disabled': 'bool',
        'failure_domain_type': 'str',
        'gc_policy': 'GCPolicy',
        'hidden': 'bool',
        'id': 'int',
        'inner_pool_id': 'int',
        'io_bypass_enabled': 'bool',
        'io_bypass_mode': 'str',
        'io_bypass_threshold': 'int',
        'min_alloc_size': 'int',
        'min_osd_num': 'int',
        'name': 'str',
        'numa_apply_policy': 'str',
        'numa_bind_balanced': 'bool',
        'numa_bind_policy': 'str',
        'numa_enabled': 'bool',
        'osd_group': 'OsdGroupNestview',
        'osd_num': 'int',
        'osd_num_per_host': 'int',
        'out_failure_domain_num': 'int',
        'pool_id': 'int',
        'pool_mode': 'str',
        'pool_name': 'str',
        'pool_role': 'str',
        'pool_type': 'str',
        'primary_placement_node': 'PlacementNodeNestview',
        'product_type': 'str',
        '_property': 'object',
        'protection_domain': 'ProtectionDomainNestview',
        'qos': 'OsdQos',
        'replicate_size': 'int',
        'reserved_percent': 'float',
        'size_per_osd': 'int',
        'status': 'str',
        'stretched': 'bool',
        'suggested_omap_size': 'int',
        'thin_provisioned': 'bool',
        'tier_status': 'str',
        'transport_mode': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'action_status': 'action_status',
        'allocated_size': 'allocated_size',
        'bind_osd_num': 'bind_osd_num',
        'block_volume_num': 'block_volume_num',
        'cache_pool': 'cache_pool',
        'cluster': 'cluster',
        'coding_chunk_num': 'coding_chunk_num',
        'compress_algorithm': 'compress_algorithm',
        'compressed': 'compressed',
        'create': 'create',
        'data_chunk_num': 'data_chunk_num',
        'data_pool': 'data_pool',
        'default_managed_volume_format': 'default_managed_volume_format',
        'device_type': 'device_type',
        'device_type_check_disabled': 'device_type_check_disabled',
        'failure_domain_type': 'failure_domain_type',
        'gc_policy': 'gc_policy',
        'hidden': 'hidden',
        'id': 'id',
        'inner_pool_id': 'inner_pool_id',
        'io_bypass_enabled': 'io_bypass_enabled',
        'io_bypass_mode': 'io_bypass_mode',
        'io_bypass_threshold': 'io_bypass_threshold',
        'min_alloc_size': 'min_alloc_size',
        'min_osd_num': 'min_osd_num',
        'name': 'name',
        'numa_apply_policy': 'numa_apply_policy',
        'numa_bind_balanced': 'numa_bind_balanced',
        'numa_bind_policy': 'numa_bind_policy',
        'numa_enabled': 'numa_enabled',
        'osd_group': 'osd_group',
        'osd_num': 'osd_num',
        'osd_num_per_host': 'osd_num_per_host',
        'out_failure_domain_num': 'out_failure_domain_num',
        'pool_id': 'pool_id',
        'pool_mode': 'pool_mode',
        'pool_name': 'pool_name',
        'pool_role': 'pool_role',
        'pool_type': 'pool_type',
        'primary_placement_node': 'primary_placement_node',
        'product_type': 'product_type',
        '_property': 'property',
        'protection_domain': 'protection_domain',
        'qos': 'qos',
        'replicate_size': 'replicate_size',
        'reserved_percent': 'reserved_percent',
        'size_per_osd': 'size_per_osd',
        'status': 'status',
        'stretched': 'stretched',
        'suggested_omap_size': 'suggested_omap_size',
        'thin_provisioned': 'thin_provisioned',
        'tier_status': 'tier_status',
        'transport_mode': 'transport_mode',
        'update': 'update'
    }

    def __init__(self, action_status=None, allocated_size=None, bind_osd_num=None, block_volume_num=None, cache_pool=None, cluster=None, coding_chunk_num=None, compress_algorithm=None, compressed=None, create=None, data_chunk_num=None, data_pool=None, default_managed_volume_format=None, device_type=None, device_type_check_disabled=None, failure_domain_type=None, gc_policy=None, hidden=None, id=None, inner_pool_id=None, io_bypass_enabled=None, io_bypass_mode=None, io_bypass_threshold=None, min_alloc_size=None, min_osd_num=None, name=None, numa_apply_policy=None, numa_bind_balanced=None, numa_bind_policy=None, numa_enabled=None, osd_group=None, osd_num=None, osd_num_per_host=None, out_failure_domain_num=None, pool_id=None, pool_mode=None, pool_name=None, pool_role=None, pool_type=None, primary_placement_node=None, product_type=None, _property=None, protection_domain=None, qos=None, replicate_size=None, reserved_percent=None, size_per_osd=None, status=None, stretched=None, suggested_omap_size=None, thin_provisioned=None, tier_status=None, transport_mode=None, update=None):  # noqa: E501
        """Pool - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._allocated_size = None
        self._bind_osd_num = None
        self._block_volume_num = None
        self._cache_pool = None
        self._cluster = None
        self._coding_chunk_num = None
        self._compress_algorithm = None
        self._compressed = None
        self._create = None
        self._data_chunk_num = None
        self._data_pool = None
        self._default_managed_volume_format = None
        self._device_type = None
        self._device_type_check_disabled = None
        self._failure_domain_type = None
        self._gc_policy = None
        self._hidden = None
        self._id = None
        self._inner_pool_id = None
        self._io_bypass_enabled = None
        self._io_bypass_mode = None
        self._io_bypass_threshold = None
        self._min_alloc_size = None
        self._min_osd_num = None
        self._name = None
        self._numa_apply_policy = None
        self._numa_bind_balanced = None
        self._numa_bind_policy = None
        self._numa_enabled = None
        self._osd_group = None
        self._osd_num = None
        self._osd_num_per_host = None
        self._out_failure_domain_num = None
        self._pool_id = None
        self._pool_mode = None
        self._pool_name = None
        self._pool_role = None
        self._pool_type = None
        self._primary_placement_node = None
        self._product_type = None
        self.__property = None
        self._protection_domain = None
        self._qos = None
        self._replicate_size = None
        self._reserved_percent = None
        self._size_per_osd = None
        self._status = None
        self._stretched = None
        self._suggested_omap_size = None
        self._thin_provisioned = None
        self._tier_status = None
        self._transport_mode = None
        self._update = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if allocated_size is not None:
            self.allocated_size = allocated_size
        if bind_osd_num is not None:
            self.bind_osd_num = bind_osd_num
        if block_volume_num is not None:
            self.block_volume_num = block_volume_num
        if cache_pool is not None:
            self.cache_pool = cache_pool
        if cluster is not None:
            self.cluster = cluster
        if coding_chunk_num is not None:
            self.coding_chunk_num = coding_chunk_num
        if compress_algorithm is not None:
            self.compress_algorithm = compress_algorithm
        if compressed is not None:
            self.compressed = compressed
        if create is not None:
            self.create = create
        if data_chunk_num is not None:
            self.data_chunk_num = data_chunk_num
        if data_pool is not None:
            self.data_pool = data_pool
        if default_managed_volume_format is not None:
            self.default_managed_volume_format = default_managed_volume_format
        if device_type is not None:
            self.device_type = device_type
        if device_type_check_disabled is not None:
            self.device_type_check_disabled = device_type_check_disabled
        if failure_domain_type is not None:
            self.failure_domain_type = failure_domain_type
        if gc_policy is not None:
            self.gc_policy = gc_policy
        if hidden is not None:
            self.hidden = hidden
        if id is not None:
            self.id = id
        if inner_pool_id is not None:
            self.inner_pool_id = inner_pool_id
        if io_bypass_enabled is not None:
            self.io_bypass_enabled = io_bypass_enabled
        if io_bypass_mode is not None:
            self.io_bypass_mode = io_bypass_mode
        if io_bypass_threshold is not None:
            self.io_bypass_threshold = io_bypass_threshold
        if min_alloc_size is not None:
            self.min_alloc_size = min_alloc_size
        if min_osd_num is not None:
            self.min_osd_num = min_osd_num
        if name is not None:
            self.name = name
        if numa_apply_policy is not None:
            self.numa_apply_policy = numa_apply_policy
        if numa_bind_balanced is not None:
            self.numa_bind_balanced = numa_bind_balanced
        if numa_bind_policy is not None:
            self.numa_bind_policy = numa_bind_policy
        if numa_enabled is not None:
            self.numa_enabled = numa_enabled
        if osd_group is not None:
            self.osd_group = osd_group
        if osd_num is not None:
            self.osd_num = osd_num
        if osd_num_per_host is not None:
            self.osd_num_per_host = osd_num_per_host
        if out_failure_domain_num is not None:
            self.out_failure_domain_num = out_failure_domain_num
        if pool_id is not None:
            self.pool_id = pool_id
        if pool_mode is not None:
            self.pool_mode = pool_mode
        if pool_name is not None:
            self.pool_name = pool_name
        if pool_role is not None:
            self.pool_role = pool_role
        if pool_type is not None:
            self.pool_type = pool_type
        if primary_placement_node is not None:
            self.primary_placement_node = primary_placement_node
        if product_type is not None:
            self.product_type = product_type
        if _property is not None:
            self._property = _property
        if protection_domain is not None:
            self.protection_domain = protection_domain
        if qos is not None:
            self.qos = qos
        if replicate_size is not None:
            self.replicate_size = replicate_size
        if reserved_percent is not None:
            self.reserved_percent = reserved_percent
        if size_per_osd is not None:
            self.size_per_osd = size_per_osd
        if status is not None:
            self.status = status
        if stretched is not None:
            self.stretched = stretched
        if suggested_omap_size is not None:
            self.suggested_omap_size = suggested_omap_size
        if thin_provisioned is not None:
            self.thin_provisioned = thin_provisioned
        if tier_status is not None:
            self.tier_status = tier_status
        if transport_mode is not None:
            self.transport_mode = transport_mode
        if update is not None:
            self.update = update

    @property
    def action_status(self):
        """Gets the action_status of this Pool.  # noqa: E501


        :return: The action_status of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this Pool.


        :param action_status: The action_status of this Pool.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def allocated_size(self):
        """Gets the allocated_size of this Pool.  # noqa: E501


        :return: The allocated_size of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._allocated_size

    @allocated_size.setter
    def allocated_size(self, allocated_size):
        """Sets the allocated_size of this Pool.


        :param allocated_size: The allocated_size of this Pool.  # noqa: E501
        :type: int
        """

        self._allocated_size = allocated_size

    @property
    def bind_osd_num(self):
        """Gets the bind_osd_num of this Pool.  # noqa: E501


        :return: The bind_osd_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._bind_osd_num

    @bind_osd_num.setter
    def bind_osd_num(self, bind_osd_num):
        """Sets the bind_osd_num of this Pool.


        :param bind_osd_num: The bind_osd_num of this Pool.  # noqa: E501
        :type: int
        """

        self._bind_osd_num = bind_osd_num

    @property
    def block_volume_num(self):
        """Gets the block_volume_num of this Pool.  # noqa: E501


        :return: The block_volume_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._block_volume_num

    @block_volume_num.setter
    def block_volume_num(self, block_volume_num):
        """Sets the block_volume_num of this Pool.


        :param block_volume_num: The block_volume_num of this Pool.  # noqa: E501
        :type: int
        """

        self._block_volume_num = block_volume_num

    @property
    def cache_pool(self):
        """Gets the cache_pool of this Pool.  # noqa: E501


        :return: The cache_pool of this Pool.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._cache_pool

    @cache_pool.setter
    def cache_pool(self, cache_pool):
        """Sets the cache_pool of this Pool.


        :param cache_pool: The cache_pool of this Pool.  # noqa: E501
        :type: PoolNestview
        """

        self._cache_pool = cache_pool

    @property
    def cluster(self):
        """Gets the cluster of this Pool.  # noqa: E501


        :return: The cluster of this Pool.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this Pool.


        :param cluster: The cluster of this Pool.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def coding_chunk_num(self):
        """Gets the coding_chunk_num of this Pool.  # noqa: E501


        :return: The coding_chunk_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._coding_chunk_num

    @coding_chunk_num.setter
    def coding_chunk_num(self, coding_chunk_num):
        """Sets the coding_chunk_num of this Pool.


        :param coding_chunk_num: The coding_chunk_num of this Pool.  # noqa: E501
        :type: int
        """

        self._coding_chunk_num = coding_chunk_num

    @property
    def compress_algorithm(self):
        """Gets the compress_algorithm of this Pool.  # noqa: E501


        :return: The compress_algorithm of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._compress_algorithm

    @compress_algorithm.setter
    def compress_algorithm(self, compress_algorithm):
        """Sets the compress_algorithm of this Pool.


        :param compress_algorithm: The compress_algorithm of this Pool.  # noqa: E501
        :type: str
        """

        self._compress_algorithm = compress_algorithm

    @property
    def compressed(self):
        """Gets the compressed of this Pool.  # noqa: E501


        :return: The compressed of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._compressed

    @compressed.setter
    def compressed(self, compressed):
        """Sets the compressed of this Pool.


        :param compressed: The compressed of this Pool.  # noqa: E501
        :type: bool
        """

        self._compressed = compressed

    @property
    def create(self):
        """Gets the create of this Pool.  # noqa: E501


        :return: The create of this Pool.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this Pool.


        :param create: The create of this Pool.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def data_chunk_num(self):
        """Gets the data_chunk_num of this Pool.  # noqa: E501


        :return: The data_chunk_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._data_chunk_num

    @data_chunk_num.setter
    def data_chunk_num(self, data_chunk_num):
        """Sets the data_chunk_num of this Pool.


        :param data_chunk_num: The data_chunk_num of this Pool.  # noqa: E501
        :type: int
        """

        self._data_chunk_num = data_chunk_num

    @property
    def data_pool(self):
        """Gets the data_pool of this Pool.  # noqa: E501


        :return: The data_pool of this Pool.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._data_pool

    @data_pool.setter
    def data_pool(self, data_pool):
        """Sets the data_pool of this Pool.


        :param data_pool: The data_pool of this Pool.  # noqa: E501
        :type: PoolNestview
        """

        self._data_pool = data_pool

    @property
    def default_managed_volume_format(self):
        """Gets the default_managed_volume_format of this Pool.  # noqa: E501


        :return: The default_managed_volume_format of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._default_managed_volume_format

    @default_managed_volume_format.setter
    def default_managed_volume_format(self, default_managed_volume_format):
        """Sets the default_managed_volume_format of this Pool.


        :param default_managed_volume_format: The default_managed_volume_format of this Pool.  # noqa: E501
        :type: int
        """

        self._default_managed_volume_format = default_managed_volume_format

    @property
    def device_type(self):
        """Gets the device_type of this Pool.  # noqa: E501


        :return: The device_type of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this Pool.


        :param device_type: The device_type of this Pool.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def device_type_check_disabled(self):
        """Gets the device_type_check_disabled of this Pool.  # noqa: E501


        :return: The device_type_check_disabled of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._device_type_check_disabled

    @device_type_check_disabled.setter
    def device_type_check_disabled(self, device_type_check_disabled):
        """Sets the device_type_check_disabled of this Pool.


        :param device_type_check_disabled: The device_type_check_disabled of this Pool.  # noqa: E501
        :type: bool
        """

        self._device_type_check_disabled = device_type_check_disabled

    @property
    def failure_domain_type(self):
        """Gets the failure_domain_type of this Pool.  # noqa: E501


        :return: The failure_domain_type of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._failure_domain_type

    @failure_domain_type.setter
    def failure_domain_type(self, failure_domain_type):
        """Sets the failure_domain_type of this Pool.


        :param failure_domain_type: The failure_domain_type of this Pool.  # noqa: E501
        :type: str
        """

        self._failure_domain_type = failure_domain_type

    @property
    def gc_policy(self):
        """Gets the gc_policy of this Pool.  # noqa: E501


        :return: The gc_policy of this Pool.  # noqa: E501
        :rtype: GCPolicy
        """
        return self._gc_policy

    @gc_policy.setter
    def gc_policy(self, gc_policy):
        """Sets the gc_policy of this Pool.


        :param gc_policy: The gc_policy of this Pool.  # noqa: E501
        :type: GCPolicy
        """

        self._gc_policy = gc_policy

    @property
    def hidden(self):
        """Gets the hidden of this Pool.  # noqa: E501


        :return: The hidden of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this Pool.


        :param hidden: The hidden of this Pool.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def id(self):
        """Gets the id of this Pool.  # noqa: E501


        :return: The id of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Pool.


        :param id: The id of this Pool.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def inner_pool_id(self):
        """Gets the inner_pool_id of this Pool.  # noqa: E501


        :return: The inner_pool_id of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._inner_pool_id

    @inner_pool_id.setter
    def inner_pool_id(self, inner_pool_id):
        """Sets the inner_pool_id of this Pool.


        :param inner_pool_id: The inner_pool_id of this Pool.  # noqa: E501
        :type: int
        """

        self._inner_pool_id = inner_pool_id

    @property
    def io_bypass_enabled(self):
        """Gets the io_bypass_enabled of this Pool.  # noqa: E501


        :return: The io_bypass_enabled of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._io_bypass_enabled

    @io_bypass_enabled.setter
    def io_bypass_enabled(self, io_bypass_enabled):
        """Sets the io_bypass_enabled of this Pool.


        :param io_bypass_enabled: The io_bypass_enabled of this Pool.  # noqa: E501
        :type: bool
        """

        self._io_bypass_enabled = io_bypass_enabled

    @property
    def io_bypass_mode(self):
        """Gets the io_bypass_mode of this Pool.  # noqa: E501


        :return: The io_bypass_mode of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._io_bypass_mode

    @io_bypass_mode.setter
    def io_bypass_mode(self, io_bypass_mode):
        """Sets the io_bypass_mode of this Pool.


        :param io_bypass_mode: The io_bypass_mode of this Pool.  # noqa: E501
        :type: str
        """

        self._io_bypass_mode = io_bypass_mode

    @property
    def io_bypass_threshold(self):
        """Gets the io_bypass_threshold of this Pool.  # noqa: E501


        :return: The io_bypass_threshold of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._io_bypass_threshold

    @io_bypass_threshold.setter
    def io_bypass_threshold(self, io_bypass_threshold):
        """Sets the io_bypass_threshold of this Pool.


        :param io_bypass_threshold: The io_bypass_threshold of this Pool.  # noqa: E501
        :type: int
        """

        self._io_bypass_threshold = io_bypass_threshold

    @property
    def min_alloc_size(self):
        """Gets the min_alloc_size of this Pool.  # noqa: E501


        :return: The min_alloc_size of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._min_alloc_size

    @min_alloc_size.setter
    def min_alloc_size(self, min_alloc_size):
        """Sets the min_alloc_size of this Pool.


        :param min_alloc_size: The min_alloc_size of this Pool.  # noqa: E501
        :type: int
        """

        self._min_alloc_size = min_alloc_size

    @property
    def min_osd_num(self):
        """Gets the min_osd_num of this Pool.  # noqa: E501


        :return: The min_osd_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._min_osd_num

    @min_osd_num.setter
    def min_osd_num(self, min_osd_num):
        """Sets the min_osd_num of this Pool.


        :param min_osd_num: The min_osd_num of this Pool.  # noqa: E501
        :type: int
        """

        self._min_osd_num = min_osd_num

    @property
    def name(self):
        """Gets the name of this Pool.  # noqa: E501


        :return: The name of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Pool.


        :param name: The name of this Pool.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def numa_apply_policy(self):
        """Gets the numa_apply_policy of this Pool.  # noqa: E501


        :return: The numa_apply_policy of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._numa_apply_policy

    @numa_apply_policy.setter
    def numa_apply_policy(self, numa_apply_policy):
        """Sets the numa_apply_policy of this Pool.


        :param numa_apply_policy: The numa_apply_policy of this Pool.  # noqa: E501
        :type: str
        """

        self._numa_apply_policy = numa_apply_policy

    @property
    def numa_bind_balanced(self):
        """Gets the numa_bind_balanced of this Pool.  # noqa: E501


        :return: The numa_bind_balanced of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._numa_bind_balanced

    @numa_bind_balanced.setter
    def numa_bind_balanced(self, numa_bind_balanced):
        """Sets the numa_bind_balanced of this Pool.


        :param numa_bind_balanced: The numa_bind_balanced of this Pool.  # noqa: E501
        :type: bool
        """

        self._numa_bind_balanced = numa_bind_balanced

    @property
    def numa_bind_policy(self):
        """Gets the numa_bind_policy of this Pool.  # noqa: E501


        :return: The numa_bind_policy of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._numa_bind_policy

    @numa_bind_policy.setter
    def numa_bind_policy(self, numa_bind_policy):
        """Sets the numa_bind_policy of this Pool.


        :param numa_bind_policy: The numa_bind_policy of this Pool.  # noqa: E501
        :type: str
        """

        self._numa_bind_policy = numa_bind_policy

    @property
    def numa_enabled(self):
        """Gets the numa_enabled of this Pool.  # noqa: E501


        :return: The numa_enabled of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._numa_enabled

    @numa_enabled.setter
    def numa_enabled(self, numa_enabled):
        """Sets the numa_enabled of this Pool.


        :param numa_enabled: The numa_enabled of this Pool.  # noqa: E501
        :type: bool
        """

        self._numa_enabled = numa_enabled

    @property
    def osd_group(self):
        """Gets the osd_group of this Pool.  # noqa: E501


        :return: The osd_group of this Pool.  # noqa: E501
        :rtype: OsdGroupNestview
        """
        return self._osd_group

    @osd_group.setter
    def osd_group(self, osd_group):
        """Sets the osd_group of this Pool.


        :param osd_group: The osd_group of this Pool.  # noqa: E501
        :type: OsdGroupNestview
        """

        self._osd_group = osd_group

    @property
    def osd_num(self):
        """Gets the osd_num of this Pool.  # noqa: E501


        :return: The osd_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._osd_num

    @osd_num.setter
    def osd_num(self, osd_num):
        """Sets the osd_num of this Pool.


        :param osd_num: The osd_num of this Pool.  # noqa: E501
        :type: int
        """

        self._osd_num = osd_num

    @property
    def osd_num_per_host(self):
        """Gets the osd_num_per_host of this Pool.  # noqa: E501


        :return: The osd_num_per_host of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._osd_num_per_host

    @osd_num_per_host.setter
    def osd_num_per_host(self, osd_num_per_host):
        """Sets the osd_num_per_host of this Pool.


        :param osd_num_per_host: The osd_num_per_host of this Pool.  # noqa: E501
        :type: int
        """

        self._osd_num_per_host = osd_num_per_host

    @property
    def out_failure_domain_num(self):
        """Gets the out_failure_domain_num of this Pool.  # noqa: E501


        :return: The out_failure_domain_num of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._out_failure_domain_num

    @out_failure_domain_num.setter
    def out_failure_domain_num(self, out_failure_domain_num):
        """Sets the out_failure_domain_num of this Pool.


        :param out_failure_domain_num: The out_failure_domain_num of this Pool.  # noqa: E501
        :type: int
        """

        self._out_failure_domain_num = out_failure_domain_num

    @property
    def pool_id(self):
        """Gets the pool_id of this Pool.  # noqa: E501


        :return: The pool_id of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._pool_id

    @pool_id.setter
    def pool_id(self, pool_id):
        """Sets the pool_id of this Pool.


        :param pool_id: The pool_id of this Pool.  # noqa: E501
        :type: int
        """

        self._pool_id = pool_id

    @property
    def pool_mode(self):
        """Gets the pool_mode of this Pool.  # noqa: E501


        :return: The pool_mode of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._pool_mode

    @pool_mode.setter
    def pool_mode(self, pool_mode):
        """Sets the pool_mode of this Pool.


        :param pool_mode: The pool_mode of this Pool.  # noqa: E501
        :type: str
        """

        self._pool_mode = pool_mode

    @property
    def pool_name(self):
        """Gets the pool_name of this Pool.  # noqa: E501


        :return: The pool_name of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._pool_name

    @pool_name.setter
    def pool_name(self, pool_name):
        """Sets the pool_name of this Pool.


        :param pool_name: The pool_name of this Pool.  # noqa: E501
        :type: str
        """

        self._pool_name = pool_name

    @property
    def pool_role(self):
        """Gets the pool_role of this Pool.  # noqa: E501


        :return: The pool_role of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._pool_role

    @pool_role.setter
    def pool_role(self, pool_role):
        """Sets the pool_role of this Pool.


        :param pool_role: The pool_role of this Pool.  # noqa: E501
        :type: str
        """

        self._pool_role = pool_role

    @property
    def pool_type(self):
        """Gets the pool_type of this Pool.  # noqa: E501


        :return: The pool_type of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._pool_type

    @pool_type.setter
    def pool_type(self, pool_type):
        """Sets the pool_type of this Pool.


        :param pool_type: The pool_type of this Pool.  # noqa: E501
        :type: str
        """

        self._pool_type = pool_type

    @property
    def primary_placement_node(self):
        """Gets the primary_placement_node of this Pool.  # noqa: E501

        placement node with the primary replica  # noqa: E501

        :return: The primary_placement_node of this Pool.  # noqa: E501
        :rtype: PlacementNodeNestview
        """
        return self._primary_placement_node

    @primary_placement_node.setter
    def primary_placement_node(self, primary_placement_node):
        """Sets the primary_placement_node of this Pool.

        placement node with the primary replica  # noqa: E501

        :param primary_placement_node: The primary_placement_node of this Pool.  # noqa: E501
        :type: PlacementNodeNestview
        """

        self._primary_placement_node = primary_placement_node

    @property
    def product_type(self):
        """Gets the product_type of this Pool.  # noqa: E501


        :return: The product_type of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this Pool.


        :param product_type: The product_type of this Pool.  # noqa: E501
        :type: str
        """

        self._product_type = product_type

    @property
    def _property(self):
        """Gets the _property of this Pool.  # noqa: E501


        :return: The _property of this Pool.  # noqa: E501
        :rtype: object
        """
        return self.__property

    @_property.setter
    def _property(self, _property):
        """Sets the _property of this Pool.


        :param _property: The _property of this Pool.  # noqa: E501
        :type: object
        """

        self.__property = _property

    @property
    def protection_domain(self):
        """Gets the protection_domain of this Pool.  # noqa: E501


        :return: The protection_domain of this Pool.  # noqa: E501
        :rtype: ProtectionDomainNestview
        """
        return self._protection_domain

    @protection_domain.setter
    def protection_domain(self, protection_domain):
        """Sets the protection_domain of this Pool.


        :param protection_domain: The protection_domain of this Pool.  # noqa: E501
        :type: ProtectionDomainNestview
        """

        self._protection_domain = protection_domain

    @property
    def qos(self):
        """Gets the qos of this Pool.  # noqa: E501


        :return: The qos of this Pool.  # noqa: E501
        :rtype: OsdQos
        """
        return self._qos

    @qos.setter
    def qos(self, qos):
        """Sets the qos of this Pool.


        :param qos: The qos of this Pool.  # noqa: E501
        :type: OsdQos
        """

        self._qos = qos

    @property
    def replicate_size(self):
        """Gets the replicate_size of this Pool.  # noqa: E501


        :return: The replicate_size of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._replicate_size

    @replicate_size.setter
    def replicate_size(self, replicate_size):
        """Sets the replicate_size of this Pool.


        :param replicate_size: The replicate_size of this Pool.  # noqa: E501
        :type: int
        """

        self._replicate_size = replicate_size

    @property
    def reserved_percent(self):
        """Gets the reserved_percent of this Pool.  # noqa: E501


        :return: The reserved_percent of this Pool.  # noqa: E501
        :rtype: float
        """
        return self._reserved_percent

    @reserved_percent.setter
    def reserved_percent(self, reserved_percent):
        """Sets the reserved_percent of this Pool.


        :param reserved_percent: The reserved_percent of this Pool.  # noqa: E501
        :type: float
        """

        self._reserved_percent = reserved_percent

    @property
    def size_per_osd(self):
        """Gets the size_per_osd of this Pool.  # noqa: E501


        :return: The size_per_osd of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._size_per_osd

    @size_per_osd.setter
    def size_per_osd(self, size_per_osd):
        """Sets the size_per_osd of this Pool.


        :param size_per_osd: The size_per_osd of this Pool.  # noqa: E501
        :type: int
        """

        self._size_per_osd = size_per_osd

    @property
    def status(self):
        """Gets the status of this Pool.  # noqa: E501


        :return: The status of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Pool.


        :param status: The status of this Pool.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stretched(self):
        """Gets the stretched of this Pool.  # noqa: E501


        :return: The stretched of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._stretched

    @stretched.setter
    def stretched(self, stretched):
        """Sets the stretched of this Pool.


        :param stretched: The stretched of this Pool.  # noqa: E501
        :type: bool
        """

        self._stretched = stretched

    @property
    def suggested_omap_size(self):
        """Gets the suggested_omap_size of this Pool.  # noqa: E501


        :return: The suggested_omap_size of this Pool.  # noqa: E501
        :rtype: int
        """
        return self._suggested_omap_size

    @suggested_omap_size.setter
    def suggested_omap_size(self, suggested_omap_size):
        """Sets the suggested_omap_size of this Pool.


        :param suggested_omap_size: The suggested_omap_size of this Pool.  # noqa: E501
        :type: int
        """

        self._suggested_omap_size = suggested_omap_size

    @property
    def thin_provisioned(self):
        """Gets the thin_provisioned of this Pool.  # noqa: E501


        :return: The thin_provisioned of this Pool.  # noqa: E501
        :rtype: bool
        """
        return self._thin_provisioned

    @thin_provisioned.setter
    def thin_provisioned(self, thin_provisioned):
        """Sets the thin_provisioned of this Pool.


        :param thin_provisioned: The thin_provisioned of this Pool.  # noqa: E501
        :type: bool
        """

        self._thin_provisioned = thin_provisioned

    @property
    def tier_status(self):
        """Gets the tier_status of this Pool.  # noqa: E501


        :return: The tier_status of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._tier_status

    @tier_status.setter
    def tier_status(self, tier_status):
        """Sets the tier_status of this Pool.


        :param tier_status: The tier_status of this Pool.  # noqa: E501
        :type: str
        """

        self._tier_status = tier_status

    @property
    def transport_mode(self):
        """Gets the transport_mode of this Pool.  # noqa: E501


        :return: The transport_mode of this Pool.  # noqa: E501
        :rtype: str
        """
        return self._transport_mode

    @transport_mode.setter
    def transport_mode(self, transport_mode):
        """Sets the transport_mode of this Pool.


        :param transport_mode: The transport_mode of this Pool.  # noqa: E501
        :type: str
        """

        self._transport_mode = transport_mode

    @property
    def update(self):
        """Gets the update of this Pool.  # noqa: E501


        :return: The update of this Pool.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Pool.


        :param update: The update of this Pool.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Pool):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
