# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.s3_key import S3Key  # noqa: F401,E501


class S3Req(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bucket_limit': 'int',
        'bucket_path': 'str',
        'bucket_permission': 'str',
        'gateway_group_id': 'int',
        's3_enabled': 'bool',
        's3_keys': 'list[S3Key]'
    }

    attribute_map = {
        'bucket_limit': 'bucket_limit',
        'bucket_path': 'bucket_path',
        'bucket_permission': 'bucket_permission',
        'gateway_group_id': 'gateway_group_id',
        's3_enabled': 's3_enabled',
        's3_keys': 's3_keys'
    }

    def __init__(self, bucket_limit=None, bucket_path=None, bucket_permission=None, gateway_group_id=None, s3_enabled=None, s3_keys=None):  # noqa: E501
        """S3Req - a model defined in Swagger"""  # noqa: E501

        self._bucket_limit = None
        self._bucket_path = None
        self._bucket_permission = None
        self._gateway_group_id = None
        self._s3_enabled = None
        self._s3_keys = None
        self.discriminator = None

        if bucket_limit is not None:
            self.bucket_limit = bucket_limit
        if bucket_path is not None:
            self.bucket_path = bucket_path
        if bucket_permission is not None:
            self.bucket_permission = bucket_permission
        if gateway_group_id is not None:
            self.gateway_group_id = gateway_group_id
        if s3_enabled is not None:
            self.s3_enabled = s3_enabled
        if s3_keys is not None:
            self.s3_keys = s3_keys

    @property
    def bucket_limit(self):
        """Gets the bucket_limit of this S3Req.  # noqa: E501


        :return: The bucket_limit of this S3Req.  # noqa: E501
        :rtype: int
        """
        return self._bucket_limit

    @bucket_limit.setter
    def bucket_limit(self, bucket_limit):
        """Sets the bucket_limit of this S3Req.


        :param bucket_limit: The bucket_limit of this S3Req.  # noqa: E501
        :type: int
        """

        self._bucket_limit = bucket_limit

    @property
    def bucket_path(self):
        """Gets the bucket_path of this S3Req.  # noqa: E501


        :return: The bucket_path of this S3Req.  # noqa: E501
        :rtype: str
        """
        return self._bucket_path

    @bucket_path.setter
    def bucket_path(self, bucket_path):
        """Sets the bucket_path of this S3Req.


        :param bucket_path: The bucket_path of this S3Req.  # noqa: E501
        :type: str
        """

        self._bucket_path = bucket_path

    @property
    def bucket_permission(self):
        """Gets the bucket_permission of this S3Req.  # noqa: E501


        :return: The bucket_permission of this S3Req.  # noqa: E501
        :rtype: str
        """
        return self._bucket_permission

    @bucket_permission.setter
    def bucket_permission(self, bucket_permission):
        """Sets the bucket_permission of this S3Req.


        :param bucket_permission: The bucket_permission of this S3Req.  # noqa: E501
        :type: str
        """

        self._bucket_permission = bucket_permission

    @property
    def gateway_group_id(self):
        """Gets the gateway_group_id of this S3Req.  # noqa: E501


        :return: The gateway_group_id of this S3Req.  # noqa: E501
        :rtype: int
        """
        return self._gateway_group_id

    @gateway_group_id.setter
    def gateway_group_id(self, gateway_group_id):
        """Sets the gateway_group_id of this S3Req.


        :param gateway_group_id: The gateway_group_id of this S3Req.  # noqa: E501
        :type: int
        """

        self._gateway_group_id = gateway_group_id

    @property
    def s3_enabled(self):
        """Gets the s3_enabled of this S3Req.  # noqa: E501


        :return: The s3_enabled of this S3Req.  # noqa: E501
        :rtype: bool
        """
        return self._s3_enabled

    @s3_enabled.setter
    def s3_enabled(self, s3_enabled):
        """Sets the s3_enabled of this S3Req.


        :param s3_enabled: The s3_enabled of this S3Req.  # noqa: E501
        :type: bool
        """

        self._s3_enabled = s3_enabled

    @property
    def s3_keys(self):
        """Gets the s3_keys of this S3Req.  # noqa: E501


        :return: The s3_keys of this S3Req.  # noqa: E501
        :rtype: list[S3Key]
        """
        return self._s3_keys

    @s3_keys.setter
    def s3_keys(self, s3_keys):
        """Sets the s3_keys of this S3Req.


        :param s3_keys: The s3_keys of this S3Req.  # noqa: E501
        :type: list[S3Key]
        """

        self._s3_keys = s3_keys

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3Req):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
