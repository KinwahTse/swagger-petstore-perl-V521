# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501


class FCPort(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'conn_opt_mode': 'str',
        'conn_type': 'str',
        'create': 'datetime',
        'data_rate_mode': 'str',
        'health': 'str',
        'host': 'HostNestview',
        'id': 'int',
        'link_speed': 'str',
        'link_state': 'str',
        'max_speed': 'str',
        'pci_address': 'str',
        'port_id': 'str',
        'recv_bytes': 'int',
        'recv_frames': 'int',
        'rg_host': 'int',
        'send_bytes': 'int',
        'send_frames': 'int',
        'start': 'datetime',
        'supported_speeds': 'list[str]',
        'update': 'datetime',
        'wwpn': 'str'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'conn_opt_mode': 'conn_opt_mode',
        'conn_type': 'conn_type',
        'create': 'create',
        'data_rate_mode': 'data_rate_mode',
        'health': 'health',
        'host': 'host',
        'id': 'id',
        'link_speed': 'link_speed',
        'link_state': 'link_state',
        'max_speed': 'max_speed',
        'pci_address': 'pci_address',
        'port_id': 'port_id',
        'recv_bytes': 'recv_bytes',
        'recv_frames': 'recv_frames',
        'rg_host': 'rg_host',
        'send_bytes': 'send_bytes',
        'send_frames': 'send_frames',
        'start': 'start',
        'supported_speeds': 'supported_speeds',
        'update': 'update',
        'wwpn': 'wwpn'
    }

    def __init__(self, action_status=None, cluster=None, conn_opt_mode=None, conn_type=None, create=None, data_rate_mode=None, health=None, host=None, id=None, link_speed=None, link_state=None, max_speed=None, pci_address=None, port_id=None, recv_bytes=None, recv_frames=None, rg_host=None, send_bytes=None, send_frames=None, start=None, supported_speeds=None, update=None, wwpn=None):  # noqa: E501
        """FCPort - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._conn_opt_mode = None
        self._conn_type = None
        self._create = None
        self._data_rate_mode = None
        self._health = None
        self._host = None
        self._id = None
        self._link_speed = None
        self._link_state = None
        self._max_speed = None
        self._pci_address = None
        self._port_id = None
        self._recv_bytes = None
        self._recv_frames = None
        self._rg_host = None
        self._send_bytes = None
        self._send_frames = None
        self._start = None
        self._supported_speeds = None
        self._update = None
        self._wwpn = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if conn_opt_mode is not None:
            self.conn_opt_mode = conn_opt_mode
        if conn_type is not None:
            self.conn_type = conn_type
        if create is not None:
            self.create = create
        if data_rate_mode is not None:
            self.data_rate_mode = data_rate_mode
        if health is not None:
            self.health = health
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if link_speed is not None:
            self.link_speed = link_speed
        if link_state is not None:
            self.link_state = link_state
        if max_speed is not None:
            self.max_speed = max_speed
        if pci_address is not None:
            self.pci_address = pci_address
        if port_id is not None:
            self.port_id = port_id
        if recv_bytes is not None:
            self.recv_bytes = recv_bytes
        if recv_frames is not None:
            self.recv_frames = recv_frames
        if rg_host is not None:
            self.rg_host = rg_host
        if send_bytes is not None:
            self.send_bytes = send_bytes
        if send_frames is not None:
            self.send_frames = send_frames
        if start is not None:
            self.start = start
        if supported_speeds is not None:
            self.supported_speeds = supported_speeds
        if update is not None:
            self.update = update
        if wwpn is not None:
            self.wwpn = wwpn

    @property
    def action_status(self):
        """Gets the action_status of this FCPort.  # noqa: E501


        :return: The action_status of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this FCPort.


        :param action_status: The action_status of this FCPort.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this FCPort.  # noqa: E501


        :return: The cluster of this FCPort.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this FCPort.


        :param cluster: The cluster of this FCPort.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def conn_opt_mode(self):
        """Gets the conn_opt_mode of this FCPort.  # noqa: E501


        :return: The conn_opt_mode of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._conn_opt_mode

    @conn_opt_mode.setter
    def conn_opt_mode(self, conn_opt_mode):
        """Sets the conn_opt_mode of this FCPort.


        :param conn_opt_mode: The conn_opt_mode of this FCPort.  # noqa: E501
        :type: str
        """

        self._conn_opt_mode = conn_opt_mode

    @property
    def conn_type(self):
        """Gets the conn_type of this FCPort.  # noqa: E501


        :return: The conn_type of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._conn_type

    @conn_type.setter
    def conn_type(self, conn_type):
        """Sets the conn_type of this FCPort.


        :param conn_type: The conn_type of this FCPort.  # noqa: E501
        :type: str
        """

        self._conn_type = conn_type

    @property
    def create(self):
        """Gets the create of this FCPort.  # noqa: E501


        :return: The create of this FCPort.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this FCPort.


        :param create: The create of this FCPort.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def data_rate_mode(self):
        """Gets the data_rate_mode of this FCPort.  # noqa: E501


        :return: The data_rate_mode of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._data_rate_mode

    @data_rate_mode.setter
    def data_rate_mode(self, data_rate_mode):
        """Sets the data_rate_mode of this FCPort.


        :param data_rate_mode: The data_rate_mode of this FCPort.  # noqa: E501
        :type: str
        """

        self._data_rate_mode = data_rate_mode

    @property
    def health(self):
        """Gets the health of this FCPort.  # noqa: E501


        :return: The health of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._health

    @health.setter
    def health(self, health):
        """Sets the health of this FCPort.


        :param health: The health of this FCPort.  # noqa: E501
        :type: str
        """

        self._health = health

    @property
    def host(self):
        """Gets the host of this FCPort.  # noqa: E501


        :return: The host of this FCPort.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this FCPort.


        :param host: The host of this FCPort.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this FCPort.  # noqa: E501


        :return: The id of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FCPort.


        :param id: The id of this FCPort.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def link_speed(self):
        """Gets the link_speed of this FCPort.  # noqa: E501


        :return: The link_speed of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._link_speed

    @link_speed.setter
    def link_speed(self, link_speed):
        """Sets the link_speed of this FCPort.


        :param link_speed: The link_speed of this FCPort.  # noqa: E501
        :type: str
        """

        self._link_speed = link_speed

    @property
    def link_state(self):
        """Gets the link_state of this FCPort.  # noqa: E501


        :return: The link_state of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._link_state

    @link_state.setter
    def link_state(self, link_state):
        """Sets the link_state of this FCPort.


        :param link_state: The link_state of this FCPort.  # noqa: E501
        :type: str
        """

        self._link_state = link_state

    @property
    def max_speed(self):
        """Gets the max_speed of this FCPort.  # noqa: E501


        :return: The max_speed of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._max_speed

    @max_speed.setter
    def max_speed(self, max_speed):
        """Sets the max_speed of this FCPort.


        :param max_speed: The max_speed of this FCPort.  # noqa: E501
        :type: str
        """

        self._max_speed = max_speed

    @property
    def pci_address(self):
        """Gets the pci_address of this FCPort.  # noqa: E501


        :return: The pci_address of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this FCPort.


        :param pci_address: The pci_address of this FCPort.  # noqa: E501
        :type: str
        """

        self._pci_address = pci_address

    @property
    def port_id(self):
        """Gets the port_id of this FCPort.  # noqa: E501


        :return: The port_id of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._port_id

    @port_id.setter
    def port_id(self, port_id):
        """Sets the port_id of this FCPort.


        :param port_id: The port_id of this FCPort.  # noqa: E501
        :type: str
        """

        self._port_id = port_id

    @property
    def recv_bytes(self):
        """Gets the recv_bytes of this FCPort.  # noqa: E501


        :return: The recv_bytes of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._recv_bytes

    @recv_bytes.setter
    def recv_bytes(self, recv_bytes):
        """Sets the recv_bytes of this FCPort.


        :param recv_bytes: The recv_bytes of this FCPort.  # noqa: E501
        :type: int
        """

        self._recv_bytes = recv_bytes

    @property
    def recv_frames(self):
        """Gets the recv_frames of this FCPort.  # noqa: E501


        :return: The recv_frames of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._recv_frames

    @recv_frames.setter
    def recv_frames(self, recv_frames):
        """Sets the recv_frames of this FCPort.


        :param recv_frames: The recv_frames of this FCPort.  # noqa: E501
        :type: int
        """

        self._recv_frames = recv_frames

    @property
    def rg_host(self):
        """Gets the rg_host of this FCPort.  # noqa: E501


        :return: The rg_host of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._rg_host

    @rg_host.setter
    def rg_host(self, rg_host):
        """Sets the rg_host of this FCPort.


        :param rg_host: The rg_host of this FCPort.  # noqa: E501
        :type: int
        """

        self._rg_host = rg_host

    @property
    def send_bytes(self):
        """Gets the send_bytes of this FCPort.  # noqa: E501


        :return: The send_bytes of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._send_bytes

    @send_bytes.setter
    def send_bytes(self, send_bytes):
        """Sets the send_bytes of this FCPort.


        :param send_bytes: The send_bytes of this FCPort.  # noqa: E501
        :type: int
        """

        self._send_bytes = send_bytes

    @property
    def send_frames(self):
        """Gets the send_frames of this FCPort.  # noqa: E501


        :return: The send_frames of this FCPort.  # noqa: E501
        :rtype: int
        """
        return self._send_frames

    @send_frames.setter
    def send_frames(self, send_frames):
        """Sets the send_frames of this FCPort.


        :param send_frames: The send_frames of this FCPort.  # noqa: E501
        :type: int
        """

        self._send_frames = send_frames

    @property
    def start(self):
        """Gets the start of this FCPort.  # noqa: E501


        :return: The start of this FCPort.  # noqa: E501
        :rtype: datetime
        """
        return self._start

    @start.setter
    def start(self, start):
        """Sets the start of this FCPort.


        :param start: The start of this FCPort.  # noqa: E501
        :type: datetime
        """

        self._start = start

    @property
    def supported_speeds(self):
        """Gets the supported_speeds of this FCPort.  # noqa: E501


        :return: The supported_speeds of this FCPort.  # noqa: E501
        :rtype: list[str]
        """
        return self._supported_speeds

    @supported_speeds.setter
    def supported_speeds(self, supported_speeds):
        """Sets the supported_speeds of this FCPort.


        :param supported_speeds: The supported_speeds of this FCPort.  # noqa: E501
        :type: list[str]
        """

        self._supported_speeds = supported_speeds

    @property
    def update(self):
        """Gets the update of this FCPort.  # noqa: E501


        :return: The update of this FCPort.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this FCPort.


        :param update: The update of this FCPort.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def wwpn(self):
        """Gets the wwpn of this FCPort.  # noqa: E501


        :return: The wwpn of this FCPort.  # noqa: E501
        :rtype: str
        """
        return self._wwpn

    @wwpn.setter
    def wwpn(self, wwpn):
        """Sets the wwpn of this FCPort.


        :param wwpn: The wwpn of this FCPort.  # noqa: E501
        :type: str
        """

        self._wwpn = wwpn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FCPort):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
