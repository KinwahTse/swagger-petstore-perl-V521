# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dns_gateway_group_create_req_group_vip_groups_elt import DNSGatewayGroupCreateReqGroupVIPGroupsElt  # noqa: F401,E501


class DNSGatewayGroupCreateReqGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host_ids': 'list[int]',
        'name': 'str',
        'origin': 'str',
        'port': 'int',
        'ttl': 'int',
        'vip_groups': 'list[DNSGatewayGroupCreateReqGroupVIPGroupsElt]'
    }

    attribute_map = {
        'host_ids': 'host_ids',
        'name': 'name',
        'origin': 'origin',
        'port': 'port',
        'ttl': 'ttl',
        'vip_groups': 'vip_groups'
    }

    def __init__(self, host_ids=None, name=None, origin=None, port=None, ttl=None, vip_groups=None):  # noqa: E501
        """DNSGatewayGroupCreateReqGroup - a model defined in Swagger"""  # noqa: E501

        self._host_ids = None
        self._name = None
        self._origin = None
        self._port = None
        self._ttl = None
        self._vip_groups = None
        self.discriminator = None

        self.host_ids = host_ids
        self.name = name
        self.origin = origin
        self.port = port
        if ttl is not None:
            self.ttl = ttl
        if vip_groups is not None:
            self.vip_groups = vip_groups

    @property
    def host_ids(self):
        """Gets the host_ids of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns gateway id list  # noqa: E501

        :return: The host_ids of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: list[int]
        """
        return self._host_ids

    @host_ids.setter
    def host_ids(self, host_ids):
        """Sets the host_ids of this DNSGatewayGroupCreateReqGroup.

        dns gateway id list  # noqa: E501

        :param host_ids: The host_ids of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: list[int]
        """
        if host_ids is None:
            raise ValueError("Invalid value for `host_ids`, must not be `None`")  # noqa: E501

        self._host_ids = host_ids

    @property
    def name(self):
        """Gets the name of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns gateway group name  # noqa: E501

        :return: The name of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DNSGatewayGroupCreateReqGroup.

        dns gateway group name  # noqa: E501

        :param name: The name of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def origin(self):
        """Gets the origin of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns origin  # noqa: E501

        :return: The origin of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this DNSGatewayGroupCreateReqGroup.

        dns origin  # noqa: E501

        :param origin: The origin of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")  # noqa: E501

        self._origin = origin

    @property
    def port(self):
        """Gets the port of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns service port  # noqa: E501

        :return: The port of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this DNSGatewayGroupCreateReqGroup.

        dns service port  # noqa: E501

        :param port: The port of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: int
        """
        if port is None:
            raise ValueError("Invalid value for `port`, must not be `None`")  # noqa: E501

        self._port = port

    @property
    def ttl(self):
        """Gets the ttl of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns ttl with zone  # noqa: E501

        :return: The ttl of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl):
        """Sets the ttl of this DNSGatewayGroupCreateReqGroup.

        dns ttl with zone  # noqa: E501

        :param ttl: The ttl of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: int
        """

        self._ttl = ttl

    @property
    def vip_groups(self):
        """Gets the vip_groups of this DNSGatewayGroupCreateReqGroup.  # noqa: E501

        dns vip groups  # noqa: E501

        :return: The vip_groups of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :rtype: list[DNSGatewayGroupCreateReqGroupVIPGroupsElt]
        """
        return self._vip_groups

    @vip_groups.setter
    def vip_groups(self, vip_groups):
        """Sets the vip_groups of this DNSGatewayGroupCreateReqGroup.

        dns vip groups  # noqa: E501

        :param vip_groups: The vip_groups of this DNSGatewayGroupCreateReqGroup.  # noqa: E501
        :type: list[DNSGatewayGroupCreateReqGroupVIPGroupsElt]
        """

        self._vip_groups = vip_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DNSGatewayGroupCreateReqGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
