# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DiskNestview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'str',
        'disk_type': 'str',
        'id': 'int',
        'ssd_life_left': 'int'
    }

    attribute_map = {
        'device': 'device',
        'disk_type': 'disk_type',
        'id': 'id',
        'ssd_life_left': 'ssd_life_left'
    }

    def __init__(self, device=None, disk_type=None, id=None, ssd_life_left=None):  # noqa: E501
        """DiskNestview - a model defined in Swagger"""  # noqa: E501

        self._device = None
        self._disk_type = None
        self._id = None
        self._ssd_life_left = None
        self.discriminator = None

        if device is not None:
            self.device = device
        if disk_type is not None:
            self.disk_type = disk_type
        if id is not None:
            self.id = id
        if ssd_life_left is not None:
            self.ssd_life_left = ssd_life_left

    @property
    def device(self):
        """Gets the device of this DiskNestview.  # noqa: E501


        :return: The device of this DiskNestview.  # noqa: E501
        :rtype: str
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this DiskNestview.


        :param device: The device of this DiskNestview.  # noqa: E501
        :type: str
        """

        self._device = device

    @property
    def disk_type(self):
        """Gets the disk_type of this DiskNestview.  # noqa: E501


        :return: The disk_type of this DiskNestview.  # noqa: E501
        :rtype: str
        """
        return self._disk_type

    @disk_type.setter
    def disk_type(self, disk_type):
        """Sets the disk_type of this DiskNestview.


        :param disk_type: The disk_type of this DiskNestview.  # noqa: E501
        :type: str
        """

        self._disk_type = disk_type

    @property
    def id(self):
        """Gets the id of this DiskNestview.  # noqa: E501


        :return: The id of this DiskNestview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DiskNestview.


        :param id: The id of this DiskNestview.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ssd_life_left(self):
        """Gets the ssd_life_left of this DiskNestview.  # noqa: E501


        :return: The ssd_life_left of this DiskNestview.  # noqa: E501
        :rtype: int
        """
        return self._ssd_life_left

    @ssd_life_left.setter
    def ssd_life_left(self, ssd_life_left):
        """Sets the ssd_life_left of this DiskNestview.


        :param ssd_life_left: The ssd_life_left of this DiskNestview.  # noqa: E501
        :type: int
        """

        self._ssd_life_left = ssd_life_left

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DiskNestview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
