# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsS3BucketStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allocated_size': 'int',
        'create': 'datetime',
        'objects': 'int'
    }

    attribute_map = {
        'allocated_size': 'allocated_size',
        'create': 'create',
        'objects': 'objects'
    }

    def __init__(self, allocated_size=None, create=None, objects=None):  # noqa: E501
        """DfsS3BucketStat - a model defined in Swagger"""  # noqa: E501

        self._allocated_size = None
        self._create = None
        self._objects = None
        self.discriminator = None

        if allocated_size is not None:
            self.allocated_size = allocated_size
        if create is not None:
            self.create = create
        if objects is not None:
            self.objects = objects

    @property
    def allocated_size(self):
        """Gets the allocated_size of this DfsS3BucketStat.  # noqa: E501


        :return: The allocated_size of this DfsS3BucketStat.  # noqa: E501
        :rtype: int
        """
        return self._allocated_size

    @allocated_size.setter
    def allocated_size(self, allocated_size):
        """Sets the allocated_size of this DfsS3BucketStat.


        :param allocated_size: The allocated_size of this DfsS3BucketStat.  # noqa: E501
        :type: int
        """

        self._allocated_size = allocated_size

    @property
    def create(self):
        """Gets the create of this DfsS3BucketStat.  # noqa: E501


        :return: The create of this DfsS3BucketStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsS3BucketStat.


        :param create: The create of this DfsS3BucketStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def objects(self):
        """Gets the objects of this DfsS3BucketStat.  # noqa: E501


        :return: The objects of this DfsS3BucketStat.  # noqa: E501
        :rtype: int
        """
        return self._objects

    @objects.setter
    def objects(self, objects):
        """Sets the objects of this DfsS3BucketStat.


        :param objects: The objects of this DfsS3BucketStat.  # noqa: E501
        :type: int
        """

        self._objects = objects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsS3BucketStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
