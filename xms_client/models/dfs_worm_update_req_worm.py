# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsWormUpdateReqWorm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_lock_period': 'str',
        'default_protect_period': 'str',
        'max_protect_period': 'str',
        'min_protect_period': 'str'
    }

    attribute_map = {
        'auto_lock_period': 'auto_lock_period',
        'default_protect_period': 'default_protect_period',
        'max_protect_period': 'max_protect_period',
        'min_protect_period': 'min_protect_period'
    }

    def __init__(self, auto_lock_period=None, default_protect_period=None, max_protect_period=None, min_protect_period=None):  # noqa: E501
        """DfsWormUpdateReqWorm - a model defined in Swagger"""  # noqa: E501

        self._auto_lock_period = None
        self._default_protect_period = None
        self._max_protect_period = None
        self._min_protect_period = None
        self.discriminator = None

        if auto_lock_period is not None:
            self.auto_lock_period = auto_lock_period
        if default_protect_period is not None:
            self.default_protect_period = default_protect_period
        if max_protect_period is not None:
            self.max_protect_period = max_protect_period
        if min_protect_period is not None:
            self.min_protect_period = min_protect_period

    @property
    def auto_lock_period(self):
        """Gets the auto_lock_period of this DfsWormUpdateReqWorm.  # noqa: E501

        automatic locking period  # noqa: E501

        :return: The auto_lock_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :rtype: str
        """
        return self._auto_lock_period

    @auto_lock_period.setter
    def auto_lock_period(self, auto_lock_period):
        """Sets the auto_lock_period of this DfsWormUpdateReqWorm.

        automatic locking period  # noqa: E501

        :param auto_lock_period: The auto_lock_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :type: str
        """

        self._auto_lock_period = auto_lock_period

    @property
    def default_protect_period(self):
        """Gets the default_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501

        default protect period  # noqa: E501

        :return: The default_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :rtype: str
        """
        return self._default_protect_period

    @default_protect_period.setter
    def default_protect_period(self, default_protect_period):
        """Sets the default_protect_period of this DfsWormUpdateReqWorm.

        default protect period  # noqa: E501

        :param default_protect_period: The default_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :type: str
        """

        self._default_protect_period = default_protect_period

    @property
    def max_protect_period(self):
        """Gets the max_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501

        maximum protect period  # noqa: E501

        :return: The max_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :rtype: str
        """
        return self._max_protect_period

    @max_protect_period.setter
    def max_protect_period(self, max_protect_period):
        """Sets the max_protect_period of this DfsWormUpdateReqWorm.

        maximum protect period  # noqa: E501

        :param max_protect_period: The max_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :type: str
        """

        self._max_protect_period = max_protect_period

    @property
    def min_protect_period(self):
        """Gets the min_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501

        minimum protect period  # noqa: E501

        :return: The min_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :rtype: str
        """
        return self._min_protect_period

    @min_protect_period.setter
    def min_protect_period(self, min_protect_period):
        """Sets the min_protect_period of this DfsWormUpdateReqWorm.

        minimum protect period  # noqa: E501

        :param min_protect_period: The min_protect_period of this DfsWormUpdateReqWorm.  # noqa: E501
        :type: str
        """

        self._min_protect_period = min_protect_period

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsWormUpdateReqWorm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
