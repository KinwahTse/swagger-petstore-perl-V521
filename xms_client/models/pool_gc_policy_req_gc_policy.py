# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PoolGCPolicyReqGCPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'reserve_ratio': 'int',
        'scan': 'bool',
        'scan_water': 'int',
        'stop_decrement': 'int',
        'throttle_bandwidth_base': 'int',
        'throttle_bandwidth_step': 'int',
        'water_level': 'int'
    }

    attribute_map = {
        'enable': 'enable',
        'reserve_ratio': 'reserve_ratio',
        'scan': 'scan',
        'scan_water': 'scan_water',
        'stop_decrement': 'stop_decrement',
        'throttle_bandwidth_base': 'throttle_bandwidth_base',
        'throttle_bandwidth_step': 'throttle_bandwidth_step',
        'water_level': 'water_level'
    }

    def __init__(self, enable=None, reserve_ratio=None, scan=None, scan_water=None, stop_decrement=None, throttle_bandwidth_base=None, throttle_bandwidth_step=None, water_level=None):  # noqa: E501
        """PoolGCPolicyReqGCPolicy - a model defined in Swagger"""  # noqa: E501

        self._enable = None
        self._reserve_ratio = None
        self._scan = None
        self._scan_water = None
        self._stop_decrement = None
        self._throttle_bandwidth_base = None
        self._throttle_bandwidth_step = None
        self._water_level = None
        self.discriminator = None

        self.enable = enable
        if reserve_ratio is not None:
            self.reserve_ratio = reserve_ratio
        if scan is not None:
            self.scan = scan
        if scan_water is not None:
            self.scan_water = scan_water
        if stop_decrement is not None:
            self.stop_decrement = stop_decrement
        if throttle_bandwidth_base is not None:
            self.throttle_bandwidth_base = throttle_bandwidth_base
        if throttle_bandwidth_step is not None:
            self.throttle_bandwidth_step = throttle_bandwidth_step
        if water_level is not None:
            self.water_level = water_level

    @property
    def enable(self):
        """Gets the enable of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The enable of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this PoolGCPolicyReqGCPolicy.


        :param enable: The enable of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: bool
        """
        if enable is None:
            raise ValueError("Invalid value for `enable`, must not be `None`")  # noqa: E501

        self._enable = enable

    @property
    def reserve_ratio(self):
        """Gets the reserve_ratio of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The reserve_ratio of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._reserve_ratio

    @reserve_ratio.setter
    def reserve_ratio(self, reserve_ratio):
        """Sets the reserve_ratio of this PoolGCPolicyReqGCPolicy.


        :param reserve_ratio: The reserve_ratio of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._reserve_ratio = reserve_ratio

    @property
    def scan(self):
        """Gets the scan of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The scan of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._scan

    @scan.setter
    def scan(self, scan):
        """Sets the scan of this PoolGCPolicyReqGCPolicy.


        :param scan: The scan of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: bool
        """

        self._scan = scan

    @property
    def scan_water(self):
        """Gets the scan_water of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The scan_water of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._scan_water

    @scan_water.setter
    def scan_water(self, scan_water):
        """Sets the scan_water of this PoolGCPolicyReqGCPolicy.


        :param scan_water: The scan_water of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._scan_water = scan_water

    @property
    def stop_decrement(self):
        """Gets the stop_decrement of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The stop_decrement of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._stop_decrement

    @stop_decrement.setter
    def stop_decrement(self, stop_decrement):
        """Sets the stop_decrement of this PoolGCPolicyReqGCPolicy.


        :param stop_decrement: The stop_decrement of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._stop_decrement = stop_decrement

    @property
    def throttle_bandwidth_base(self):
        """Gets the throttle_bandwidth_base of this PoolGCPolicyReqGCPolicy.  # noqa: E501

        bandwidth = throttle_bandwidth_base + (base_pool.water - water) * throttle_bandwidth_step  # noqa: E501

        :return: The throttle_bandwidth_base of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._throttle_bandwidth_base

    @throttle_bandwidth_base.setter
    def throttle_bandwidth_base(self, throttle_bandwidth_base):
        """Sets the throttle_bandwidth_base of this PoolGCPolicyReqGCPolicy.

        bandwidth = throttle_bandwidth_base + (base_pool.water - water) * throttle_bandwidth_step  # noqa: E501

        :param throttle_bandwidth_base: The throttle_bandwidth_base of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._throttle_bandwidth_base = throttle_bandwidth_base

    @property
    def throttle_bandwidth_step(self):
        """Gets the throttle_bandwidth_step of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The throttle_bandwidth_step of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._throttle_bandwidth_step

    @throttle_bandwidth_step.setter
    def throttle_bandwidth_step(self, throttle_bandwidth_step):
        """Sets the throttle_bandwidth_step of this PoolGCPolicyReqGCPolicy.


        :param throttle_bandwidth_step: The throttle_bandwidth_step of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._throttle_bandwidth_step = throttle_bandwidth_step

    @property
    def water_level(self):
        """Gets the water_level of this PoolGCPolicyReqGCPolicy.  # noqa: E501


        :return: The water_level of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :rtype: int
        """
        return self._water_level

    @water_level.setter
    def water_level(self, water_level):
        """Sets the water_level of this PoolGCPolicyReqGCPolicy.


        :param water_level: The water_level of this PoolGCPolicyReqGCPolicy.  # noqa: E501
        :type: int
        """

        self._water_level = water_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolGCPolicyReqGCPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
