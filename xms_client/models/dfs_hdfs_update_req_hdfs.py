# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsHdfsUpdateReqHdfs(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_size': 'int',
        'checksum_type': 'str',
        'path': 'str'
    }

    attribute_map = {
        'block_size': 'block_size',
        'checksum_type': 'checksum_type',
        'path': 'path'
    }

    def __init__(self, block_size=None, checksum_type=None, path=None):  # noqa: E501
        """DfsHdfsUpdateReqHdfs - a model defined in Swagger"""  # noqa: E501

        self._block_size = None
        self._checksum_type = None
        self._path = None
        self.discriminator = None

        if block_size is not None:
            self.block_size = block_size
        if checksum_type is not None:
            self.checksum_type = checksum_type
        if path is not None:
            self.path = path

    @property
    def block_size(self):
        """Gets the block_size of this DfsHdfsUpdateReqHdfs.  # noqa: E501

        block size of hdfs  # noqa: E501

        :return: The block_size of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :rtype: int
        """
        return self._block_size

    @block_size.setter
    def block_size(self, block_size):
        """Sets the block_size of this DfsHdfsUpdateReqHdfs.

        block size of hdfs  # noqa: E501

        :param block_size: The block_size of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :type: int
        """

        self._block_size = block_size

    @property
    def checksum_type(self):
        """Gets the checksum_type of this DfsHdfsUpdateReqHdfs.  # noqa: E501

        checksum type of hdfs  # noqa: E501

        :return: The checksum_type of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :rtype: str
        """
        return self._checksum_type

    @checksum_type.setter
    def checksum_type(self, checksum_type):
        """Sets the checksum_type of this DfsHdfsUpdateReqHdfs.

        checksum type of hdfs  # noqa: E501

        :param checksum_type: The checksum_type of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :type: str
        """

        self._checksum_type = checksum_type

    @property
    def path(self):
        """Gets the path of this DfsHdfsUpdateReqHdfs.  # noqa: E501

        path of hdfs  # noqa: E501

        :return: The path of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsHdfsUpdateReqHdfs.

        path of hdfs  # noqa: E501

        :param path: The path of this DfsHdfsUpdateReqHdfs.  # noqa: E501
        :type: str
        """

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsHdfsUpdateReqHdfs):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
