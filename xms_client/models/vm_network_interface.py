# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.port_map_pair import PortMapPair  # noqa: F401,E501
# from xms_client.models.virtual_machine_nestview import VirtualMachineNestview  # noqa: F401,E501
# from xms_client.models.vm_network_interface_nestview import VMNetworkInterfaceNestview  # noqa: F401,E501


class VMNetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'gateway': 'str',
        'id': 'int',
        'ip_address': 'str',
        'mac_address': 'str',
        'mask': 'int',
        'master': 'VMNetworkInterfaceNestview',
        'name': 'str',
        'nat_config': 'list[PortMapPair]',
        'network_type': 'str',
        'pci_address': 'str',
        'type': 'str',
        'update': 'datetime',
        'vm': 'VirtualMachineNestview'
    }

    attribute_map = {
        'create': 'create',
        'gateway': 'gateway',
        'id': 'id',
        'ip_address': 'ip_address',
        'mac_address': 'mac_address',
        'mask': 'mask',
        'master': 'master',
        'name': 'name',
        'nat_config': 'nat_config',
        'network_type': 'network_type',
        'pci_address': 'pci_address',
        'type': 'type',
        'update': 'update',
        'vm': 'vm'
    }

    def __init__(self, create=None, gateway=None, id=None, ip_address=None, mac_address=None, mask=None, master=None, name=None, nat_config=None, network_type=None, pci_address=None, type=None, update=None, vm=None):  # noqa: E501
        """VMNetworkInterface - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._gateway = None
        self._id = None
        self._ip_address = None
        self._mac_address = None
        self._mask = None
        self._master = None
        self._name = None
        self._nat_config = None
        self._network_type = None
        self._pci_address = None
        self._type = None
        self._update = None
        self._vm = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if gateway is not None:
            self.gateway = gateway
        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if mac_address is not None:
            self.mac_address = mac_address
        if mask is not None:
            self.mask = mask
        if master is not None:
            self.master = master
        if name is not None:
            self.name = name
        if nat_config is not None:
            self.nat_config = nat_config
        if network_type is not None:
            self.network_type = network_type
        if pci_address is not None:
            self.pci_address = pci_address
        if type is not None:
            self.type = type
        if update is not None:
            self.update = update
        if vm is not None:
            self.vm = vm

    @property
    def create(self):
        """Gets the create of this VMNetworkInterface.  # noqa: E501


        :return: The create of this VMNetworkInterface.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this VMNetworkInterface.


        :param create: The create of this VMNetworkInterface.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def gateway(self):
        """Gets the gateway of this VMNetworkInterface.  # noqa: E501


        :return: The gateway of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this VMNetworkInterface.


        :param gateway: The gateway of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._gateway = gateway

    @property
    def id(self):
        """Gets the id of this VMNetworkInterface.  # noqa: E501


        :return: The id of this VMNetworkInterface.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this VMNetworkInterface.


        :param id: The id of this VMNetworkInterface.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this VMNetworkInterface.  # noqa: E501


        :return: The ip_address of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this VMNetworkInterface.


        :param ip_address: The ip_address of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def mac_address(self):
        """Gets the mac_address of this VMNetworkInterface.  # noqa: E501


        :return: The mac_address of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VMNetworkInterface.


        :param mac_address: The mac_address of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def mask(self):
        """Gets the mask of this VMNetworkInterface.  # noqa: E501


        :return: The mask of this VMNetworkInterface.  # noqa: E501
        :rtype: int
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this VMNetworkInterface.


        :param mask: The mask of this VMNetworkInterface.  # noqa: E501
        :type: int
        """

        self._mask = mask

    @property
    def master(self):
        """Gets the master of this VMNetworkInterface.  # noqa: E501


        :return: The master of this VMNetworkInterface.  # noqa: E501
        :rtype: VMNetworkInterfaceNestview
        """
        return self._master

    @master.setter
    def master(self, master):
        """Sets the master of this VMNetworkInterface.


        :param master: The master of this VMNetworkInterface.  # noqa: E501
        :type: VMNetworkInterfaceNestview
        """

        self._master = master

    @property
    def name(self):
        """Gets the name of this VMNetworkInterface.  # noqa: E501


        :return: The name of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VMNetworkInterface.


        :param name: The name of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nat_config(self):
        """Gets the nat_config of this VMNetworkInterface.  # noqa: E501


        :return: The nat_config of this VMNetworkInterface.  # noqa: E501
        :rtype: list[PortMapPair]
        """
        return self._nat_config

    @nat_config.setter
    def nat_config(self, nat_config):
        """Sets the nat_config of this VMNetworkInterface.


        :param nat_config: The nat_config of this VMNetworkInterface.  # noqa: E501
        :type: list[PortMapPair]
        """

        self._nat_config = nat_config

    @property
    def network_type(self):
        """Gets the network_type of this VMNetworkInterface.  # noqa: E501


        :return: The network_type of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._network_type

    @network_type.setter
    def network_type(self, network_type):
        """Sets the network_type of this VMNetworkInterface.


        :param network_type: The network_type of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._network_type = network_type

    @property
    def pci_address(self):
        """Gets the pci_address of this VMNetworkInterface.  # noqa: E501


        :return: The pci_address of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._pci_address

    @pci_address.setter
    def pci_address(self, pci_address):
        """Sets the pci_address of this VMNetworkInterface.


        :param pci_address: The pci_address of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._pci_address = pci_address

    @property
    def type(self):
        """Gets the type of this VMNetworkInterface.  # noqa: E501


        :return: The type of this VMNetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this VMNetworkInterface.


        :param type: The type of this VMNetworkInterface.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update(self):
        """Gets the update of this VMNetworkInterface.  # noqa: E501


        :return: The update of this VMNetworkInterface.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this VMNetworkInterface.


        :param update: The update of this VMNetworkInterface.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def vm(self):
        """Gets the vm of this VMNetworkInterface.  # noqa: E501


        :return: The vm of this VMNetworkInterface.  # noqa: E501
        :rtype: VirtualMachineNestview
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this VMNetworkInterface.


        :param vm: The vm of this VMNetworkInterface.  # noqa: E501
        :type: VirtualMachineNestview
        """

        self._vm = vm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VMNetworkInterface):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
