# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PoolStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_kbyte': 'int',
        'compress_ratio': 'float',
        'create': 'datetime',
        'creating_num': 'int',
        'data_kbyte': 'int',
        'degraded_num': 'int',
        'degraded_percent': 'float',
        'error_kbyte': 'int',
        'garbage_ratio': 'float',
        'healthy_num': 'int',
        'healthy_percent': 'float',
        'min_garbage_kbyte': 'int',
        'omap_total_kbyte': 'float',
        'omap_used_kbyte': 'float',
        'omap_used_percent': 'float',
        'read_bandwidth_kbyte': 'float',
        'read_iops': 'float',
        'read_latency_us': 'float',
        'recovery_bandwidth_kbyte': 'float',
        'recovery_iops': 'float',
        'recovery_num': 'int',
        'recovery_percent': 'float',
        'recovery_remain_second': 'int',
        'remove_bandwidth_kbyte': 'float',
        'remove_iops': 'float',
        'snap_kbyte': 'int',
        'total_bandwidth_kbyte': 'float',
        'total_iops': 'float',
        'total_kbyte': 'int',
        'unavailable_num': 'int',
        'unavailable_percent': 'float',
        'used_kbyte': 'int',
        'used_percent': 'float',
        'water_level': 'float',
        'write_bandwidth_kbyte': 'float',
        'write_cache_kbyte': 'float',
        'write_iops': 'float',
        'write_latency_us': 'float'
    }

    attribute_map = {
        'actual_kbyte': 'actual_kbyte',
        'compress_ratio': 'compress_ratio',
        'create': 'create',
        'creating_num': 'creating_num',
        'data_kbyte': 'data_kbyte',
        'degraded_num': 'degraded_num',
        'degraded_percent': 'degraded_percent',
        'error_kbyte': 'error_kbyte',
        'garbage_ratio': 'garbage_ratio',
        'healthy_num': 'healthy_num',
        'healthy_percent': 'healthy_percent',
        'min_garbage_kbyte': 'min_garbage_kbyte',
        'omap_total_kbyte': 'omap_total_kbyte',
        'omap_used_kbyte': 'omap_used_kbyte',
        'omap_used_percent': 'omap_used_percent',
        'read_bandwidth_kbyte': 'read_bandwidth_kbyte',
        'read_iops': 'read_iops',
        'read_latency_us': 'read_latency_us',
        'recovery_bandwidth_kbyte': 'recovery_bandwidth_kbyte',
        'recovery_iops': 'recovery_iops',
        'recovery_num': 'recovery_num',
        'recovery_percent': 'recovery_percent',
        'recovery_remain_second': 'recovery_remain_second',
        'remove_bandwidth_kbyte': 'remove_bandwidth_kbyte',
        'remove_iops': 'remove_iops',
        'snap_kbyte': 'snap_kbyte',
        'total_bandwidth_kbyte': 'total_bandwidth_kbyte',
        'total_iops': 'total_iops',
        'total_kbyte': 'total_kbyte',
        'unavailable_num': 'unavailable_num',
        'unavailable_percent': 'unavailable_percent',
        'used_kbyte': 'used_kbyte',
        'used_percent': 'used_percent',
        'water_level': 'water_level',
        'write_bandwidth_kbyte': 'write_bandwidth_kbyte',
        'write_cache_kbyte': 'write_cache_kbyte',
        'write_iops': 'write_iops',
        'write_latency_us': 'write_latency_us'
    }

    def __init__(self, actual_kbyte=None, compress_ratio=None, create=None, creating_num=None, data_kbyte=None, degraded_num=None, degraded_percent=None, error_kbyte=None, garbage_ratio=None, healthy_num=None, healthy_percent=None, min_garbage_kbyte=None, omap_total_kbyte=None, omap_used_kbyte=None, omap_used_percent=None, read_bandwidth_kbyte=None, read_iops=None, read_latency_us=None, recovery_bandwidth_kbyte=None, recovery_iops=None, recovery_num=None, recovery_percent=None, recovery_remain_second=None, remove_bandwidth_kbyte=None, remove_iops=None, snap_kbyte=None, total_bandwidth_kbyte=None, total_iops=None, total_kbyte=None, unavailable_num=None, unavailable_percent=None, used_kbyte=None, used_percent=None, water_level=None, write_bandwidth_kbyte=None, write_cache_kbyte=None, write_iops=None, write_latency_us=None):  # noqa: E501
        """PoolStat - a model defined in Swagger"""  # noqa: E501

        self._actual_kbyte = None
        self._compress_ratio = None
        self._create = None
        self._creating_num = None
        self._data_kbyte = None
        self._degraded_num = None
        self._degraded_percent = None
        self._error_kbyte = None
        self._garbage_ratio = None
        self._healthy_num = None
        self._healthy_percent = None
        self._min_garbage_kbyte = None
        self._omap_total_kbyte = None
        self._omap_used_kbyte = None
        self._omap_used_percent = None
        self._read_bandwidth_kbyte = None
        self._read_iops = None
        self._read_latency_us = None
        self._recovery_bandwidth_kbyte = None
        self._recovery_iops = None
        self._recovery_num = None
        self._recovery_percent = None
        self._recovery_remain_second = None
        self._remove_bandwidth_kbyte = None
        self._remove_iops = None
        self._snap_kbyte = None
        self._total_bandwidth_kbyte = None
        self._total_iops = None
        self._total_kbyte = None
        self._unavailable_num = None
        self._unavailable_percent = None
        self._used_kbyte = None
        self._used_percent = None
        self._water_level = None
        self._write_bandwidth_kbyte = None
        self._write_cache_kbyte = None
        self._write_iops = None
        self._write_latency_us = None
        self.discriminator = None

        if actual_kbyte is not None:
            self.actual_kbyte = actual_kbyte
        if compress_ratio is not None:
            self.compress_ratio = compress_ratio
        if create is not None:
            self.create = create
        if creating_num is not None:
            self.creating_num = creating_num
        if data_kbyte is not None:
            self.data_kbyte = data_kbyte
        if degraded_num is not None:
            self.degraded_num = degraded_num
        if degraded_percent is not None:
            self.degraded_percent = degraded_percent
        if error_kbyte is not None:
            self.error_kbyte = error_kbyte
        if garbage_ratio is not None:
            self.garbage_ratio = garbage_ratio
        if healthy_num is not None:
            self.healthy_num = healthy_num
        if healthy_percent is not None:
            self.healthy_percent = healthy_percent
        if min_garbage_kbyte is not None:
            self.min_garbage_kbyte = min_garbage_kbyte
        if omap_total_kbyte is not None:
            self.omap_total_kbyte = omap_total_kbyte
        if omap_used_kbyte is not None:
            self.omap_used_kbyte = omap_used_kbyte
        if omap_used_percent is not None:
            self.omap_used_percent = omap_used_percent
        if read_bandwidth_kbyte is not None:
            self.read_bandwidth_kbyte = read_bandwidth_kbyte
        if read_iops is not None:
            self.read_iops = read_iops
        if read_latency_us is not None:
            self.read_latency_us = read_latency_us
        if recovery_bandwidth_kbyte is not None:
            self.recovery_bandwidth_kbyte = recovery_bandwidth_kbyte
        if recovery_iops is not None:
            self.recovery_iops = recovery_iops
        if recovery_num is not None:
            self.recovery_num = recovery_num
        if recovery_percent is not None:
            self.recovery_percent = recovery_percent
        if recovery_remain_second is not None:
            self.recovery_remain_second = recovery_remain_second
        if remove_bandwidth_kbyte is not None:
            self.remove_bandwidth_kbyte = remove_bandwidth_kbyte
        if remove_iops is not None:
            self.remove_iops = remove_iops
        if snap_kbyte is not None:
            self.snap_kbyte = snap_kbyte
        if total_bandwidth_kbyte is not None:
            self.total_bandwidth_kbyte = total_bandwidth_kbyte
        if total_iops is not None:
            self.total_iops = total_iops
        if total_kbyte is not None:
            self.total_kbyte = total_kbyte
        if unavailable_num is not None:
            self.unavailable_num = unavailable_num
        if unavailable_percent is not None:
            self.unavailable_percent = unavailable_percent
        if used_kbyte is not None:
            self.used_kbyte = used_kbyte
        if used_percent is not None:
            self.used_percent = used_percent
        if water_level is not None:
            self.water_level = water_level
        if write_bandwidth_kbyte is not None:
            self.write_bandwidth_kbyte = write_bandwidth_kbyte
        if write_cache_kbyte is not None:
            self.write_cache_kbyte = write_cache_kbyte
        if write_iops is not None:
            self.write_iops = write_iops
        if write_latency_us is not None:
            self.write_latency_us = write_latency_us

    @property
    def actual_kbyte(self):
        """Gets the actual_kbyte of this PoolStat.  # noqa: E501


        :return: The actual_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._actual_kbyte

    @actual_kbyte.setter
    def actual_kbyte(self, actual_kbyte):
        """Sets the actual_kbyte of this PoolStat.


        :param actual_kbyte: The actual_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._actual_kbyte = actual_kbyte

    @property
    def compress_ratio(self):
        """Gets the compress_ratio of this PoolStat.  # noqa: E501


        :return: The compress_ratio of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._compress_ratio

    @compress_ratio.setter
    def compress_ratio(self, compress_ratio):
        """Sets the compress_ratio of this PoolStat.


        :param compress_ratio: The compress_ratio of this PoolStat.  # noqa: E501
        :type: float
        """

        self._compress_ratio = compress_ratio

    @property
    def create(self):
        """Gets the create of this PoolStat.  # noqa: E501


        :return: The create of this PoolStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this PoolStat.


        :param create: The create of this PoolStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def creating_num(self):
        """Gets the creating_num of this PoolStat.  # noqa: E501


        :return: The creating_num of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._creating_num

    @creating_num.setter
    def creating_num(self, creating_num):
        """Sets the creating_num of this PoolStat.


        :param creating_num: The creating_num of this PoolStat.  # noqa: E501
        :type: int
        """

        self._creating_num = creating_num

    @property
    def data_kbyte(self):
        """Gets the data_kbyte of this PoolStat.  # noqa: E501


        :return: The data_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._data_kbyte

    @data_kbyte.setter
    def data_kbyte(self, data_kbyte):
        """Sets the data_kbyte of this PoolStat.


        :param data_kbyte: The data_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._data_kbyte = data_kbyte

    @property
    def degraded_num(self):
        """Gets the degraded_num of this PoolStat.  # noqa: E501


        :return: The degraded_num of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._degraded_num

    @degraded_num.setter
    def degraded_num(self, degraded_num):
        """Sets the degraded_num of this PoolStat.


        :param degraded_num: The degraded_num of this PoolStat.  # noqa: E501
        :type: int
        """

        self._degraded_num = degraded_num

    @property
    def degraded_percent(self):
        """Gets the degraded_percent of this PoolStat.  # noqa: E501


        :return: The degraded_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._degraded_percent

    @degraded_percent.setter
    def degraded_percent(self, degraded_percent):
        """Sets the degraded_percent of this PoolStat.


        :param degraded_percent: The degraded_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._degraded_percent = degraded_percent

    @property
    def error_kbyte(self):
        """Gets the error_kbyte of this PoolStat.  # noqa: E501


        :return: The error_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._error_kbyte

    @error_kbyte.setter
    def error_kbyte(self, error_kbyte):
        """Sets the error_kbyte of this PoolStat.


        :param error_kbyte: The error_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._error_kbyte = error_kbyte

    @property
    def garbage_ratio(self):
        """Gets the garbage_ratio of this PoolStat.  # noqa: E501


        :return: The garbage_ratio of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._garbage_ratio

    @garbage_ratio.setter
    def garbage_ratio(self, garbage_ratio):
        """Sets the garbage_ratio of this PoolStat.


        :param garbage_ratio: The garbage_ratio of this PoolStat.  # noqa: E501
        :type: float
        """

        self._garbage_ratio = garbage_ratio

    @property
    def healthy_num(self):
        """Gets the healthy_num of this PoolStat.  # noqa: E501


        :return: The healthy_num of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._healthy_num

    @healthy_num.setter
    def healthy_num(self, healthy_num):
        """Sets the healthy_num of this PoolStat.


        :param healthy_num: The healthy_num of this PoolStat.  # noqa: E501
        :type: int
        """

        self._healthy_num = healthy_num

    @property
    def healthy_percent(self):
        """Gets the healthy_percent of this PoolStat.  # noqa: E501


        :return: The healthy_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._healthy_percent

    @healthy_percent.setter
    def healthy_percent(self, healthy_percent):
        """Sets the healthy_percent of this PoolStat.


        :param healthy_percent: The healthy_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._healthy_percent = healthy_percent

    @property
    def min_garbage_kbyte(self):
        """Gets the min_garbage_kbyte of this PoolStat.  # noqa: E501

        garbage size, for tier pool  # noqa: E501

        :return: The min_garbage_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._min_garbage_kbyte

    @min_garbage_kbyte.setter
    def min_garbage_kbyte(self, min_garbage_kbyte):
        """Sets the min_garbage_kbyte of this PoolStat.

        garbage size, for tier pool  # noqa: E501

        :param min_garbage_kbyte: The min_garbage_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._min_garbage_kbyte = min_garbage_kbyte

    @property
    def omap_total_kbyte(self):
        """Gets the omap_total_kbyte of this PoolStat.  # noqa: E501


        :return: The omap_total_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._omap_total_kbyte

    @omap_total_kbyte.setter
    def omap_total_kbyte(self, omap_total_kbyte):
        """Sets the omap_total_kbyte of this PoolStat.


        :param omap_total_kbyte: The omap_total_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._omap_total_kbyte = omap_total_kbyte

    @property
    def omap_used_kbyte(self):
        """Gets the omap_used_kbyte of this PoolStat.  # noqa: E501


        :return: The omap_used_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._omap_used_kbyte

    @omap_used_kbyte.setter
    def omap_used_kbyte(self, omap_used_kbyte):
        """Sets the omap_used_kbyte of this PoolStat.


        :param omap_used_kbyte: The omap_used_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._omap_used_kbyte = omap_used_kbyte

    @property
    def omap_used_percent(self):
        """Gets the omap_used_percent of this PoolStat.  # noqa: E501


        :return: The omap_used_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._omap_used_percent

    @omap_used_percent.setter
    def omap_used_percent(self, omap_used_percent):
        """Sets the omap_used_percent of this PoolStat.


        :param omap_used_percent: The omap_used_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._omap_used_percent = omap_used_percent

    @property
    def read_bandwidth_kbyte(self):
        """Gets the read_bandwidth_kbyte of this PoolStat.  # noqa: E501


        :return: The read_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._read_bandwidth_kbyte

    @read_bandwidth_kbyte.setter
    def read_bandwidth_kbyte(self, read_bandwidth_kbyte):
        """Sets the read_bandwidth_kbyte of this PoolStat.


        :param read_bandwidth_kbyte: The read_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._read_bandwidth_kbyte = read_bandwidth_kbyte

    @property
    def read_iops(self):
        """Gets the read_iops of this PoolStat.  # noqa: E501


        :return: The read_iops of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._read_iops

    @read_iops.setter
    def read_iops(self, read_iops):
        """Sets the read_iops of this PoolStat.


        :param read_iops: The read_iops of this PoolStat.  # noqa: E501
        :type: float
        """

        self._read_iops = read_iops

    @property
    def read_latency_us(self):
        """Gets the read_latency_us of this PoolStat.  # noqa: E501


        :return: The read_latency_us of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._read_latency_us

    @read_latency_us.setter
    def read_latency_us(self, read_latency_us):
        """Sets the read_latency_us of this PoolStat.


        :param read_latency_us: The read_latency_us of this PoolStat.  # noqa: E501
        :type: float
        """

        self._read_latency_us = read_latency_us

    @property
    def recovery_bandwidth_kbyte(self):
        """Gets the recovery_bandwidth_kbyte of this PoolStat.  # noqa: E501


        :return: The recovery_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_bandwidth_kbyte

    @recovery_bandwidth_kbyte.setter
    def recovery_bandwidth_kbyte(self, recovery_bandwidth_kbyte):
        """Sets the recovery_bandwidth_kbyte of this PoolStat.


        :param recovery_bandwidth_kbyte: The recovery_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._recovery_bandwidth_kbyte = recovery_bandwidth_kbyte

    @property
    def recovery_iops(self):
        """Gets the recovery_iops of this PoolStat.  # noqa: E501


        :return: The recovery_iops of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_iops

    @recovery_iops.setter
    def recovery_iops(self, recovery_iops):
        """Sets the recovery_iops of this PoolStat.


        :param recovery_iops: The recovery_iops of this PoolStat.  # noqa: E501
        :type: float
        """

        self._recovery_iops = recovery_iops

    @property
    def recovery_num(self):
        """Gets the recovery_num of this PoolStat.  # noqa: E501


        :return: The recovery_num of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_num

    @recovery_num.setter
    def recovery_num(self, recovery_num):
        """Sets the recovery_num of this PoolStat.


        :param recovery_num: The recovery_num of this PoolStat.  # noqa: E501
        :type: int
        """

        self._recovery_num = recovery_num

    @property
    def recovery_percent(self):
        """Gets the recovery_percent of this PoolStat.  # noqa: E501


        :return: The recovery_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._recovery_percent

    @recovery_percent.setter
    def recovery_percent(self, recovery_percent):
        """Sets the recovery_percent of this PoolStat.


        :param recovery_percent: The recovery_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._recovery_percent = recovery_percent

    @property
    def recovery_remain_second(self):
        """Gets the recovery_remain_second of this PoolStat.  # noqa: E501


        :return: The recovery_remain_second of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._recovery_remain_second

    @recovery_remain_second.setter
    def recovery_remain_second(self, recovery_remain_second):
        """Sets the recovery_remain_second of this PoolStat.


        :param recovery_remain_second: The recovery_remain_second of this PoolStat.  # noqa: E501
        :type: int
        """

        self._recovery_remain_second = recovery_remain_second

    @property
    def remove_bandwidth_kbyte(self):
        """Gets the remove_bandwidth_kbyte of this PoolStat.  # noqa: E501


        :return: The remove_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._remove_bandwidth_kbyte

    @remove_bandwidth_kbyte.setter
    def remove_bandwidth_kbyte(self, remove_bandwidth_kbyte):
        """Sets the remove_bandwidth_kbyte of this PoolStat.


        :param remove_bandwidth_kbyte: The remove_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._remove_bandwidth_kbyte = remove_bandwidth_kbyte

    @property
    def remove_iops(self):
        """Gets the remove_iops of this PoolStat.  # noqa: E501


        :return: The remove_iops of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._remove_iops

    @remove_iops.setter
    def remove_iops(self, remove_iops):
        """Sets the remove_iops of this PoolStat.


        :param remove_iops: The remove_iops of this PoolStat.  # noqa: E501
        :type: float
        """

        self._remove_iops = remove_iops

    @property
    def snap_kbyte(self):
        """Gets the snap_kbyte of this PoolStat.  # noqa: E501


        :return: The snap_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._snap_kbyte

    @snap_kbyte.setter
    def snap_kbyte(self, snap_kbyte):
        """Sets the snap_kbyte of this PoolStat.


        :param snap_kbyte: The snap_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._snap_kbyte = snap_kbyte

    @property
    def total_bandwidth_kbyte(self):
        """Gets the total_bandwidth_kbyte of this PoolStat.  # noqa: E501


        :return: The total_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._total_bandwidth_kbyte

    @total_bandwidth_kbyte.setter
    def total_bandwidth_kbyte(self, total_bandwidth_kbyte):
        """Sets the total_bandwidth_kbyte of this PoolStat.


        :param total_bandwidth_kbyte: The total_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._total_bandwidth_kbyte = total_bandwidth_kbyte

    @property
    def total_iops(self):
        """Gets the total_iops of this PoolStat.  # noqa: E501


        :return: The total_iops of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._total_iops

    @total_iops.setter
    def total_iops(self, total_iops):
        """Sets the total_iops of this PoolStat.


        :param total_iops: The total_iops of this PoolStat.  # noqa: E501
        :type: float
        """

        self._total_iops = total_iops

    @property
    def total_kbyte(self):
        """Gets the total_kbyte of this PoolStat.  # noqa: E501


        :return: The total_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._total_kbyte

    @total_kbyte.setter
    def total_kbyte(self, total_kbyte):
        """Sets the total_kbyte of this PoolStat.


        :param total_kbyte: The total_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._total_kbyte = total_kbyte

    @property
    def unavailable_num(self):
        """Gets the unavailable_num of this PoolStat.  # noqa: E501


        :return: The unavailable_num of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._unavailable_num

    @unavailable_num.setter
    def unavailable_num(self, unavailable_num):
        """Sets the unavailable_num of this PoolStat.


        :param unavailable_num: The unavailable_num of this PoolStat.  # noqa: E501
        :type: int
        """

        self._unavailable_num = unavailable_num

    @property
    def unavailable_percent(self):
        """Gets the unavailable_percent of this PoolStat.  # noqa: E501


        :return: The unavailable_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._unavailable_percent

    @unavailable_percent.setter
    def unavailable_percent(self, unavailable_percent):
        """Sets the unavailable_percent of this PoolStat.


        :param unavailable_percent: The unavailable_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._unavailable_percent = unavailable_percent

    @property
    def used_kbyte(self):
        """Gets the used_kbyte of this PoolStat.  # noqa: E501


        :return: The used_kbyte of this PoolStat.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte

    @used_kbyte.setter
    def used_kbyte(self, used_kbyte):
        """Sets the used_kbyte of this PoolStat.


        :param used_kbyte: The used_kbyte of this PoolStat.  # noqa: E501
        :type: int
        """

        self._used_kbyte = used_kbyte

    @property
    def used_percent(self):
        """Gets the used_percent of this PoolStat.  # noqa: E501


        :return: The used_percent of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._used_percent

    @used_percent.setter
    def used_percent(self, used_percent):
        """Sets the used_percent of this PoolStat.


        :param used_percent: The used_percent of this PoolStat.  # noqa: E501
        :type: float
        """

        self._used_percent = used_percent

    @property
    def water_level(self):
        """Gets the water_level of this PoolStat.  # noqa: E501


        :return: The water_level of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._water_level

    @water_level.setter
    def water_level(self, water_level):
        """Sets the water_level of this PoolStat.


        :param water_level: The water_level of this PoolStat.  # noqa: E501
        :type: float
        """

        self._water_level = water_level

    @property
    def write_bandwidth_kbyte(self):
        """Gets the write_bandwidth_kbyte of this PoolStat.  # noqa: E501


        :return: The write_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._write_bandwidth_kbyte

    @write_bandwidth_kbyte.setter
    def write_bandwidth_kbyte(self, write_bandwidth_kbyte):
        """Sets the write_bandwidth_kbyte of this PoolStat.


        :param write_bandwidth_kbyte: The write_bandwidth_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._write_bandwidth_kbyte = write_bandwidth_kbyte

    @property
    def write_cache_kbyte(self):
        """Gets the write_cache_kbyte of this PoolStat.  # noqa: E501


        :return: The write_cache_kbyte of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._write_cache_kbyte

    @write_cache_kbyte.setter
    def write_cache_kbyte(self, write_cache_kbyte):
        """Sets the write_cache_kbyte of this PoolStat.


        :param write_cache_kbyte: The write_cache_kbyte of this PoolStat.  # noqa: E501
        :type: float
        """

        self._write_cache_kbyte = write_cache_kbyte

    @property
    def write_iops(self):
        """Gets the write_iops of this PoolStat.  # noqa: E501


        :return: The write_iops of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._write_iops

    @write_iops.setter
    def write_iops(self, write_iops):
        """Sets the write_iops of this PoolStat.


        :param write_iops: The write_iops of this PoolStat.  # noqa: E501
        :type: float
        """

        self._write_iops = write_iops

    @property
    def write_latency_us(self):
        """Gets the write_latency_us of this PoolStat.  # noqa: E501


        :return: The write_latency_us of this PoolStat.  # noqa: E501
        :rtype: float
        """
        return self._write_latency_us

    @write_latency_us.setter
    def write_latency_us(self, write_latency_us):
        """Sets the write_latency_us of this PoolStat.


        :param write_latency_us: The write_latency_us of this PoolStat.  # noqa: E501
        :type: float
        """

        self._write_latency_us = write_latency_us

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
