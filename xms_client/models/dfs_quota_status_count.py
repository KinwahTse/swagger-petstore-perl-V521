# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsQuotaStatusCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'int',
        'building_error': 'int',
        'deleting_error': 'int',
        'error': 'int',
        'exceed_soft': 'int',
        'exceed_suggestion': 'int',
        'write_inhibit': 'int'
    }

    attribute_map = {
        'active': 'active',
        'building_error': 'building_error',
        'deleting_error': 'deleting_error',
        'error': 'error',
        'exceed_soft': 'exceed_soft',
        'exceed_suggestion': 'exceed_suggestion',
        'write_inhibit': 'write_inhibit'
    }

    def __init__(self, active=None, building_error=None, deleting_error=None, error=None, exceed_soft=None, exceed_suggestion=None, write_inhibit=None):  # noqa: E501
        """DfsQuotaStatusCount - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._building_error = None
        self._deleting_error = None
        self._error = None
        self._exceed_soft = None
        self._exceed_suggestion = None
        self._write_inhibit = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if building_error is not None:
            self.building_error = building_error
        if deleting_error is not None:
            self.deleting_error = deleting_error
        if error is not None:
            self.error = error
        if exceed_soft is not None:
            self.exceed_soft = exceed_soft
        if exceed_suggestion is not None:
            self.exceed_suggestion = exceed_suggestion
        if write_inhibit is not None:
            self.write_inhibit = write_inhibit

    @property
    def active(self):
        """Gets the active of this DfsQuotaStatusCount.  # noqa: E501


        :return: The active of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DfsQuotaStatusCount.


        :param active: The active of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._active = active

    @property
    def building_error(self):
        """Gets the building_error of this DfsQuotaStatusCount.  # noqa: E501


        :return: The building_error of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._building_error

    @building_error.setter
    def building_error(self, building_error):
        """Sets the building_error of this DfsQuotaStatusCount.


        :param building_error: The building_error of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._building_error = building_error

    @property
    def deleting_error(self):
        """Gets the deleting_error of this DfsQuotaStatusCount.  # noqa: E501


        :return: The deleting_error of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._deleting_error

    @deleting_error.setter
    def deleting_error(self, deleting_error):
        """Sets the deleting_error of this DfsQuotaStatusCount.


        :param deleting_error: The deleting_error of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._deleting_error = deleting_error

    @property
    def error(self):
        """Gets the error of this DfsQuotaStatusCount.  # noqa: E501


        :return: The error of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DfsQuotaStatusCount.


        :param error: The error of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def exceed_soft(self):
        """Gets the exceed_soft of this DfsQuotaStatusCount.  # noqa: E501


        :return: The exceed_soft of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._exceed_soft

    @exceed_soft.setter
    def exceed_soft(self, exceed_soft):
        """Sets the exceed_soft of this DfsQuotaStatusCount.


        :param exceed_soft: The exceed_soft of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._exceed_soft = exceed_soft

    @property
    def exceed_suggestion(self):
        """Gets the exceed_suggestion of this DfsQuotaStatusCount.  # noqa: E501


        :return: The exceed_suggestion of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._exceed_suggestion

    @exceed_suggestion.setter
    def exceed_suggestion(self, exceed_suggestion):
        """Sets the exceed_suggestion of this DfsQuotaStatusCount.


        :param exceed_suggestion: The exceed_suggestion of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._exceed_suggestion = exceed_suggestion

    @property
    def write_inhibit(self):
        """Gets the write_inhibit of this DfsQuotaStatusCount.  # noqa: E501


        :return: The write_inhibit of this DfsQuotaStatusCount.  # noqa: E501
        :rtype: int
        """
        return self._write_inhibit

    @write_inhibit.setter
    def write_inhibit(self, write_inhibit):
        """Sets the write_inhibit of this DfsQuotaStatusCount.


        :param write_inhibit: The write_inhibit of this DfsQuotaStatusCount.  # noqa: E501
        :type: int
        """

        self._write_inhibit = write_inhibit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaStatusCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
