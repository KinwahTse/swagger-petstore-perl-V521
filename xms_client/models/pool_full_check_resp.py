# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PoolFullCheckResp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'backfill_full_pool_ids': 'list[int]',
        'full_pool_ids': 'list[int]',
        'near_full_pool_ids': 'list[int]'
    }

    attribute_map = {
        'backfill_full_pool_ids': 'backfill_full_pool_ids',
        'full_pool_ids': 'full_pool_ids',
        'near_full_pool_ids': 'near_full_pool_ids'
    }

    def __init__(self, backfill_full_pool_ids=None, full_pool_ids=None, near_full_pool_ids=None):  # noqa: E501
        """PoolFullCheckResp - a model defined in Swagger"""  # noqa: E501

        self._backfill_full_pool_ids = None
        self._full_pool_ids = None
        self._near_full_pool_ids = None
        self.discriminator = None

        if backfill_full_pool_ids is not None:
            self.backfill_full_pool_ids = backfill_full_pool_ids
        if full_pool_ids is not None:
            self.full_pool_ids = full_pool_ids
        if near_full_pool_ids is not None:
            self.near_full_pool_ids = near_full_pool_ids

    @property
    def backfill_full_pool_ids(self):
        """Gets the backfill_full_pool_ids of this PoolFullCheckResp.  # noqa: E501


        :return: The backfill_full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :rtype: list[int]
        """
        return self._backfill_full_pool_ids

    @backfill_full_pool_ids.setter
    def backfill_full_pool_ids(self, backfill_full_pool_ids):
        """Sets the backfill_full_pool_ids of this PoolFullCheckResp.


        :param backfill_full_pool_ids: The backfill_full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :type: list[int]
        """

        self._backfill_full_pool_ids = backfill_full_pool_ids

    @property
    def full_pool_ids(self):
        """Gets the full_pool_ids of this PoolFullCheckResp.  # noqa: E501


        :return: The full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :rtype: list[int]
        """
        return self._full_pool_ids

    @full_pool_ids.setter
    def full_pool_ids(self, full_pool_ids):
        """Sets the full_pool_ids of this PoolFullCheckResp.


        :param full_pool_ids: The full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :type: list[int]
        """

        self._full_pool_ids = full_pool_ids

    @property
    def near_full_pool_ids(self):
        """Gets the near_full_pool_ids of this PoolFullCheckResp.  # noqa: E501


        :return: The near_full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :rtype: list[int]
        """
        return self._near_full_pool_ids

    @near_full_pool_ids.setter
    def near_full_pool_ids(self, near_full_pool_ids):
        """Sets the near_full_pool_ids of this PoolFullCheckResp.


        :param near_full_pool_ids: The near_full_pool_ids of this PoolFullCheckResp.  # noqa: E501
        :type: list[int]
        """

        self._near_full_pool_ids = near_full_pool_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolFullCheckResp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
