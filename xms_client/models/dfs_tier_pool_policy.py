# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_tier_nestview import DfsTierNestview  # noqa: F401,E501
# from xms_client.models.pool_nestview import PoolNestview  # noqa: F401,E501


class DfsTierPoolPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'dfs_tier': 'DfsTierNestview',
        'id': 'int',
        'pool': 'PoolNestview',
        'threshold': 'int'
    }

    attribute_map = {
        'active': 'active',
        'dfs_tier': 'dfs_tier',
        'id': 'id',
        'pool': 'pool',
        'threshold': 'threshold'
    }

    def __init__(self, active=None, dfs_tier=None, id=None, pool=None, threshold=None):  # noqa: E501
        """DfsTierPoolPolicy - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._dfs_tier = None
        self._id = None
        self._pool = None
        self._threshold = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if dfs_tier is not None:
            self.dfs_tier = dfs_tier
        if id is not None:
            self.id = id
        if pool is not None:
            self.pool = pool
        if threshold is not None:
            self.threshold = threshold

    @property
    def active(self):
        """Gets the active of this DfsTierPoolPolicy.  # noqa: E501


        :return: The active of this DfsTierPoolPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this DfsTierPoolPolicy.


        :param active: The active of this DfsTierPoolPolicy.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def dfs_tier(self):
        """Gets the dfs_tier of this DfsTierPoolPolicy.  # noqa: E501


        :return: The dfs_tier of this DfsTierPoolPolicy.  # noqa: E501
        :rtype: DfsTierNestview
        """
        return self._dfs_tier

    @dfs_tier.setter
    def dfs_tier(self, dfs_tier):
        """Sets the dfs_tier of this DfsTierPoolPolicy.


        :param dfs_tier: The dfs_tier of this DfsTierPoolPolicy.  # noqa: E501
        :type: DfsTierNestview
        """

        self._dfs_tier = dfs_tier

    @property
    def id(self):
        """Gets the id of this DfsTierPoolPolicy.  # noqa: E501


        :return: The id of this DfsTierPoolPolicy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsTierPoolPolicy.


        :param id: The id of this DfsTierPoolPolicy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def pool(self):
        """Gets the pool of this DfsTierPoolPolicy.  # noqa: E501


        :return: The pool of this DfsTierPoolPolicy.  # noqa: E501
        :rtype: PoolNestview
        """
        return self._pool

    @pool.setter
    def pool(self, pool):
        """Sets the pool of this DfsTierPoolPolicy.


        :param pool: The pool of this DfsTierPoolPolicy.  # noqa: E501
        :type: PoolNestview
        """

        self._pool = pool

    @property
    def threshold(self):
        """Gets the threshold of this DfsTierPoolPolicy.  # noqa: E501


        :return: The threshold of this DfsTierPoolPolicy.  # noqa: E501
        :rtype: int
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold):
        """Sets the threshold of this DfsTierPoolPolicy.


        :param threshold: The threshold of this DfsTierPoolPolicy.  # noqa: E501
        :type: int
        """

        self._threshold = threshold

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsTierPoolPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
