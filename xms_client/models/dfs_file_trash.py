# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_trash import DfsTrash  # noqa: F401,E501


class DfsFileTrash(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dfs_trash': 'DfsTrash',
        'state': 'str'
    }

    attribute_map = {
        'dfs_trash': 'dfs_trash',
        'state': 'state'
    }

    def __init__(self, dfs_trash=None, state=None):  # noqa: E501
        """DfsFileTrash - a model defined in Swagger"""  # noqa: E501

        self._dfs_trash = None
        self._state = None
        self.discriminator = None

        if dfs_trash is not None:
            self.dfs_trash = dfs_trash
        if state is not None:
            self.state = state

    @property
    def dfs_trash(self):
        """Gets the dfs_trash of this DfsFileTrash.  # noqa: E501

        dfs trash resource  # noqa: E501

        :return: The dfs_trash of this DfsFileTrash.  # noqa: E501
        :rtype: DfsTrash
        """
        return self._dfs_trash

    @dfs_trash.setter
    def dfs_trash(self, dfs_trash):
        """Sets the dfs_trash of this DfsFileTrash.

        dfs trash resource  # noqa: E501

        :param dfs_trash: The dfs_trash of this DfsFileTrash.  # noqa: E501
        :type: DfsTrash
        """

        self._dfs_trash = dfs_trash

    @property
    def state(self):
        """Gets the state of this DfsFileTrash.  # noqa: E501

        trash state of file  # noqa: E501

        :return: The state of this DfsFileTrash.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DfsFileTrash.

        trash state of file  # noqa: E501

        :param state: The state of this DfsFileTrash.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsFileTrash):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
