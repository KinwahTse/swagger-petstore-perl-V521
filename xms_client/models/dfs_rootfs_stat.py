# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsRootfsStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create': 'datetime',
        'data_delete_bandwidth_kbyte': 'int',
        'data_delete_iops': 'int',
        'data_delete_latency_us': 'int',
        'data_read_bandwidth_kbyte': 'int',
        'data_read_iops': 'int',
        'data_read_latency_us': 'int',
        'data_write_bandwidth_kbyte': 'int',
        'data_write_iops': 'int',
        'data_write_latency_us': 'int',
        'meta_delete_iops': 'int',
        'meta_delete_latency_us': 'int',
        'meta_list_iops': 'int',
        'meta_list_latency_us': 'int',
        'meta_read_iops': 'int',
        'meta_read_latency_us': 'int',
        'meta_write_iops': 'int',
        'meta_write_latency_us': 'int'
    }

    attribute_map = {
        'create': 'create',
        'data_delete_bandwidth_kbyte': 'data_delete_bandwidth_kbyte',
        'data_delete_iops': 'data_delete_iops',
        'data_delete_latency_us': 'data_delete_latency_us',
        'data_read_bandwidth_kbyte': 'data_read_bandwidth_kbyte',
        'data_read_iops': 'data_read_iops',
        'data_read_latency_us': 'data_read_latency_us',
        'data_write_bandwidth_kbyte': 'data_write_bandwidth_kbyte',
        'data_write_iops': 'data_write_iops',
        'data_write_latency_us': 'data_write_latency_us',
        'meta_delete_iops': 'meta_delete_iops',
        'meta_delete_latency_us': 'meta_delete_latency_us',
        'meta_list_iops': 'meta_list_iops',
        'meta_list_latency_us': 'meta_list_latency_us',
        'meta_read_iops': 'meta_read_iops',
        'meta_read_latency_us': 'meta_read_latency_us',
        'meta_write_iops': 'meta_write_iops',
        'meta_write_latency_us': 'meta_write_latency_us'
    }

    def __init__(self, create=None, data_delete_bandwidth_kbyte=None, data_delete_iops=None, data_delete_latency_us=None, data_read_bandwidth_kbyte=None, data_read_iops=None, data_read_latency_us=None, data_write_bandwidth_kbyte=None, data_write_iops=None, data_write_latency_us=None, meta_delete_iops=None, meta_delete_latency_us=None, meta_list_iops=None, meta_list_latency_us=None, meta_read_iops=None, meta_read_latency_us=None, meta_write_iops=None, meta_write_latency_us=None):  # noqa: E501
        """DfsRootfsStat - a model defined in Swagger"""  # noqa: E501

        self._create = None
        self._data_delete_bandwidth_kbyte = None
        self._data_delete_iops = None
        self._data_delete_latency_us = None
        self._data_read_bandwidth_kbyte = None
        self._data_read_iops = None
        self._data_read_latency_us = None
        self._data_write_bandwidth_kbyte = None
        self._data_write_iops = None
        self._data_write_latency_us = None
        self._meta_delete_iops = None
        self._meta_delete_latency_us = None
        self._meta_list_iops = None
        self._meta_list_latency_us = None
        self._meta_read_iops = None
        self._meta_read_latency_us = None
        self._meta_write_iops = None
        self._meta_write_latency_us = None
        self.discriminator = None

        if create is not None:
            self.create = create
        if data_delete_bandwidth_kbyte is not None:
            self.data_delete_bandwidth_kbyte = data_delete_bandwidth_kbyte
        if data_delete_iops is not None:
            self.data_delete_iops = data_delete_iops
        if data_delete_latency_us is not None:
            self.data_delete_latency_us = data_delete_latency_us
        if data_read_bandwidth_kbyte is not None:
            self.data_read_bandwidth_kbyte = data_read_bandwidth_kbyte
        if data_read_iops is not None:
            self.data_read_iops = data_read_iops
        if data_read_latency_us is not None:
            self.data_read_latency_us = data_read_latency_us
        if data_write_bandwidth_kbyte is not None:
            self.data_write_bandwidth_kbyte = data_write_bandwidth_kbyte
        if data_write_iops is not None:
            self.data_write_iops = data_write_iops
        if data_write_latency_us is not None:
            self.data_write_latency_us = data_write_latency_us
        if meta_delete_iops is not None:
            self.meta_delete_iops = meta_delete_iops
        if meta_delete_latency_us is not None:
            self.meta_delete_latency_us = meta_delete_latency_us
        if meta_list_iops is not None:
            self.meta_list_iops = meta_list_iops
        if meta_list_latency_us is not None:
            self.meta_list_latency_us = meta_list_latency_us
        if meta_read_iops is not None:
            self.meta_read_iops = meta_read_iops
        if meta_read_latency_us is not None:
            self.meta_read_latency_us = meta_read_latency_us
        if meta_write_iops is not None:
            self.meta_write_iops = meta_write_iops
        if meta_write_latency_us is not None:
            self.meta_write_latency_us = meta_write_latency_us

    @property
    def create(self):
        """Gets the create of this DfsRootfsStat.  # noqa: E501


        :return: The create of this DfsRootfsStat.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsRootfsStat.


        :param create: The create of this DfsRootfsStat.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def data_delete_bandwidth_kbyte(self):
        """Gets the data_delete_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501


        :return: The data_delete_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_delete_bandwidth_kbyte

    @data_delete_bandwidth_kbyte.setter
    def data_delete_bandwidth_kbyte(self, data_delete_bandwidth_kbyte):
        """Sets the data_delete_bandwidth_kbyte of this DfsRootfsStat.


        :param data_delete_bandwidth_kbyte: The data_delete_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_delete_bandwidth_kbyte = data_delete_bandwidth_kbyte

    @property
    def data_delete_iops(self):
        """Gets the data_delete_iops of this DfsRootfsStat.  # noqa: E501


        :return: The data_delete_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_delete_iops

    @data_delete_iops.setter
    def data_delete_iops(self, data_delete_iops):
        """Sets the data_delete_iops of this DfsRootfsStat.


        :param data_delete_iops: The data_delete_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_delete_iops = data_delete_iops

    @property
    def data_delete_latency_us(self):
        """Gets the data_delete_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The data_delete_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_delete_latency_us

    @data_delete_latency_us.setter
    def data_delete_latency_us(self, data_delete_latency_us):
        """Sets the data_delete_latency_us of this DfsRootfsStat.


        :param data_delete_latency_us: The data_delete_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_delete_latency_us = data_delete_latency_us

    @property
    def data_read_bandwidth_kbyte(self):
        """Gets the data_read_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501


        :return: The data_read_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_read_bandwidth_kbyte

    @data_read_bandwidth_kbyte.setter
    def data_read_bandwidth_kbyte(self, data_read_bandwidth_kbyte):
        """Sets the data_read_bandwidth_kbyte of this DfsRootfsStat.


        :param data_read_bandwidth_kbyte: The data_read_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_read_bandwidth_kbyte = data_read_bandwidth_kbyte

    @property
    def data_read_iops(self):
        """Gets the data_read_iops of this DfsRootfsStat.  # noqa: E501


        :return: The data_read_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_read_iops

    @data_read_iops.setter
    def data_read_iops(self, data_read_iops):
        """Sets the data_read_iops of this DfsRootfsStat.


        :param data_read_iops: The data_read_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_read_iops = data_read_iops

    @property
    def data_read_latency_us(self):
        """Gets the data_read_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The data_read_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_read_latency_us

    @data_read_latency_us.setter
    def data_read_latency_us(self, data_read_latency_us):
        """Sets the data_read_latency_us of this DfsRootfsStat.


        :param data_read_latency_us: The data_read_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_read_latency_us = data_read_latency_us

    @property
    def data_write_bandwidth_kbyte(self):
        """Gets the data_write_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501


        :return: The data_write_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_write_bandwidth_kbyte

    @data_write_bandwidth_kbyte.setter
    def data_write_bandwidth_kbyte(self, data_write_bandwidth_kbyte):
        """Sets the data_write_bandwidth_kbyte of this DfsRootfsStat.


        :param data_write_bandwidth_kbyte: The data_write_bandwidth_kbyte of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_write_bandwidth_kbyte = data_write_bandwidth_kbyte

    @property
    def data_write_iops(self):
        """Gets the data_write_iops of this DfsRootfsStat.  # noqa: E501


        :return: The data_write_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_write_iops

    @data_write_iops.setter
    def data_write_iops(self, data_write_iops):
        """Sets the data_write_iops of this DfsRootfsStat.


        :param data_write_iops: The data_write_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_write_iops = data_write_iops

    @property
    def data_write_latency_us(self):
        """Gets the data_write_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The data_write_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._data_write_latency_us

    @data_write_latency_us.setter
    def data_write_latency_us(self, data_write_latency_us):
        """Sets the data_write_latency_us of this DfsRootfsStat.


        :param data_write_latency_us: The data_write_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._data_write_latency_us = data_write_latency_us

    @property
    def meta_delete_iops(self):
        """Gets the meta_delete_iops of this DfsRootfsStat.  # noqa: E501


        :return: The meta_delete_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_delete_iops

    @meta_delete_iops.setter
    def meta_delete_iops(self, meta_delete_iops):
        """Sets the meta_delete_iops of this DfsRootfsStat.


        :param meta_delete_iops: The meta_delete_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_delete_iops = meta_delete_iops

    @property
    def meta_delete_latency_us(self):
        """Gets the meta_delete_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The meta_delete_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_delete_latency_us

    @meta_delete_latency_us.setter
    def meta_delete_latency_us(self, meta_delete_latency_us):
        """Sets the meta_delete_latency_us of this DfsRootfsStat.


        :param meta_delete_latency_us: The meta_delete_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_delete_latency_us = meta_delete_latency_us

    @property
    def meta_list_iops(self):
        """Gets the meta_list_iops of this DfsRootfsStat.  # noqa: E501


        :return: The meta_list_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_list_iops

    @meta_list_iops.setter
    def meta_list_iops(self, meta_list_iops):
        """Sets the meta_list_iops of this DfsRootfsStat.


        :param meta_list_iops: The meta_list_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_list_iops = meta_list_iops

    @property
    def meta_list_latency_us(self):
        """Gets the meta_list_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The meta_list_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_list_latency_us

    @meta_list_latency_us.setter
    def meta_list_latency_us(self, meta_list_latency_us):
        """Sets the meta_list_latency_us of this DfsRootfsStat.


        :param meta_list_latency_us: The meta_list_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_list_latency_us = meta_list_latency_us

    @property
    def meta_read_iops(self):
        """Gets the meta_read_iops of this DfsRootfsStat.  # noqa: E501


        :return: The meta_read_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_read_iops

    @meta_read_iops.setter
    def meta_read_iops(self, meta_read_iops):
        """Sets the meta_read_iops of this DfsRootfsStat.


        :param meta_read_iops: The meta_read_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_read_iops = meta_read_iops

    @property
    def meta_read_latency_us(self):
        """Gets the meta_read_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The meta_read_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_read_latency_us

    @meta_read_latency_us.setter
    def meta_read_latency_us(self, meta_read_latency_us):
        """Sets the meta_read_latency_us of this DfsRootfsStat.


        :param meta_read_latency_us: The meta_read_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_read_latency_us = meta_read_latency_us

    @property
    def meta_write_iops(self):
        """Gets the meta_write_iops of this DfsRootfsStat.  # noqa: E501


        :return: The meta_write_iops of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_write_iops

    @meta_write_iops.setter
    def meta_write_iops(self, meta_write_iops):
        """Sets the meta_write_iops of this DfsRootfsStat.


        :param meta_write_iops: The meta_write_iops of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_write_iops = meta_write_iops

    @property
    def meta_write_latency_us(self):
        """Gets the meta_write_latency_us of this DfsRootfsStat.  # noqa: E501


        :return: The meta_write_latency_us of this DfsRootfsStat.  # noqa: E501
        :rtype: int
        """
        return self._meta_write_latency_us

    @meta_write_latency_us.setter
    def meta_write_latency_us(self, meta_write_latency_us):
        """Sets the meta_write_latency_us of this DfsRootfsStat.


        :param meta_write_latency_us: The meta_write_latency_us of this DfsRootfsStat.  # noqa: E501
        :type: int
        """

        self._meta_write_latency_us = meta_write_latency_us

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsRootfsStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
