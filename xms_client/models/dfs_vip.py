# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_group_nestview import DfsGatewayGroupNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_nestview import DfsGatewayNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_zone_nestview import DfsGatewayZoneNestview  # noqa: F401,E501


class DfsVIP(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'dfs_gateway_group': 'DfsGatewayGroupNestview',
        'dfs_gateway_zone': 'DfsGatewayZoneNestview',
        'id': 'int',
        'primary_gateway': 'DfsGatewayNestview',
        'update': 'datetime',
        'vip': 'str',
        'vip_mask': 'int'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'create': 'create',
        'dfs_gateway_group': 'dfs_gateway_group',
        'dfs_gateway_zone': 'dfs_gateway_zone',
        'id': 'id',
        'primary_gateway': 'primary_gateway',
        'update': 'update',
        'vip': 'vip',
        'vip_mask': 'vip_mask'
    }

    def __init__(self, action_status=None, cluster=None, create=None, dfs_gateway_group=None, dfs_gateway_zone=None, id=None, primary_gateway=None, update=None, vip=None, vip_mask=None):  # noqa: E501
        """DfsVIP - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._create = None
        self._dfs_gateway_group = None
        self._dfs_gateway_zone = None
        self._id = None
        self._primary_gateway = None
        self._update = None
        self._vip = None
        self._vip_mask = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if dfs_gateway_group is not None:
            self.dfs_gateway_group = dfs_gateway_group
        if dfs_gateway_zone is not None:
            self.dfs_gateway_zone = dfs_gateway_zone
        if id is not None:
            self.id = id
        if primary_gateway is not None:
            self.primary_gateway = primary_gateway
        if update is not None:
            self.update = update
        if vip is not None:
            self.vip = vip
        if vip_mask is not None:
            self.vip_mask = vip_mask

    @property
    def action_status(self):
        """Gets the action_status of this DfsVIP.  # noqa: E501


        :return: The action_status of this DfsVIP.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsVIP.


        :param action_status: The action_status of this DfsVIP.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this DfsVIP.  # noqa: E501


        :return: The cluster of this DfsVIP.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsVIP.


        :param cluster: The cluster of this DfsVIP.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsVIP.  # noqa: E501


        :return: The create of this DfsVIP.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsVIP.


        :param create: The create of this DfsVIP.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dfs_gateway_group(self):
        """Gets the dfs_gateway_group of this DfsVIP.  # noqa: E501


        :return: The dfs_gateway_group of this DfsVIP.  # noqa: E501
        :rtype: DfsGatewayGroupNestview
        """
        return self._dfs_gateway_group

    @dfs_gateway_group.setter
    def dfs_gateway_group(self, dfs_gateway_group):
        """Sets the dfs_gateway_group of this DfsVIP.


        :param dfs_gateway_group: The dfs_gateway_group of this DfsVIP.  # noqa: E501
        :type: DfsGatewayGroupNestview
        """

        self._dfs_gateway_group = dfs_gateway_group

    @property
    def dfs_gateway_zone(self):
        """Gets the dfs_gateway_zone of this DfsVIP.  # noqa: E501


        :return: The dfs_gateway_zone of this DfsVIP.  # noqa: E501
        :rtype: DfsGatewayZoneNestview
        """
        return self._dfs_gateway_zone

    @dfs_gateway_zone.setter
    def dfs_gateway_zone(self, dfs_gateway_zone):
        """Sets the dfs_gateway_zone of this DfsVIP.


        :param dfs_gateway_zone: The dfs_gateway_zone of this DfsVIP.  # noqa: E501
        :type: DfsGatewayZoneNestview
        """

        self._dfs_gateway_zone = dfs_gateway_zone

    @property
    def id(self):
        """Gets the id of this DfsVIP.  # noqa: E501


        :return: The id of this DfsVIP.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsVIP.


        :param id: The id of this DfsVIP.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def primary_gateway(self):
        """Gets the primary_gateway of this DfsVIP.  # noqa: E501


        :return: The primary_gateway of this DfsVIP.  # noqa: E501
        :rtype: DfsGatewayNestview
        """
        return self._primary_gateway

    @primary_gateway.setter
    def primary_gateway(self, primary_gateway):
        """Sets the primary_gateway of this DfsVIP.


        :param primary_gateway: The primary_gateway of this DfsVIP.  # noqa: E501
        :type: DfsGatewayNestview
        """

        self._primary_gateway = primary_gateway

    @property
    def update(self):
        """Gets the update of this DfsVIP.  # noqa: E501


        :return: The update of this DfsVIP.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsVIP.


        :param update: The update of this DfsVIP.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def vip(self):
        """Gets the vip of this DfsVIP.  # noqa: E501


        :return: The vip of this DfsVIP.  # noqa: E501
        :rtype: str
        """
        return self._vip

    @vip.setter
    def vip(self, vip):
        """Sets the vip of this DfsVIP.


        :param vip: The vip of this DfsVIP.  # noqa: E501
        :type: str
        """

        self._vip = vip

    @property
    def vip_mask(self):
        """Gets the vip_mask of this DfsVIP.  # noqa: E501


        :return: The vip_mask of this DfsVIP.  # noqa: E501
        :rtype: int
        """
        return self._vip_mask

    @vip_mask.setter
    def vip_mask(self, vip_mask):
        """Sets the vip_mask of this DfsVIP.


        :param vip_mask: The vip_mask of this DfsVIP.  # noqa: E501
        :type: int
        """

        self._vip_mask = vip_mask

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsVIP):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
