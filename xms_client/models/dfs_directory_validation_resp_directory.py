# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsDirectoryValidationRespDirectory(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dp_dfs_snapshot_policy_num': 'int',
        'existed': 'bool',
        'parent_child_bucket_existed': 'bool',
        'parent_child_snapshot_existed': 'bool',
        'quota_existed': 'bool',
        'root_dir_snap_num': 'int',
        'share_existed': 'bool',
        'snapshot_existed': 'bool'
    }

    attribute_map = {
        'dp_dfs_snapshot_policy_num': 'dp_dfs_snapshot_policy_num',
        'existed': 'existed',
        'parent_child_bucket_existed': 'parent_child_bucket_existed',
        'parent_child_snapshot_existed': 'parent_child_snapshot_existed',
        'quota_existed': 'quota_existed',
        'root_dir_snap_num': 'root_dir_snap_num',
        'share_existed': 'share_existed',
        'snapshot_existed': 'snapshot_existed'
    }

    def __init__(self, dp_dfs_snapshot_policy_num=None, existed=None, parent_child_bucket_existed=None, parent_child_snapshot_existed=None, quota_existed=None, root_dir_snap_num=None, share_existed=None, snapshot_existed=None):  # noqa: E501
        """DfsDirectoryValidationRespDirectory - a model defined in Swagger"""  # noqa: E501

        self._dp_dfs_snapshot_policy_num = None
        self._existed = None
        self._parent_child_bucket_existed = None
        self._parent_child_snapshot_existed = None
        self._quota_existed = None
        self._root_dir_snap_num = None
        self._share_existed = None
        self._snapshot_existed = None
        self.discriminator = None

        self.dp_dfs_snapshot_policy_num = dp_dfs_snapshot_policy_num
        self.existed = existed
        self.parent_child_bucket_existed = parent_child_bucket_existed
        self.parent_child_snapshot_existed = parent_child_snapshot_existed
        self.quota_existed = quota_existed
        self.root_dir_snap_num = root_dir_snap_num
        self.share_existed = share_existed
        self.snapshot_existed = snapshot_existed

    @property
    def dp_dfs_snapshot_policy_num(self):
        """Gets the dp_dfs_snapshot_policy_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        count of data protection snapshot policy on the directory  # noqa: E501

        :return: The dp_dfs_snapshot_policy_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: int
        """
        return self._dp_dfs_snapshot_policy_num

    @dp_dfs_snapshot_policy_num.setter
    def dp_dfs_snapshot_policy_num(self, dp_dfs_snapshot_policy_num):
        """Sets the dp_dfs_snapshot_policy_num of this DfsDirectoryValidationRespDirectory.

        count of data protection snapshot policy on the directory  # noqa: E501

        :param dp_dfs_snapshot_policy_num: The dp_dfs_snapshot_policy_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: int
        """
        if dp_dfs_snapshot_policy_num is None:
            raise ValueError("Invalid value for `dp_dfs_snapshot_policy_num`, must not be `None`")  # noqa: E501

        self._dp_dfs_snapshot_policy_num = dp_dfs_snapshot_policy_num

    @property
    def existed(self):
        """Gets the existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        directory existed  # noqa: E501

        :return: The existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._existed

    @existed.setter
    def existed(self, existed):
        """Sets the existed of this DfsDirectoryValidationRespDirectory.

        directory existed  # noqa: E501

        :param existed: The existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if existed is None:
            raise ValueError("Invalid value for `existed`, must not be `None`")  # noqa: E501

        self._existed = existed

    @property
    def parent_child_bucket_existed(self):
        """Gets the parent_child_bucket_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        snaphost existed on the parent or child directory  # noqa: E501

        :return: The parent_child_bucket_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._parent_child_bucket_existed

    @parent_child_bucket_existed.setter
    def parent_child_bucket_existed(self, parent_child_bucket_existed):
        """Sets the parent_child_bucket_existed of this DfsDirectoryValidationRespDirectory.

        snaphost existed on the parent or child directory  # noqa: E501

        :param parent_child_bucket_existed: The parent_child_bucket_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if parent_child_bucket_existed is None:
            raise ValueError("Invalid value for `parent_child_bucket_existed`, must not be `None`")  # noqa: E501

        self._parent_child_bucket_existed = parent_child_bucket_existed

    @property
    def parent_child_snapshot_existed(self):
        """Gets the parent_child_snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        snaphost existed on the parent or child directory  # noqa: E501

        :return: The parent_child_snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._parent_child_snapshot_existed

    @parent_child_snapshot_existed.setter
    def parent_child_snapshot_existed(self, parent_child_snapshot_existed):
        """Sets the parent_child_snapshot_existed of this DfsDirectoryValidationRespDirectory.

        snaphost existed on the parent or child directory  # noqa: E501

        :param parent_child_snapshot_existed: The parent_child_snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if parent_child_snapshot_existed is None:
            raise ValueError("Invalid value for `parent_child_snapshot_existed`, must not be `None`")  # noqa: E501

        self._parent_child_snapshot_existed = parent_child_snapshot_existed

    @property
    def quota_existed(self):
        """Gets the quota_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        quota existed on the directory  # noqa: E501

        :return: The quota_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._quota_existed

    @quota_existed.setter
    def quota_existed(self, quota_existed):
        """Sets the quota_existed of this DfsDirectoryValidationRespDirectory.

        quota existed on the directory  # noqa: E501

        :param quota_existed: The quota_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if quota_existed is None:
            raise ValueError("Invalid value for `quota_existed`, must not be `None`")  # noqa: E501

        self._quota_existed = quota_existed

    @property
    def root_dir_snap_num(self):
        """Gets the root_dir_snap_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        count of snapshot on the root directory  # noqa: E501

        :return: The root_dir_snap_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: int
        """
        return self._root_dir_snap_num

    @root_dir_snap_num.setter
    def root_dir_snap_num(self, root_dir_snap_num):
        """Sets the root_dir_snap_num of this DfsDirectoryValidationRespDirectory.

        count of snapshot on the root directory  # noqa: E501

        :param root_dir_snap_num: The root_dir_snap_num of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: int
        """
        if root_dir_snap_num is None:
            raise ValueError("Invalid value for `root_dir_snap_num`, must not be `None`")  # noqa: E501

        self._root_dir_snap_num = root_dir_snap_num

    @property
    def share_existed(self):
        """Gets the share_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        share existed on the directory  # noqa: E501

        :return: The share_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._share_existed

    @share_existed.setter
    def share_existed(self, share_existed):
        """Sets the share_existed of this DfsDirectoryValidationRespDirectory.

        share existed on the directory  # noqa: E501

        :param share_existed: The share_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if share_existed is None:
            raise ValueError("Invalid value for `share_existed`, must not be `None`")  # noqa: E501

        self._share_existed = share_existed

    @property
    def snapshot_existed(self):
        """Gets the snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501

        snapshot existed on the directory  # noqa: E501

        :return: The snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :rtype: bool
        """
        return self._snapshot_existed

    @snapshot_existed.setter
    def snapshot_existed(self, snapshot_existed):
        """Sets the snapshot_existed of this DfsDirectoryValidationRespDirectory.

        snapshot existed on the directory  # noqa: E501

        :param snapshot_existed: The snapshot_existed of this DfsDirectoryValidationRespDirectory.  # noqa: E501
        :type: bool
        """
        if snapshot_existed is None:
            raise ValueError("Invalid value for `snapshot_existed`, must not be `None`")  # noqa: E501

        self._snapshot_existed = snapshot_existed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsDirectoryValidationRespDirectory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
