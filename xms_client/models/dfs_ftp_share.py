# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_gateway_group_nestview import DfsGatewayGroupNestview  # noqa: F401,E501
# from xms_client.models.dfs_path_nestview import DfsPathNestview  # noqa: F401,E501
# from xms_client.models.dfs_rootfs_nestview import DfsRootfsNestview  # noqa: F401,E501


class DfsFTPShare(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'dfs_gateway_group': 'DfsGatewayGroupNestview',
        'dfs_path': 'DfsPathNestview',
        'dfs_rootfs': 'DfsRootfsNestview',
        'id': 'int',
        'name': 'str',
        'status': 'str',
        'total_snapshot_num': 'int',
        'update': 'datetime',
        'version': 'str'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'create': 'create',
        'dfs_gateway_group': 'dfs_gateway_group',
        'dfs_path': 'dfs_path',
        'dfs_rootfs': 'dfs_rootfs',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'total_snapshot_num': 'total_snapshot_num',
        'update': 'update',
        'version': 'version'
    }

    def __init__(self, action_status=None, cluster=None, create=None, dfs_gateway_group=None, dfs_path=None, dfs_rootfs=None, id=None, name=None, status=None, total_snapshot_num=None, update=None, version=None):  # noqa: E501
        """DfsFTPShare - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._create = None
        self._dfs_gateway_group = None
        self._dfs_path = None
        self._dfs_rootfs = None
        self._id = None
        self._name = None
        self._status = None
        self._total_snapshot_num = None
        self._update = None
        self._version = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if dfs_gateway_group is not None:
            self.dfs_gateway_group = dfs_gateway_group
        if dfs_path is not None:
            self.dfs_path = dfs_path
        if dfs_rootfs is not None:
            self.dfs_rootfs = dfs_rootfs
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if total_snapshot_num is not None:
            self.total_snapshot_num = total_snapshot_num
        if update is not None:
            self.update = update
        if version is not None:
            self.version = version

    @property
    def action_status(self):
        """Gets the action_status of this DfsFTPShare.  # noqa: E501


        :return: The action_status of this DfsFTPShare.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsFTPShare.


        :param action_status: The action_status of this DfsFTPShare.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this DfsFTPShare.  # noqa: E501


        :return: The cluster of this DfsFTPShare.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsFTPShare.


        :param cluster: The cluster of this DfsFTPShare.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsFTPShare.  # noqa: E501


        :return: The create of this DfsFTPShare.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsFTPShare.


        :param create: The create of this DfsFTPShare.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dfs_gateway_group(self):
        """Gets the dfs_gateway_group of this DfsFTPShare.  # noqa: E501


        :return: The dfs_gateway_group of this DfsFTPShare.  # noqa: E501
        :rtype: DfsGatewayGroupNestview
        """
        return self._dfs_gateway_group

    @dfs_gateway_group.setter
    def dfs_gateway_group(self, dfs_gateway_group):
        """Sets the dfs_gateway_group of this DfsFTPShare.


        :param dfs_gateway_group: The dfs_gateway_group of this DfsFTPShare.  # noqa: E501
        :type: DfsGatewayGroupNestview
        """

        self._dfs_gateway_group = dfs_gateway_group

    @property
    def dfs_path(self):
        """Gets the dfs_path of this DfsFTPShare.  # noqa: E501


        :return: The dfs_path of this DfsFTPShare.  # noqa: E501
        :rtype: DfsPathNestview
        """
        return self._dfs_path

    @dfs_path.setter
    def dfs_path(self, dfs_path):
        """Sets the dfs_path of this DfsFTPShare.


        :param dfs_path: The dfs_path of this DfsFTPShare.  # noqa: E501
        :type: DfsPathNestview
        """

        self._dfs_path = dfs_path

    @property
    def dfs_rootfs(self):
        """Gets the dfs_rootfs of this DfsFTPShare.  # noqa: E501


        :return: The dfs_rootfs of this DfsFTPShare.  # noqa: E501
        :rtype: DfsRootfsNestview
        """
        return self._dfs_rootfs

    @dfs_rootfs.setter
    def dfs_rootfs(self, dfs_rootfs):
        """Sets the dfs_rootfs of this DfsFTPShare.


        :param dfs_rootfs: The dfs_rootfs of this DfsFTPShare.  # noqa: E501
        :type: DfsRootfsNestview
        """

        self._dfs_rootfs = dfs_rootfs

    @property
    def id(self):
        """Gets the id of this DfsFTPShare.  # noqa: E501


        :return: The id of this DfsFTPShare.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsFTPShare.


        :param id: The id of this DfsFTPShare.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DfsFTPShare.  # noqa: E501


        :return: The name of this DfsFTPShare.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsFTPShare.


        :param name: The name of this DfsFTPShare.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DfsFTPShare.  # noqa: E501


        :return: The status of this DfsFTPShare.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsFTPShare.


        :param status: The status of this DfsFTPShare.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def total_snapshot_num(self):
        """Gets the total_snapshot_num of this DfsFTPShare.  # noqa: E501


        :return: The total_snapshot_num of this DfsFTPShare.  # noqa: E501
        :rtype: int
        """
        return self._total_snapshot_num

    @total_snapshot_num.setter
    def total_snapshot_num(self, total_snapshot_num):
        """Sets the total_snapshot_num of this DfsFTPShare.


        :param total_snapshot_num: The total_snapshot_num of this DfsFTPShare.  # noqa: E501
        :type: int
        """

        self._total_snapshot_num = total_snapshot_num

    @property
    def update(self):
        """Gets the update of this DfsFTPShare.  # noqa: E501


        :return: The update of this DfsFTPShare.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsFTPShare.


        :param update: The update of this DfsFTPShare.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def version(self):
        """Gets the version of this DfsFTPShare.  # noqa: E501


        :return: The version of this DfsFTPShare.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DfsFTPShare.


        :param version: The version of this DfsFTPShare.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsFTPShare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
