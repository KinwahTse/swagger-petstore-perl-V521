# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PortMapPair(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dest_port': 'int',
        'protocol': 'str',
        'src_addr': 'str',
        'src_port': 'int'
    }

    attribute_map = {
        'dest_port': 'dest_port',
        'protocol': 'protocol',
        'src_addr': 'src_addr',
        'src_port': 'src_port'
    }

    def __init__(self, dest_port=None, protocol=None, src_addr=None, src_port=None):  # noqa: E501
        """PortMapPair - a model defined in Swagger"""  # noqa: E501

        self._dest_port = None
        self._protocol = None
        self._src_addr = None
        self._src_port = None
        self.discriminator = None

        if dest_port is not None:
            self.dest_port = dest_port
        if protocol is not None:
            self.protocol = protocol
        if src_addr is not None:
            self.src_addr = src_addr
        if src_port is not None:
            self.src_port = src_port

    @property
    def dest_port(self):
        """Gets the dest_port of this PortMapPair.  # noqa: E501


        :return: The dest_port of this PortMapPair.  # noqa: E501
        :rtype: int
        """
        return self._dest_port

    @dest_port.setter
    def dest_port(self, dest_port):
        """Sets the dest_port of this PortMapPair.


        :param dest_port: The dest_port of this PortMapPair.  # noqa: E501
        :type: int
        """

        self._dest_port = dest_port

    @property
    def protocol(self):
        """Gets the protocol of this PortMapPair.  # noqa: E501


        :return: The protocol of this PortMapPair.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PortMapPair.


        :param protocol: The protocol of this PortMapPair.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def src_addr(self):
        """Gets the src_addr of this PortMapPair.  # noqa: E501


        :return: The src_addr of this PortMapPair.  # noqa: E501
        :rtype: str
        """
        return self._src_addr

    @src_addr.setter
    def src_addr(self, src_addr):
        """Sets the src_addr of this PortMapPair.


        :param src_addr: The src_addr of this PortMapPair.  # noqa: E501
        :type: str
        """

        self._src_addr = src_addr

    @property
    def src_port(self):
        """Gets the src_port of this PortMapPair.  # noqa: E501


        :return: The src_port of this PortMapPair.  # noqa: E501
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this PortMapPair.


        :param src_port: The src_port of this PortMapPair.  # noqa: E501
        :type: int
        """

        self._src_port = src_port

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PortMapPair):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
