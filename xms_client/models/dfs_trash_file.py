# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.nested_rootfs import NestedRootfs  # noqa: F401,E501
# from xms_client.models.nested_trash import NestedTrash  # noqa: F401,E501


class DfsTrashFile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'access': 'datetime',
        'base_file_id': 'str',
        'base_name': 'str',
        'change': 'datetime',
        'dfs_rootfs': 'NestedRootfs',
        'dfs_trash': 'NestedTrash',
        'files': 'int',
        'group': 'int',
        'inode': 'int',
        'modify': 'datetime',
        'name': 'str',
        'original_name': 'str',
        'owner': 'int',
        'parent': 'str',
        'size': 'int',
        'trash_path': 'str',
        'type': 'str'
    }

    attribute_map = {
        'access': 'access',
        'base_file_id': 'base_file_id',
        'base_name': 'base_name',
        'change': 'change',
        'dfs_rootfs': 'dfs_rootfs',
        'dfs_trash': 'dfs_trash',
        'files': 'files',
        'group': 'group',
        'inode': 'inode',
        'modify': 'modify',
        'name': 'name',
        'original_name': 'original_name',
        'owner': 'owner',
        'parent': 'parent',
        'size': 'size',
        'trash_path': 'trash_path',
        'type': 'type'
    }

    def __init__(self, access=None, base_file_id=None, base_name=None, change=None, dfs_rootfs=None, dfs_trash=None, files=None, group=None, inode=None, modify=None, name=None, original_name=None, owner=None, parent=None, size=None, trash_path=None, type=None):  # noqa: E501
        """DfsTrashFile - a model defined in Swagger"""  # noqa: E501

        self._access = None
        self._base_file_id = None
        self._base_name = None
        self._change = None
        self._dfs_rootfs = None
        self._dfs_trash = None
        self._files = None
        self._group = None
        self._inode = None
        self._modify = None
        self._name = None
        self._original_name = None
        self._owner = None
        self._parent = None
        self._size = None
        self._trash_path = None
        self._type = None
        self.discriminator = None

        if access is not None:
            self.access = access
        if base_file_id is not None:
            self.base_file_id = base_file_id
        if base_name is not None:
            self.base_name = base_name
        if change is not None:
            self.change = change
        if dfs_rootfs is not None:
            self.dfs_rootfs = dfs_rootfs
        if dfs_trash is not None:
            self.dfs_trash = dfs_trash
        if files is not None:
            self.files = files
        if group is not None:
            self.group = group
        if inode is not None:
            self.inode = inode
        if modify is not None:
            self.modify = modify
        if name is not None:
            self.name = name
        if original_name is not None:
            self.original_name = original_name
        if owner is not None:
            self.owner = owner
        if parent is not None:
            self.parent = parent
        if size is not None:
            self.size = size
        if trash_path is not None:
            self.trash_path = trash_path
        if type is not None:
            self.type = type

    @property
    def access(self):
        """Gets the access of this DfsTrashFile.  # noqa: E501

        access time  # noqa: E501

        :return: The access of this DfsTrashFile.  # noqa: E501
        :rtype: datetime
        """
        return self._access

    @access.setter
    def access(self, access):
        """Sets the access of this DfsTrashFile.

        access time  # noqa: E501

        :param access: The access of this DfsTrashFile.  # noqa: E501
        :type: datetime
        """

        self._access = access

    @property
    def base_file_id(self):
        """Gets the base_file_id of this DfsTrashFile.  # noqa: E501

        base file id in trash  # noqa: E501

        :return: The base_file_id of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._base_file_id

    @base_file_id.setter
    def base_file_id(self, base_file_id):
        """Sets the base_file_id of this DfsTrashFile.

        base file id in trash  # noqa: E501

        :param base_file_id: The base_file_id of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._base_file_id = base_file_id

    @property
    def base_name(self):
        """Gets the base_name of this DfsTrashFile.  # noqa: E501

        file base name in trash  # noqa: E501

        :return: The base_name of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._base_name

    @base_name.setter
    def base_name(self, base_name):
        """Sets the base_name of this DfsTrashFile.

        file base name in trash  # noqa: E501

        :param base_name: The base_name of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._base_name = base_name

    @property
    def change(self):
        """Gets the change of this DfsTrashFile.  # noqa: E501

        change time  # noqa: E501

        :return: The change of this DfsTrashFile.  # noqa: E501
        :rtype: datetime
        """
        return self._change

    @change.setter
    def change(self, change):
        """Sets the change of this DfsTrashFile.

        change time  # noqa: E501

        :param change: The change of this DfsTrashFile.  # noqa: E501
        :type: datetime
        """

        self._change = change

    @property
    def dfs_rootfs(self):
        """Gets the dfs_rootfs of this DfsTrashFile.  # noqa: E501

        dfs rootfs  # noqa: E501

        :return: The dfs_rootfs of this DfsTrashFile.  # noqa: E501
        :rtype: NestedRootfs
        """
        return self._dfs_rootfs

    @dfs_rootfs.setter
    def dfs_rootfs(self, dfs_rootfs):
        """Sets the dfs_rootfs of this DfsTrashFile.

        dfs rootfs  # noqa: E501

        :param dfs_rootfs: The dfs_rootfs of this DfsTrashFile.  # noqa: E501
        :type: NestedRootfs
        """

        self._dfs_rootfs = dfs_rootfs

    @property
    def dfs_trash(self):
        """Gets the dfs_trash of this DfsTrashFile.  # noqa: E501

        dfs trash  # noqa: E501

        :return: The dfs_trash of this DfsTrashFile.  # noqa: E501
        :rtype: NestedTrash
        """
        return self._dfs_trash

    @dfs_trash.setter
    def dfs_trash(self, dfs_trash):
        """Sets the dfs_trash of this DfsTrashFile.

        dfs trash  # noqa: E501

        :param dfs_trash: The dfs_trash of this DfsTrashFile.  # noqa: E501
        :type: NestedTrash
        """

        self._dfs_trash = dfs_trash

    @property
    def files(self):
        """Gets the files of this DfsTrashFile.  # noqa: E501

        sub file count when it is a directory  # noqa: E501

        :return: The files of this DfsTrashFile.  # noqa: E501
        :rtype: int
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this DfsTrashFile.

        sub file count when it is a directory  # noqa: E501

        :param files: The files of this DfsTrashFile.  # noqa: E501
        :type: int
        """

        self._files = files

    @property
    def group(self):
        """Gets the group of this DfsTrashFile.  # noqa: E501

        file owner user group  # noqa: E501

        :return: The group of this DfsTrashFile.  # noqa: E501
        :rtype: int
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this DfsTrashFile.

        file owner user group  # noqa: E501

        :param group: The group of this DfsTrashFile.  # noqa: E501
        :type: int
        """

        self._group = group

    @property
    def inode(self):
        """Gets the inode of this DfsTrashFile.  # noqa: E501

        file inode  # noqa: E501

        :return: The inode of this DfsTrashFile.  # noqa: E501
        :rtype: int
        """
        return self._inode

    @inode.setter
    def inode(self, inode):
        """Sets the inode of this DfsTrashFile.

        file inode  # noqa: E501

        :param inode: The inode of this DfsTrashFile.  # noqa: E501
        :type: int
        """

        self._inode = inode

    @property
    def modify(self):
        """Gets the modify of this DfsTrashFile.  # noqa: E501

        modify time  # noqa: E501

        :return: The modify of this DfsTrashFile.  # noqa: E501
        :rtype: datetime
        """
        return self._modify

    @modify.setter
    def modify(self, modify):
        """Sets the modify of this DfsTrashFile.

        modify time  # noqa: E501

        :param modify: The modify of this DfsTrashFile.  # noqa: E501
        :type: datetime
        """

        self._modify = modify

    @property
    def name(self):
        """Gets the name of this DfsTrashFile.  # noqa: E501

        file name  # noqa: E501

        :return: The name of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsTrashFile.

        file name  # noqa: E501

        :param name: The name of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this DfsTrashFile.  # noqa: E501

        original name before file moved to trash  # noqa: E501

        :return: The original_name of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this DfsTrashFile.

        original name before file moved to trash  # noqa: E501

        :param original_name: The original_name of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def owner(self):
        """Gets the owner of this DfsTrashFile.  # noqa: E501

        file owner user  # noqa: E501

        :return: The owner of this DfsTrashFile.  # noqa: E501
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DfsTrashFile.

        file owner user  # noqa: E501

        :param owner: The owner of this DfsTrashFile.  # noqa: E501
        :type: int
        """

        self._owner = owner

    @property
    def parent(self):
        """Gets the parent of this DfsTrashFile.  # noqa: E501

        parent path  # noqa: E501

        :return: The parent of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DfsTrashFile.

        parent path  # noqa: E501

        :param parent: The parent of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def size(self):
        """Gets the size of this DfsTrashFile.  # noqa: E501

        file size  # noqa: E501

        :return: The size of this DfsTrashFile.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this DfsTrashFile.

        file size  # noqa: E501

        :param size: The size of this DfsTrashFile.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def trash_path(self):
        """Gets the trash_path of this DfsTrashFile.  # noqa: E501

        trash path  # noqa: E501

        :return: The trash_path of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._trash_path

    @trash_path.setter
    def trash_path(self, trash_path):
        """Sets the trash_path of this DfsTrashFile.

        trash path  # noqa: E501

        :param trash_path: The trash_path of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._trash_path = trash_path

    @property
    def type(self):
        """Gets the type of this DfsTrashFile.  # noqa: E501

        file type  # noqa: E501

        :return: The type of this DfsTrashFile.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DfsTrashFile.

        file type  # noqa: E501

        :param type: The type of this DfsTrashFile.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsTrashFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
