# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_path_nestview import DfsPathNestview  # noqa: F401,E501
# from xms_client.models.dfs_rootfs_nestview import DfsRootfsNestview  # noqa: F401,E501


class DfsSnapshot(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'creator': 'str',
        'description': 'str',
        'expire_time': 'datetime',
        'id': 'int',
        'name': 'str',
        'path': 'DfsPathNestview',
        'progress': 'float',
        'rootfs': 'DfsRootfsNestview',
        'snapshot_name': 'str',
        'status': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'create': 'create',
        'creator': 'creator',
        'description': 'description',
        'expire_time': 'expire_time',
        'id': 'id',
        'name': 'name',
        'path': 'path',
        'progress': 'progress',
        'rootfs': 'rootfs',
        'snapshot_name': 'snapshot_name',
        'status': 'status',
        'update': 'update'
    }

    def __init__(self, action_status=None, cluster=None, create=None, creator=None, description=None, expire_time=None, id=None, name=None, path=None, progress=None, rootfs=None, snapshot_name=None, status=None, update=None):  # noqa: E501
        """DfsSnapshot - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._create = None
        self._creator = None
        self._description = None
        self._expire_time = None
        self._id = None
        self._name = None
        self._path = None
        self._progress = None
        self._rootfs = None
        self._snapshot_name = None
        self._status = None
        self._update = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if creator is not None:
            self.creator = creator
        if description is not None:
            self.description = description
        if expire_time is not None:
            self.expire_time = expire_time
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if progress is not None:
            self.progress = progress
        if rootfs is not None:
            self.rootfs = rootfs
        if snapshot_name is not None:
            self.snapshot_name = snapshot_name
        if status is not None:
            self.status = status
        if update is not None:
            self.update = update

    @property
    def action_status(self):
        """Gets the action_status of this DfsSnapshot.  # noqa: E501


        :return: The action_status of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this DfsSnapshot.


        :param action_status: The action_status of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this DfsSnapshot.  # noqa: E501


        :return: The cluster of this DfsSnapshot.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsSnapshot.


        :param cluster: The cluster of this DfsSnapshot.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsSnapshot.  # noqa: E501


        :return: The create of this DfsSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsSnapshot.


        :param create: The create of this DfsSnapshot.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def creator(self):
        """Gets the creator of this DfsSnapshot.  # noqa: E501


        :return: The creator of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DfsSnapshot.


        :param creator: The creator of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._creator = creator

    @property
    def description(self):
        """Gets the description of this DfsSnapshot.  # noqa: E501


        :return: The description of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DfsSnapshot.


        :param description: The description of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def expire_time(self):
        """Gets the expire_time of this DfsSnapshot.  # noqa: E501


        :return: The expire_time of this DfsSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this DfsSnapshot.


        :param expire_time: The expire_time of this DfsSnapshot.  # noqa: E501
        :type: datetime
        """

        self._expire_time = expire_time

    @property
    def id(self):
        """Gets the id of this DfsSnapshot.  # noqa: E501


        :return: The id of this DfsSnapshot.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsSnapshot.


        :param id: The id of this DfsSnapshot.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DfsSnapshot.  # noqa: E501


        :return: The name of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsSnapshot.


        :param name: The name of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this DfsSnapshot.  # noqa: E501


        :return: The path of this DfsSnapshot.  # noqa: E501
        :rtype: DfsPathNestview
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsSnapshot.


        :param path: The path of this DfsSnapshot.  # noqa: E501
        :type: DfsPathNestview
        """

        self._path = path

    @property
    def progress(self):
        """Gets the progress of this DfsSnapshot.  # noqa: E501


        :return: The progress of this DfsSnapshot.  # noqa: E501
        :rtype: float
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this DfsSnapshot.


        :param progress: The progress of this DfsSnapshot.  # noqa: E501
        :type: float
        """

        self._progress = progress

    @property
    def rootfs(self):
        """Gets the rootfs of this DfsSnapshot.  # noqa: E501


        :return: The rootfs of this DfsSnapshot.  # noqa: E501
        :rtype: DfsRootfsNestview
        """
        return self._rootfs

    @rootfs.setter
    def rootfs(self, rootfs):
        """Sets the rootfs of this DfsSnapshot.


        :param rootfs: The rootfs of this DfsSnapshot.  # noqa: E501
        :type: DfsRootfsNestview
        """

        self._rootfs = rootfs

    @property
    def snapshot_name(self):
        """Gets the snapshot_name of this DfsSnapshot.  # noqa: E501


        :return: The snapshot_name of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._snapshot_name

    @snapshot_name.setter
    def snapshot_name(self, snapshot_name):
        """Sets the snapshot_name of this DfsSnapshot.


        :param snapshot_name: The snapshot_name of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._snapshot_name = snapshot_name

    @property
    def status(self):
        """Gets the status of this DfsSnapshot.  # noqa: E501


        :return: The status of this DfsSnapshot.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsSnapshot.


        :param status: The status of this DfsSnapshot.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update(self):
        """Gets the update of this DfsSnapshot.  # noqa: E501


        :return: The update of this DfsSnapshot.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsSnapshot.


        :param update: The update of this DfsSnapshot.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsSnapshot):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
