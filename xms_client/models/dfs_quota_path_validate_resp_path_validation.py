# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.dfs_quota import DfsQuota  # noqa: F401,E501
# from xms_client.models.fs_user import FSUser  # noqa: F401,E501
# from xms_client.models.fs_user_group import FSUserGroup  # noqa: F401,E501


class DfsQuotaPathValidateRespPathValidation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'exist_dir_quota': 'DfsQuota',
        'is_dir_empty': 'bool',
        'is_dir_exist': 'bool',
        'is_exceed_max_quota': 'bool',
        'is_quota_exist': 'bool',
        'used_files': 'int',
        'used_kbyte': 'int',
        'user_groups': 'list[FSUserGroup]',
        'users': 'list[FSUser]'
    }

    attribute_map = {
        'exist_dir_quota': 'exist_dir_quota',
        'is_dir_empty': 'is_dir_empty',
        'is_dir_exist': 'is_dir_exist',
        'is_exceed_max_quota': 'is_exceed_max_quota',
        'is_quota_exist': 'is_quota_exist',
        'used_files': 'used_files',
        'used_kbyte': 'used_kbyte',
        'user_groups': 'user_groups',
        'users': 'users'
    }

    def __init__(self, exist_dir_quota=None, is_dir_empty=None, is_dir_exist=None, is_exceed_max_quota=None, is_quota_exist=None, used_files=None, used_kbyte=None, user_groups=None, users=None):  # noqa: E501
        """DfsQuotaPathValidateRespPathValidation - a model defined in Swagger"""  # noqa: E501

        self._exist_dir_quota = None
        self._is_dir_empty = None
        self._is_dir_exist = None
        self._is_exceed_max_quota = None
        self._is_quota_exist = None
        self._used_files = None
        self._used_kbyte = None
        self._user_groups = None
        self._users = None
        self.discriminator = None

        if exist_dir_quota is not None:
            self.exist_dir_quota = exist_dir_quota
        if is_dir_empty is not None:
            self.is_dir_empty = is_dir_empty
        if is_dir_exist is not None:
            self.is_dir_exist = is_dir_exist
        if is_exceed_max_quota is not None:
            self.is_exceed_max_quota = is_exceed_max_quota
        if is_quota_exist is not None:
            self.is_quota_exist = is_quota_exist
        if used_files is not None:
            self.used_files = used_files
        if used_kbyte is not None:
            self.used_kbyte = used_kbyte
        if user_groups is not None:
            self.user_groups = user_groups
        if users is not None:
            self.users = users

    @property
    def exist_dir_quota(self):
        """Gets the exist_dir_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The exist_dir_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: DfsQuota
        """
        return self._exist_dir_quota

    @exist_dir_quota.setter
    def exist_dir_quota(self, exist_dir_quota):
        """Sets the exist_dir_quota of this DfsQuotaPathValidateRespPathValidation.


        :param exist_dir_quota: The exist_dir_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: DfsQuota
        """

        self._exist_dir_quota = exist_dir_quota

    @property
    def is_dir_empty(self):
        """Gets the is_dir_empty of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The is_dir_empty of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir_empty

    @is_dir_empty.setter
    def is_dir_empty(self, is_dir_empty):
        """Sets the is_dir_empty of this DfsQuotaPathValidateRespPathValidation.


        :param is_dir_empty: The is_dir_empty of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: bool
        """

        self._is_dir_empty = is_dir_empty

    @property
    def is_dir_exist(self):
        """Gets the is_dir_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The is_dir_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: bool
        """
        return self._is_dir_exist

    @is_dir_exist.setter
    def is_dir_exist(self, is_dir_exist):
        """Sets the is_dir_exist of this DfsQuotaPathValidateRespPathValidation.


        :param is_dir_exist: The is_dir_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: bool
        """

        self._is_dir_exist = is_dir_exist

    @property
    def is_exceed_max_quota(self):
        """Gets the is_exceed_max_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The is_exceed_max_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: bool
        """
        return self._is_exceed_max_quota

    @is_exceed_max_quota.setter
    def is_exceed_max_quota(self, is_exceed_max_quota):
        """Sets the is_exceed_max_quota of this DfsQuotaPathValidateRespPathValidation.


        :param is_exceed_max_quota: The is_exceed_max_quota of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: bool
        """

        self._is_exceed_max_quota = is_exceed_max_quota

    @property
    def is_quota_exist(self):
        """Gets the is_quota_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The is_quota_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: bool
        """
        return self._is_quota_exist

    @is_quota_exist.setter
    def is_quota_exist(self, is_quota_exist):
        """Sets the is_quota_exist of this DfsQuotaPathValidateRespPathValidation.


        :param is_quota_exist: The is_quota_exist of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: bool
        """

        self._is_quota_exist = is_quota_exist

    @property
    def used_files(self):
        """Gets the used_files of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The used_files of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: int
        """
        return self._used_files

    @used_files.setter
    def used_files(self, used_files):
        """Sets the used_files of this DfsQuotaPathValidateRespPathValidation.


        :param used_files: The used_files of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: int
        """

        self._used_files = used_files

    @property
    def used_kbyte(self):
        """Gets the used_kbyte of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The used_kbyte of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: int
        """
        return self._used_kbyte

    @used_kbyte.setter
    def used_kbyte(self, used_kbyte):
        """Sets the used_kbyte of this DfsQuotaPathValidateRespPathValidation.


        :param used_kbyte: The used_kbyte of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: int
        """

        self._used_kbyte = used_kbyte

    @property
    def user_groups(self):
        """Gets the user_groups of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The user_groups of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: list[FSUserGroup]
        """
        return self._user_groups

    @user_groups.setter
    def user_groups(self, user_groups):
        """Sets the user_groups of this DfsQuotaPathValidateRespPathValidation.


        :param user_groups: The user_groups of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: list[FSUserGroup]
        """

        self._user_groups = user_groups

    @property
    def users(self):
        """Gets the users of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501


        :return: The users of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :rtype: list[FSUser]
        """
        return self._users

    @users.setter
    def users(self, users):
        """Sets the users of this DfsQuotaPathValidateRespPathValidation.


        :param users: The users of this DfsQuotaPathValidateRespPathValidation.  # noqa: E501
        :type: list[FSUser]
        """

        self._users = users

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaPathValidateRespPathValidation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
