# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_hdfs_nestview import DfsHdfsNestview  # noqa: F401,E501
# from xms_client.models.fs_user_group_nestview import FSUserGroupNestview  # noqa: F401,E501
# from xms_client.models.fs_user_nestview import FSUserNestview  # noqa: F401,E501


class DfsHdfsACL(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'dfs_hdfs': 'DfsHdfsNestview',
        'fs_user': 'FSUserNestview',
        'fs_user_group': 'FSUserGroupNestview',
        'id': 'int',
        'permission': 'str',
        'security': 'str',
        'status': 'str',
        'type': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'cluster': 'cluster',
        'create': 'create',
        'dfs_hdfs': 'dfs_hdfs',
        'fs_user': 'fs_user',
        'fs_user_group': 'fs_user_group',
        'id': 'id',
        'permission': 'permission',
        'security': 'security',
        'status': 'status',
        'type': 'type',
        'update': 'update'
    }

    def __init__(self, cluster=None, create=None, dfs_hdfs=None, fs_user=None, fs_user_group=None, id=None, permission=None, security=None, status=None, type=None, update=None):  # noqa: E501
        """DfsHdfsACL - a model defined in Swagger"""  # noqa: E501

        self._cluster = None
        self._create = None
        self._dfs_hdfs = None
        self._fs_user = None
        self._fs_user_group = None
        self._id = None
        self._permission = None
        self._security = None
        self._status = None
        self._type = None
        self._update = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if dfs_hdfs is not None:
            self.dfs_hdfs = dfs_hdfs
        if fs_user is not None:
            self.fs_user = fs_user
        if fs_user_group is not None:
            self.fs_user_group = fs_user_group
        if id is not None:
            self.id = id
        if permission is not None:
            self.permission = permission
        if security is not None:
            self.security = security
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type
        if update is not None:
            self.update = update

    @property
    def cluster(self):
        """Gets the cluster of this DfsHdfsACL.  # noqa: E501


        :return: The cluster of this DfsHdfsACL.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsHdfsACL.


        :param cluster: The cluster of this DfsHdfsACL.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsHdfsACL.  # noqa: E501


        :return: The create of this DfsHdfsACL.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsHdfsACL.


        :param create: The create of this DfsHdfsACL.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def dfs_hdfs(self):
        """Gets the dfs_hdfs of this DfsHdfsACL.  # noqa: E501


        :return: The dfs_hdfs of this DfsHdfsACL.  # noqa: E501
        :rtype: DfsHdfsNestview
        """
        return self._dfs_hdfs

    @dfs_hdfs.setter
    def dfs_hdfs(self, dfs_hdfs):
        """Sets the dfs_hdfs of this DfsHdfsACL.


        :param dfs_hdfs: The dfs_hdfs of this DfsHdfsACL.  # noqa: E501
        :type: DfsHdfsNestview
        """

        self._dfs_hdfs = dfs_hdfs

    @property
    def fs_user(self):
        """Gets the fs_user of this DfsHdfsACL.  # noqa: E501


        :return: The fs_user of this DfsHdfsACL.  # noqa: E501
        :rtype: FSUserNestview
        """
        return self._fs_user

    @fs_user.setter
    def fs_user(self, fs_user):
        """Sets the fs_user of this DfsHdfsACL.


        :param fs_user: The fs_user of this DfsHdfsACL.  # noqa: E501
        :type: FSUserNestview
        """

        self._fs_user = fs_user

    @property
    def fs_user_group(self):
        """Gets the fs_user_group of this DfsHdfsACL.  # noqa: E501


        :return: The fs_user_group of this DfsHdfsACL.  # noqa: E501
        :rtype: FSUserGroupNestview
        """
        return self._fs_user_group

    @fs_user_group.setter
    def fs_user_group(self, fs_user_group):
        """Sets the fs_user_group of this DfsHdfsACL.


        :param fs_user_group: The fs_user_group of this DfsHdfsACL.  # noqa: E501
        :type: FSUserGroupNestview
        """

        self._fs_user_group = fs_user_group

    @property
    def id(self):
        """Gets the id of this DfsHdfsACL.  # noqa: E501


        :return: The id of this DfsHdfsACL.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsHdfsACL.


        :param id: The id of this DfsHdfsACL.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def permission(self):
        """Gets the permission of this DfsHdfsACL.  # noqa: E501


        :return: The permission of this DfsHdfsACL.  # noqa: E501
        :rtype: str
        """
        return self._permission

    @permission.setter
    def permission(self, permission):
        """Sets the permission of this DfsHdfsACL.


        :param permission: The permission of this DfsHdfsACL.  # noqa: E501
        :type: str
        """

        self._permission = permission

    @property
    def security(self):
        """Gets the security of this DfsHdfsACL.  # noqa: E501


        :return: The security of this DfsHdfsACL.  # noqa: E501
        :rtype: str
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this DfsHdfsACL.


        :param security: The security of this DfsHdfsACL.  # noqa: E501
        :type: str
        """

        self._security = security

    @property
    def status(self):
        """Gets the status of this DfsHdfsACL.  # noqa: E501


        :return: The status of this DfsHdfsACL.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DfsHdfsACL.


        :param status: The status of this DfsHdfsACL.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this DfsHdfsACL.  # noqa: E501


        :return: The type of this DfsHdfsACL.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DfsHdfsACL.


        :param type: The type of this DfsHdfsACL.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def update(self):
        """Gets the update of this DfsHdfsACL.  # noqa: E501


        :return: The update of this DfsHdfsACL.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsHdfsACL.


        :param update: The update of this DfsHdfsACL.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsHdfsACL):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
