# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsQuotaTypeCount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ad_user': 'int',
        'ad_user_group': 'int',
        'dir': 'int',
        'fs_user': 'int',
        'fs_user_group': 'int',
        'ldap_user': 'int',
        'ldap_user_group': 'int'
    }

    attribute_map = {
        'ad_user': 'ad_user',
        'ad_user_group': 'ad_user_group',
        'dir': 'dir',
        'fs_user': 'fs_user',
        'fs_user_group': 'fs_user_group',
        'ldap_user': 'ldap_user',
        'ldap_user_group': 'ldap_user_group'
    }

    def __init__(self, ad_user=None, ad_user_group=None, dir=None, fs_user=None, fs_user_group=None, ldap_user=None, ldap_user_group=None):  # noqa: E501
        """DfsQuotaTypeCount - a model defined in Swagger"""  # noqa: E501

        self._ad_user = None
        self._ad_user_group = None
        self._dir = None
        self._fs_user = None
        self._fs_user_group = None
        self._ldap_user = None
        self._ldap_user_group = None
        self.discriminator = None

        if ad_user is not None:
            self.ad_user = ad_user
        if ad_user_group is not None:
            self.ad_user_group = ad_user_group
        if dir is not None:
            self.dir = dir
        if fs_user is not None:
            self.fs_user = fs_user
        if fs_user_group is not None:
            self.fs_user_group = fs_user_group
        if ldap_user is not None:
            self.ldap_user = ldap_user
        if ldap_user_group is not None:
            self.ldap_user_group = ldap_user_group

    @property
    def ad_user(self):
        """Gets the ad_user of this DfsQuotaTypeCount.  # noqa: E501


        :return: The ad_user of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._ad_user

    @ad_user.setter
    def ad_user(self, ad_user):
        """Sets the ad_user of this DfsQuotaTypeCount.


        :param ad_user: The ad_user of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._ad_user = ad_user

    @property
    def ad_user_group(self):
        """Gets the ad_user_group of this DfsQuotaTypeCount.  # noqa: E501


        :return: The ad_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._ad_user_group

    @ad_user_group.setter
    def ad_user_group(self, ad_user_group):
        """Sets the ad_user_group of this DfsQuotaTypeCount.


        :param ad_user_group: The ad_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._ad_user_group = ad_user_group

    @property
    def dir(self):
        """Gets the dir of this DfsQuotaTypeCount.  # noqa: E501


        :return: The dir of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this DfsQuotaTypeCount.


        :param dir: The dir of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._dir = dir

    @property
    def fs_user(self):
        """Gets the fs_user of this DfsQuotaTypeCount.  # noqa: E501


        :return: The fs_user of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._fs_user

    @fs_user.setter
    def fs_user(self, fs_user):
        """Sets the fs_user of this DfsQuotaTypeCount.


        :param fs_user: The fs_user of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._fs_user = fs_user

    @property
    def fs_user_group(self):
        """Gets the fs_user_group of this DfsQuotaTypeCount.  # noqa: E501


        :return: The fs_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._fs_user_group

    @fs_user_group.setter
    def fs_user_group(self, fs_user_group):
        """Sets the fs_user_group of this DfsQuotaTypeCount.


        :param fs_user_group: The fs_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._fs_user_group = fs_user_group

    @property
    def ldap_user(self):
        """Gets the ldap_user of this DfsQuotaTypeCount.  # noqa: E501


        :return: The ldap_user of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._ldap_user

    @ldap_user.setter
    def ldap_user(self, ldap_user):
        """Sets the ldap_user of this DfsQuotaTypeCount.


        :param ldap_user: The ldap_user of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._ldap_user = ldap_user

    @property
    def ldap_user_group(self):
        """Gets the ldap_user_group of this DfsQuotaTypeCount.  # noqa: E501


        :return: The ldap_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :rtype: int
        """
        return self._ldap_user_group

    @ldap_user_group.setter
    def ldap_user_group(self, ldap_user_group):
        """Sets the ldap_user_group of this DfsQuotaTypeCount.


        :param ldap_user_group: The ldap_user_group of this DfsQuotaTypeCount.  # noqa: E501
        :type: int
        """

        self._ldap_user_group = ldap_user_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaTypeCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
