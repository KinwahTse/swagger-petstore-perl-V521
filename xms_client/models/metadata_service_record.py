# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.disk_nestview import DiskNestview  # noqa: F401,E501
# from xms_client.models.host_nestview import HostNestview  # noqa: F401,E501
# from xms_client.models.metadata_cluster_nestview import MetadataClusterNestview  # noqa: F401,E501
# from xms_client.models.metadata_service import MetadataService  # noqa: F401,E501
# from xms_client.models.metadata_service_stat import MetadataServiceStat  # noqa: F401,E501


class MetadataServiceRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_status': 'str',
        'cluster': 'ClusterNestview',
        'complete': 'bool',
        'create': 'datetime',
        'disk': 'DiskNestview',
        'host': 'HostNestview',
        'id': 'int',
        'meta_bytes': 'int',
        'metadata_cluster': 'MetadataClusterNestview',
        'name': 'str',
        'status': 'str',
        'up': 'bool',
        'update': 'datetime',
        'xmds_id': 'int',
        'samples': 'list[MetadataServiceStat]'
    }

    attribute_map = {
        'action_status': 'action_status',
        'cluster': 'cluster',
        'complete': 'complete',
        'create': 'create',
        'disk': 'disk',
        'host': 'host',
        'id': 'id',
        'meta_bytes': 'meta_bytes',
        'metadata_cluster': 'metadata_cluster',
        'name': 'name',
        'status': 'status',
        'up': 'up',
        'update': 'update',
        'xmds_id': 'xmds_id',
        'samples': 'samples'
    }

    def __init__(self, action_status=None, cluster=None, complete=None, create=None, disk=None, host=None, id=None, meta_bytes=None, metadata_cluster=None, name=None, status=None, up=None, update=None, xmds_id=None, samples=None):  # noqa: E501
        """MetadataServiceRecord - a model defined in Swagger"""  # noqa: E501

        self._action_status = None
        self._cluster = None
        self._complete = None
        self._create = None
        self._disk = None
        self._host = None
        self._id = None
        self._meta_bytes = None
        self._metadata_cluster = None
        self._name = None
        self._status = None
        self._up = None
        self._update = None
        self._xmds_id = None
        self._samples = None
        self.discriminator = None

        if action_status is not None:
            self.action_status = action_status
        if cluster is not None:
            self.cluster = cluster
        if complete is not None:
            self.complete = complete
        if create is not None:
            self.create = create
        if disk is not None:
            self.disk = disk
        if host is not None:
            self.host = host
        if id is not None:
            self.id = id
        if meta_bytes is not None:
            self.meta_bytes = meta_bytes
        if metadata_cluster is not None:
            self.metadata_cluster = metadata_cluster
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if up is not None:
            self.up = up
        if update is not None:
            self.update = update
        if xmds_id is not None:
            self.xmds_id = xmds_id
        if samples is not None:
            self.samples = samples

    @property
    def action_status(self):
        """Gets the action_status of this MetadataServiceRecord.  # noqa: E501


        :return: The action_status of this MetadataServiceRecord.  # noqa: E501
        :rtype: str
        """
        return self._action_status

    @action_status.setter
    def action_status(self, action_status):
        """Sets the action_status of this MetadataServiceRecord.


        :param action_status: The action_status of this MetadataServiceRecord.  # noqa: E501
        :type: str
        """

        self._action_status = action_status

    @property
    def cluster(self):
        """Gets the cluster of this MetadataServiceRecord.  # noqa: E501


        :return: The cluster of this MetadataServiceRecord.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this MetadataServiceRecord.


        :param cluster: The cluster of this MetadataServiceRecord.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def complete(self):
        """Gets the complete of this MetadataServiceRecord.  # noqa: E501


        :return: The complete of this MetadataServiceRecord.  # noqa: E501
        :rtype: bool
        """
        return self._complete

    @complete.setter
    def complete(self, complete):
        """Sets the complete of this MetadataServiceRecord.


        :param complete: The complete of this MetadataServiceRecord.  # noqa: E501
        :type: bool
        """

        self._complete = complete

    @property
    def create(self):
        """Gets the create of this MetadataServiceRecord.  # noqa: E501


        :return: The create of this MetadataServiceRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this MetadataServiceRecord.


        :param create: The create of this MetadataServiceRecord.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def disk(self):
        """Gets the disk of this MetadataServiceRecord.  # noqa: E501


        :return: The disk of this MetadataServiceRecord.  # noqa: E501
        :rtype: DiskNestview
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this MetadataServiceRecord.


        :param disk: The disk of this MetadataServiceRecord.  # noqa: E501
        :type: DiskNestview
        """

        self._disk = disk

    @property
    def host(self):
        """Gets the host of this MetadataServiceRecord.  # noqa: E501


        :return: The host of this MetadataServiceRecord.  # noqa: E501
        :rtype: HostNestview
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this MetadataServiceRecord.


        :param host: The host of this MetadataServiceRecord.  # noqa: E501
        :type: HostNestview
        """

        self._host = host

    @property
    def id(self):
        """Gets the id of this MetadataServiceRecord.  # noqa: E501


        :return: The id of this MetadataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataServiceRecord.


        :param id: The id of this MetadataServiceRecord.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def meta_bytes(self):
        """Gets the meta_bytes of this MetadataServiceRecord.  # noqa: E501


        :return: The meta_bytes of this MetadataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._meta_bytes

    @meta_bytes.setter
    def meta_bytes(self, meta_bytes):
        """Sets the meta_bytes of this MetadataServiceRecord.


        :param meta_bytes: The meta_bytes of this MetadataServiceRecord.  # noqa: E501
        :type: int
        """

        self._meta_bytes = meta_bytes

    @property
    def metadata_cluster(self):
        """Gets the metadata_cluster of this MetadataServiceRecord.  # noqa: E501


        :return: The metadata_cluster of this MetadataServiceRecord.  # noqa: E501
        :rtype: MetadataClusterNestview
        """
        return self._metadata_cluster

    @metadata_cluster.setter
    def metadata_cluster(self, metadata_cluster):
        """Sets the metadata_cluster of this MetadataServiceRecord.


        :param metadata_cluster: The metadata_cluster of this MetadataServiceRecord.  # noqa: E501
        :type: MetadataClusterNestview
        """

        self._metadata_cluster = metadata_cluster

    @property
    def name(self):
        """Gets the name of this MetadataServiceRecord.  # noqa: E501


        :return: The name of this MetadataServiceRecord.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MetadataServiceRecord.


        :param name: The name of this MetadataServiceRecord.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this MetadataServiceRecord.  # noqa: E501


        :return: The status of this MetadataServiceRecord.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MetadataServiceRecord.


        :param status: The status of this MetadataServiceRecord.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def up(self):
        """Gets the up of this MetadataServiceRecord.  # noqa: E501


        :return: The up of this MetadataServiceRecord.  # noqa: E501
        :rtype: bool
        """
        return self._up

    @up.setter
    def up(self, up):
        """Sets the up of this MetadataServiceRecord.


        :param up: The up of this MetadataServiceRecord.  # noqa: E501
        :type: bool
        """

        self._up = up

    @property
    def update(self):
        """Gets the update of this MetadataServiceRecord.  # noqa: E501


        :return: The update of this MetadataServiceRecord.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this MetadataServiceRecord.


        :param update: The update of this MetadataServiceRecord.  # noqa: E501
        :type: datetime
        """

        self._update = update

    @property
    def xmds_id(self):
        """Gets the xmds_id of this MetadataServiceRecord.  # noqa: E501


        :return: The xmds_id of this MetadataServiceRecord.  # noqa: E501
        :rtype: int
        """
        return self._xmds_id

    @xmds_id.setter
    def xmds_id(self, xmds_id):
        """Sets the xmds_id of this MetadataServiceRecord.


        :param xmds_id: The xmds_id of this MetadataServiceRecord.  # noqa: E501
        :type: int
        """

        self._xmds_id = xmds_id

    @property
    def samples(self):
        """Gets the samples of this MetadataServiceRecord.  # noqa: E501


        :return: The samples of this MetadataServiceRecord.  # noqa: E501
        :rtype: list[MetadataServiceStat]
        """
        return self._samples

    @samples.setter
    def samples(self, samples):
        """Sets the samples of this MetadataServiceRecord.


        :param samples: The samples of this MetadataServiceRecord.  # noqa: E501
        :type: list[MetadataServiceStat]
        """

        self._samples = samples

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataServiceRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
