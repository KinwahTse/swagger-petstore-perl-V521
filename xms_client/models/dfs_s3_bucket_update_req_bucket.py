# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsS3BucketUpdateReqBucket(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_user_permission': 'str',
        'auth_user_permission': 'str',
        'data_verify': 'bool',
        'enable_etag': 'bool',
        'owner_id': 'int',
        'owner_permission': 'str'
    }

    attribute_map = {
        'all_user_permission': 'all_user_permission',
        'auth_user_permission': 'auth_user_permission',
        'data_verify': 'data_verify',
        'enable_etag': 'enable_etag',
        'owner_id': 'owner_id',
        'owner_permission': 'owner_permission'
    }

    def __init__(self, all_user_permission=None, auth_user_permission=None, data_verify=None, enable_etag=None, owner_id=None, owner_permission=None):  # noqa: E501
        """DfsS3BucketUpdateReqBucket - a model defined in Swagger"""  # noqa: E501

        self._all_user_permission = None
        self._auth_user_permission = None
        self._data_verify = None
        self._enable_etag = None
        self._owner_id = None
        self._owner_permission = None
        self.discriminator = None

        if all_user_permission is not None:
            self.all_user_permission = all_user_permission
        if auth_user_permission is not None:
            self.auth_user_permission = auth_user_permission
        if data_verify is not None:
            self.data_verify = data_verify
        if enable_etag is not None:
            self.enable_etag = enable_etag
        if owner_id is not None:
            self.owner_id = owner_id
        if owner_permission is not None:
            self.owner_permission = owner_permission

    @property
    def all_user_permission(self):
        """Gets the all_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The all_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: str
        """
        return self._all_user_permission

    @all_user_permission.setter
    def all_user_permission(self, all_user_permission):
        """Sets the all_user_permission of this DfsS3BucketUpdateReqBucket.


        :param all_user_permission: The all_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: str
        """

        self._all_user_permission = all_user_permission

    @property
    def auth_user_permission(self):
        """Gets the auth_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The auth_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: str
        """
        return self._auth_user_permission

    @auth_user_permission.setter
    def auth_user_permission(self, auth_user_permission):
        """Sets the auth_user_permission of this DfsS3BucketUpdateReqBucket.


        :param auth_user_permission: The auth_user_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: str
        """

        self._auth_user_permission = auth_user_permission

    @property
    def data_verify(self):
        """Gets the data_verify of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The data_verify of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: bool
        """
        return self._data_verify

    @data_verify.setter
    def data_verify(self, data_verify):
        """Sets the data_verify of this DfsS3BucketUpdateReqBucket.


        :param data_verify: The data_verify of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: bool
        """

        self._data_verify = data_verify

    @property
    def enable_etag(self):
        """Gets the enable_etag of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The enable_etag of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: bool
        """
        return self._enable_etag

    @enable_etag.setter
    def enable_etag(self, enable_etag):
        """Sets the enable_etag of this DfsS3BucketUpdateReqBucket.


        :param enable_etag: The enable_etag of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: bool
        """

        self._enable_etag = enable_etag

    @property
    def owner_id(self):
        """Gets the owner_id of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The owner_id of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: int
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this DfsS3BucketUpdateReqBucket.


        :param owner_id: The owner_id of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: int
        """

        self._owner_id = owner_id

    @property
    def owner_permission(self):
        """Gets the owner_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501


        :return: The owner_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :rtype: str
        """
        return self._owner_permission

    @owner_permission.setter
    def owner_permission(self, owner_permission):
        """Sets the owner_permission of this DfsS3BucketUpdateReqBucket.


        :param owner_permission: The owner_permission of this DfsS3BucketUpdateReqBucket.  # noqa: E501
        :type: str
        """

        self._owner_permission = owner_permission

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsS3BucketUpdateReqBucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
