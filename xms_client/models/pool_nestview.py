# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class PoolNestview(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'numa_apply_policy': 'str',
        'numa_bind_policy': 'str',
        'numa_enabled': 'bool',
        'status': 'str',
        'stretched': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'numa_apply_policy': 'numa_apply_policy',
        'numa_bind_policy': 'numa_bind_policy',
        'numa_enabled': 'numa_enabled',
        'status': 'status',
        'stretched': 'stretched'
    }

    def __init__(self, id=None, name=None, numa_apply_policy=None, numa_bind_policy=None, numa_enabled=None, status=None, stretched=None):  # noqa: E501
        """PoolNestview - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._numa_apply_policy = None
        self._numa_bind_policy = None
        self._numa_enabled = None
        self._status = None
        self._stretched = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if numa_apply_policy is not None:
            self.numa_apply_policy = numa_apply_policy
        if numa_bind_policy is not None:
            self.numa_bind_policy = numa_bind_policy
        if numa_enabled is not None:
            self.numa_enabled = numa_enabled
        if status is not None:
            self.status = status
        if stretched is not None:
            self.stretched = stretched

    @property
    def id(self):
        """Gets the id of this PoolNestview.  # noqa: E501


        :return: The id of this PoolNestview.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PoolNestview.


        :param id: The id of this PoolNestview.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PoolNestview.  # noqa: E501


        :return: The name of this PoolNestview.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoolNestview.


        :param name: The name of this PoolNestview.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def numa_apply_policy(self):
        """Gets the numa_apply_policy of this PoolNestview.  # noqa: E501


        :return: The numa_apply_policy of this PoolNestview.  # noqa: E501
        :rtype: str
        """
        return self._numa_apply_policy

    @numa_apply_policy.setter
    def numa_apply_policy(self, numa_apply_policy):
        """Sets the numa_apply_policy of this PoolNestview.


        :param numa_apply_policy: The numa_apply_policy of this PoolNestview.  # noqa: E501
        :type: str
        """

        self._numa_apply_policy = numa_apply_policy

    @property
    def numa_bind_policy(self):
        """Gets the numa_bind_policy of this PoolNestview.  # noqa: E501


        :return: The numa_bind_policy of this PoolNestview.  # noqa: E501
        :rtype: str
        """
        return self._numa_bind_policy

    @numa_bind_policy.setter
    def numa_bind_policy(self, numa_bind_policy):
        """Sets the numa_bind_policy of this PoolNestview.


        :param numa_bind_policy: The numa_bind_policy of this PoolNestview.  # noqa: E501
        :type: str
        """

        self._numa_bind_policy = numa_bind_policy

    @property
    def numa_enabled(self):
        """Gets the numa_enabled of this PoolNestview.  # noqa: E501


        :return: The numa_enabled of this PoolNestview.  # noqa: E501
        :rtype: bool
        """
        return self._numa_enabled

    @numa_enabled.setter
    def numa_enabled(self, numa_enabled):
        """Sets the numa_enabled of this PoolNestview.


        :param numa_enabled: The numa_enabled of this PoolNestview.  # noqa: E501
        :type: bool
        """

        self._numa_enabled = numa_enabled

    @property
    def status(self):
        """Gets the status of this PoolNestview.  # noqa: E501


        :return: The status of this PoolNestview.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PoolNestview.


        :param status: The status of this PoolNestview.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def stretched(self):
        """Gets the stretched of this PoolNestview.  # noqa: E501


        :return: The stretched of this PoolNestview.  # noqa: E501
        :rtype: bool
        """
        return self._stretched

    @stretched.setter
    def stretched(self, stretched):
        """Sets the stretched of this PoolNestview.


        :param stretched: The stretched of this PoolNestview.  # noqa: E501
        :type: bool
        """

        self._stretched = stretched

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoolNestview):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
