# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six


class DfsQuotaCreateReqQuota(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dfs_rootfs_id': 'int',
        'files_grace_time': 'int',
        'files_hard_quota': 'int',
        'files_soft_quota': 'int',
        'files_suggest_quota': 'int',
        'fs_user_group_id': 'int',
        'fs_user_id': 'int',
        'path': 'str',
        'size_grace_time': 'int',
        'size_hard_quota': 'int',
        'size_soft_quota': 'int',
        'size_suggest_quota': 'int',
        'type': 'str',
        'user_group_name': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'dfs_rootfs_id': 'dfs_rootfs_id',
        'files_grace_time': 'files_grace_time',
        'files_hard_quota': 'files_hard_quota',
        'files_soft_quota': 'files_soft_quota',
        'files_suggest_quota': 'files_suggest_quota',
        'fs_user_group_id': 'fs_user_group_id',
        'fs_user_id': 'fs_user_id',
        'path': 'path',
        'size_grace_time': 'size_grace_time',
        'size_hard_quota': 'size_hard_quota',
        'size_soft_quota': 'size_soft_quota',
        'size_suggest_quota': 'size_suggest_quota',
        'type': 'type',
        'user_group_name': 'user_group_name',
        'user_name': 'user_name'
    }

    def __init__(self, dfs_rootfs_id=None, files_grace_time=None, files_hard_quota=None, files_soft_quota=None, files_suggest_quota=None, fs_user_group_id=None, fs_user_id=None, path=None, size_grace_time=None, size_hard_quota=None, size_soft_quota=None, size_suggest_quota=None, type=None, user_group_name=None, user_name=None):  # noqa: E501
        """DfsQuotaCreateReqQuota - a model defined in Swagger"""  # noqa: E501

        self._dfs_rootfs_id = None
        self._files_grace_time = None
        self._files_hard_quota = None
        self._files_soft_quota = None
        self._files_suggest_quota = None
        self._fs_user_group_id = None
        self._fs_user_id = None
        self._path = None
        self._size_grace_time = None
        self._size_hard_quota = None
        self._size_soft_quota = None
        self._size_suggest_quota = None
        self._type = None
        self._user_group_name = None
        self._user_name = None
        self.discriminator = None

        self.dfs_rootfs_id = dfs_rootfs_id
        if files_grace_time is not None:
            self.files_grace_time = files_grace_time
        if files_hard_quota is not None:
            self.files_hard_quota = files_hard_quota
        if files_soft_quota is not None:
            self.files_soft_quota = files_soft_quota
        if files_suggest_quota is not None:
            self.files_suggest_quota = files_suggest_quota
        if fs_user_group_id is not None:
            self.fs_user_group_id = fs_user_group_id
        if fs_user_id is not None:
            self.fs_user_id = fs_user_id
        self.path = path
        if size_grace_time is not None:
            self.size_grace_time = size_grace_time
        if size_hard_quota is not None:
            self.size_hard_quota = size_hard_quota
        if size_soft_quota is not None:
            self.size_soft_quota = size_soft_quota
        if size_suggest_quota is not None:
            self.size_suggest_quota = size_suggest_quota
        if type is not None:
            self.type = type
        if user_group_name is not None:
            self.user_group_name = user_group_name
        if user_name is not None:
            self.user_name = user_name

    @property
    def dfs_rootfs_id(self):
        """Gets the dfs_rootfs_id of this DfsQuotaCreateReqQuota.  # noqa: E501

        id of dfs rootfs  # noqa: E501

        :return: The dfs_rootfs_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._dfs_rootfs_id

    @dfs_rootfs_id.setter
    def dfs_rootfs_id(self, dfs_rootfs_id):
        """Sets the dfs_rootfs_id of this DfsQuotaCreateReqQuota.

        id of dfs rootfs  # noqa: E501

        :param dfs_rootfs_id: The dfs_rootfs_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """
        if dfs_rootfs_id is None:
            raise ValueError("Invalid value for `dfs_rootfs_id`, must not be `None`")  # noqa: E501

        self._dfs_rootfs_id = dfs_rootfs_id

    @property
    def files_grace_time(self):
        """Gets the files_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501

        grace time for files soft quota  # noqa: E501

        :return: The files_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_grace_time

    @files_grace_time.setter
    def files_grace_time(self, files_grace_time):
        """Sets the files_grace_time of this DfsQuotaCreateReqQuota.

        grace time for files soft quota  # noqa: E501

        :param files_grace_time: The files_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._files_grace_time = files_grace_time

    @property
    def files_hard_quota(self):
        """Gets the files_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        hard quota of files  # noqa: E501

        :return: The files_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_hard_quota

    @files_hard_quota.setter
    def files_hard_quota(self, files_hard_quota):
        """Sets the files_hard_quota of this DfsQuotaCreateReqQuota.

        hard quota of files  # noqa: E501

        :param files_hard_quota: The files_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._files_hard_quota = files_hard_quota

    @property
    def files_soft_quota(self):
        """Gets the files_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        soft quota of files  # noqa: E501

        :return: The files_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_soft_quota

    @files_soft_quota.setter
    def files_soft_quota(self, files_soft_quota):
        """Sets the files_soft_quota of this DfsQuotaCreateReqQuota.

        soft quota of files  # noqa: E501

        :param files_soft_quota: The files_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._files_soft_quota = files_soft_quota

    @property
    def files_suggest_quota(self):
        """Gets the files_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        suggest quota of files  # noqa: E501

        :return: The files_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._files_suggest_quota

    @files_suggest_quota.setter
    def files_suggest_quota(self, files_suggest_quota):
        """Sets the files_suggest_quota of this DfsQuotaCreateReqQuota.

        suggest quota of files  # noqa: E501

        :param files_suggest_quota: The files_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._files_suggest_quota = files_suggest_quota

    @property
    def fs_user_group_id(self):
        """Gets the fs_user_group_id of this DfsQuotaCreateReqQuota.  # noqa: E501

        fs user group id  # noqa: E501

        :return: The fs_user_group_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._fs_user_group_id

    @fs_user_group_id.setter
    def fs_user_group_id(self, fs_user_group_id):
        """Sets the fs_user_group_id of this DfsQuotaCreateReqQuota.

        fs user group id  # noqa: E501

        :param fs_user_group_id: The fs_user_group_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._fs_user_group_id = fs_user_group_id

    @property
    def fs_user_id(self):
        """Gets the fs_user_id of this DfsQuotaCreateReqQuota.  # noqa: E501

        fs user id  # noqa: E501

        :return: The fs_user_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._fs_user_id

    @fs_user_id.setter
    def fs_user_id(self, fs_user_id):
        """Sets the fs_user_id of this DfsQuotaCreateReqQuota.

        fs user id  # noqa: E501

        :param fs_user_id: The fs_user_id of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._fs_user_id = fs_user_id

    @property
    def path(self):
        """Gets the path of this DfsQuotaCreateReqQuota.  # noqa: E501

        path of quota  # noqa: E501

        :return: The path of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this DfsQuotaCreateReqQuota.

        path of quota  # noqa: E501

        :param path: The path of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def size_grace_time(self):
        """Gets the size_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501

        grace time for size soft quota  # noqa: E501

        :return: The size_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_grace_time

    @size_grace_time.setter
    def size_grace_time(self, size_grace_time):
        """Sets the size_grace_time of this DfsQuotaCreateReqQuota.

        grace time for size soft quota  # noqa: E501

        :param size_grace_time: The size_grace_time of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._size_grace_time = size_grace_time

    @property
    def size_hard_quota(self):
        """Gets the size_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        hard quota of size  # noqa: E501

        :return: The size_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_hard_quota

    @size_hard_quota.setter
    def size_hard_quota(self, size_hard_quota):
        """Sets the size_hard_quota of this DfsQuotaCreateReqQuota.

        hard quota of size  # noqa: E501

        :param size_hard_quota: The size_hard_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._size_hard_quota = size_hard_quota

    @property
    def size_soft_quota(self):
        """Gets the size_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        soft quota of size  # noqa: E501

        :return: The size_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_soft_quota

    @size_soft_quota.setter
    def size_soft_quota(self, size_soft_quota):
        """Sets the size_soft_quota of this DfsQuotaCreateReqQuota.

        soft quota of size  # noqa: E501

        :param size_soft_quota: The size_soft_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._size_soft_quota = size_soft_quota

    @property
    def size_suggest_quota(self):
        """Gets the size_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501

        suggest quota of size  # noqa: E501

        :return: The size_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: int
        """
        return self._size_suggest_quota

    @size_suggest_quota.setter
    def size_suggest_quota(self, size_suggest_quota):
        """Sets the size_suggest_quota of this DfsQuotaCreateReqQuota.

        suggest quota of size  # noqa: E501

        :param size_suggest_quota: The size_suggest_quota of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: int
        """

        self._size_suggest_quota = size_suggest_quota

    @property
    def type(self):
        """Gets the type of this DfsQuotaCreateReqQuota.  # noqa: E501

        type of dfs quota  # noqa: E501

        :return: The type of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DfsQuotaCreateReqQuota.

        type of dfs quota  # noqa: E501

        :param type: The type of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def user_group_name(self):
        """Gets the user_group_name of this DfsQuotaCreateReqQuota.  # noqa: E501

        user group name  # noqa: E501

        :return: The user_group_name of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: str
        """
        return self._user_group_name

    @user_group_name.setter
    def user_group_name(self, user_group_name):
        """Sets the user_group_name of this DfsQuotaCreateReqQuota.

        user group name  # noqa: E501

        :param user_group_name: The user_group_name of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: str
        """

        self._user_group_name = user_group_name

    @property
    def user_name(self):
        """Gets the user_name of this DfsQuotaCreateReqQuota.  # noqa: E501

        user name  # noqa: E501

        :return: The user_name of this DfsQuotaCreateReqQuota.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this DfsQuotaCreateReqQuota.

        user name  # noqa: E501

        :param user_name: The user_name of this DfsQuotaCreateReqQuota.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsQuotaCreateReqQuota):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
