# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.s3_lb_group_web_service_config_credential import S3LbGroupWebServiceConfigCredential  # noqa: F401,E501


class S3LbGroupWebServiceConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authentication': 'str',
        'credential': 'S3LbGroupWebServiceConfigCredential',
        'password': 'str',
        'protocol': 'str',
        'share_path': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'authentication': 'authentication',
        'credential': 'credential',
        'password': 'password',
        'protocol': 'protocol',
        'share_path': 'share_path',
        'user_name': 'user_name'
    }

    def __init__(self, authentication=None, credential=None, password=None, protocol=None, share_path=None, user_name=None):  # noqa: E501
        """S3LbGroupWebServiceConfig - a model defined in Swagger"""  # noqa: E501

        self._authentication = None
        self._credential = None
        self._password = None
        self._protocol = None
        self._share_path = None
        self._user_name = None
        self.discriminator = None

        self.authentication = authentication
        if credential is not None:
            self.credential = credential
        if password is not None:
            self.password = password
        self.protocol = protocol
        self.share_path = share_path
        if user_name is not None:
            self.user_name = user_name

    @property
    def authentication(self):
        """Gets the authentication of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The authentication of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this S3LbGroupWebServiceConfig.


        :param authentication: The authentication of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: str
        """
        if authentication is None:
            raise ValueError("Invalid value for `authentication`, must not be `None`")  # noqa: E501

        self._authentication = authentication

    @property
    def credential(self):
        """Gets the credential of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The credential of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: S3LbGroupWebServiceConfigCredential
        """
        return self._credential

    @credential.setter
    def credential(self, credential):
        """Sets the credential of this S3LbGroupWebServiceConfig.


        :param credential: The credential of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: S3LbGroupWebServiceConfigCredential
        """

        self._credential = credential

    @property
    def password(self):
        """Gets the password of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The password of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this S3LbGroupWebServiceConfig.


        :param password: The password of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def protocol(self):
        """Gets the protocol of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The protocol of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this S3LbGroupWebServiceConfig.


        :param protocol: The protocol of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def share_path(self):
        """Gets the share_path of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The share_path of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._share_path

    @share_path.setter
    def share_path(self, share_path):
        """Sets the share_path of this S3LbGroupWebServiceConfig.


        :param share_path: The share_path of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: str
        """
        if share_path is None:
            raise ValueError("Invalid value for `share_path`, must not be `None`")  # noqa: E501

        self._share_path = share_path

    @property
    def user_name(self):
        """Gets the user_name of this S3LbGroupWebServiceConfig.  # noqa: E501


        :return: The user_name of this S3LbGroupWebServiceConfig.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this S3LbGroupWebServiceConfig.


        :param user_name: The user_name of this S3LbGroupWebServiceConfig.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, S3LbGroupWebServiceConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
