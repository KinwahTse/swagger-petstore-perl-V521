# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401
import six

# from xms_client.models.cluster_nestview import ClusterNestview  # noqa: F401,E501
# from xms_client.models.dfs_rootfs import DfsRootfs  # noqa: F401,E501
# from xms_client.models.dfs_tier import DfsTier  # noqa: F401,E501
# from xms_client.models.fs_user import FSUser  # noqa: F401,E501
# from xms_client.models.fs_user_group import FSUserGroup  # noqa: F401,E501


class DfsPolicy(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster': 'ClusterNestview',
        'create': 'datetime',
        'description': 'str',
        'dfs_rootfs': 'DfsRootfs',
        'dfs_tier': 'DfsTier',
        'file_create': 'datetime',
        'file_name': 'str',
        'file_path': 'str',
        'fs_user': 'FSUser',
        'fs_user_group': 'FSUserGroup',
        'id': 'int',
        'is_default': 'bool',
        'name': 'str',
        'update': 'datetime'
    }

    attribute_map = {
        'cluster': 'cluster',
        'create': 'create',
        'description': 'description',
        'dfs_rootfs': 'dfs_rootfs',
        'dfs_tier': 'dfs_tier',
        'file_create': 'file_Create',
        'file_name': 'file_name',
        'file_path': 'file_path',
        'fs_user': 'fs_user',
        'fs_user_group': 'fs_user_group',
        'id': 'id',
        'is_default': 'is_default',
        'name': 'name',
        'update': 'update'
    }

    def __init__(self, cluster=None, create=None, description=None, dfs_rootfs=None, dfs_tier=None, file_create=None, file_name=None, file_path=None, fs_user=None, fs_user_group=None, id=None, is_default=None, name=None, update=None):  # noqa: E501
        """DfsPolicy - a model defined in Swagger"""  # noqa: E501

        self._cluster = None
        self._create = None
        self._description = None
        self._dfs_rootfs = None
        self._dfs_tier = None
        self._file_create = None
        self._file_name = None
        self._file_path = None
        self._fs_user = None
        self._fs_user_group = None
        self._id = None
        self._is_default = None
        self._name = None
        self._update = None
        self.discriminator = None

        if cluster is not None:
            self.cluster = cluster
        if create is not None:
            self.create = create
        if description is not None:
            self.description = description
        if dfs_rootfs is not None:
            self.dfs_rootfs = dfs_rootfs
        if dfs_tier is not None:
            self.dfs_tier = dfs_tier
        if file_create is not None:
            self.file_create = file_create
        if file_name is not None:
            self.file_name = file_name
        if file_path is not None:
            self.file_path = file_path
        if fs_user is not None:
            self.fs_user = fs_user
        if fs_user_group is not None:
            self.fs_user_group = fs_user_group
        if id is not None:
            self.id = id
        if is_default is not None:
            self.is_default = is_default
        if name is not None:
            self.name = name
        if update is not None:
            self.update = update

    @property
    def cluster(self):
        """Gets the cluster of this DfsPolicy.  # noqa: E501


        :return: The cluster of this DfsPolicy.  # noqa: E501
        :rtype: ClusterNestview
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this DfsPolicy.


        :param cluster: The cluster of this DfsPolicy.  # noqa: E501
        :type: ClusterNestview
        """

        self._cluster = cluster

    @property
    def create(self):
        """Gets the create of this DfsPolicy.  # noqa: E501


        :return: The create of this DfsPolicy.  # noqa: E501
        :rtype: datetime
        """
        return self._create

    @create.setter
    def create(self, create):
        """Sets the create of this DfsPolicy.


        :param create: The create of this DfsPolicy.  # noqa: E501
        :type: datetime
        """

        self._create = create

    @property
    def description(self):
        """Gets the description of this DfsPolicy.  # noqa: E501


        :return: The description of this DfsPolicy.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DfsPolicy.


        :param description: The description of this DfsPolicy.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dfs_rootfs(self):
        """Gets the dfs_rootfs of this DfsPolicy.  # noqa: E501


        :return: The dfs_rootfs of this DfsPolicy.  # noqa: E501
        :rtype: DfsRootfs
        """
        return self._dfs_rootfs

    @dfs_rootfs.setter
    def dfs_rootfs(self, dfs_rootfs):
        """Sets the dfs_rootfs of this DfsPolicy.


        :param dfs_rootfs: The dfs_rootfs of this DfsPolicy.  # noqa: E501
        :type: DfsRootfs
        """

        self._dfs_rootfs = dfs_rootfs

    @property
    def dfs_tier(self):
        """Gets the dfs_tier of this DfsPolicy.  # noqa: E501


        :return: The dfs_tier of this DfsPolicy.  # noqa: E501
        :rtype: DfsTier
        """
        return self._dfs_tier

    @dfs_tier.setter
    def dfs_tier(self, dfs_tier):
        """Sets the dfs_tier of this DfsPolicy.


        :param dfs_tier: The dfs_tier of this DfsPolicy.  # noqa: E501
        :type: DfsTier
        """

        self._dfs_tier = dfs_tier

    @property
    def file_create(self):
        """Gets the file_create of this DfsPolicy.  # noqa: E501


        :return: The file_create of this DfsPolicy.  # noqa: E501
        :rtype: datetime
        """
        return self._file_create

    @file_create.setter
    def file_create(self, file_create):
        """Sets the file_create of this DfsPolicy.


        :param file_create: The file_create of this DfsPolicy.  # noqa: E501
        :type: datetime
        """

        self._file_create = file_create

    @property
    def file_name(self):
        """Gets the file_name of this DfsPolicy.  # noqa: E501

        rules  # noqa: E501

        :return: The file_name of this DfsPolicy.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this DfsPolicy.

        rules  # noqa: E501

        :param file_name: The file_name of this DfsPolicy.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    @property
    def file_path(self):
        """Gets the file_path of this DfsPolicy.  # noqa: E501


        :return: The file_path of this DfsPolicy.  # noqa: E501
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this DfsPolicy.


        :param file_path: The file_path of this DfsPolicy.  # noqa: E501
        :type: str
        """

        self._file_path = file_path

    @property
    def fs_user(self):
        """Gets the fs_user of this DfsPolicy.  # noqa: E501


        :return: The fs_user of this DfsPolicy.  # noqa: E501
        :rtype: FSUser
        """
        return self._fs_user

    @fs_user.setter
    def fs_user(self, fs_user):
        """Sets the fs_user of this DfsPolicy.


        :param fs_user: The fs_user of this DfsPolicy.  # noqa: E501
        :type: FSUser
        """

        self._fs_user = fs_user

    @property
    def fs_user_group(self):
        """Gets the fs_user_group of this DfsPolicy.  # noqa: E501


        :return: The fs_user_group of this DfsPolicy.  # noqa: E501
        :rtype: FSUserGroup
        """
        return self._fs_user_group

    @fs_user_group.setter
    def fs_user_group(self, fs_user_group):
        """Sets the fs_user_group of this DfsPolicy.


        :param fs_user_group: The fs_user_group of this DfsPolicy.  # noqa: E501
        :type: FSUserGroup
        """

        self._fs_user_group = fs_user_group

    @property
    def id(self):
        """Gets the id of this DfsPolicy.  # noqa: E501


        :return: The id of this DfsPolicy.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DfsPolicy.


        :param id: The id of this DfsPolicy.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this DfsPolicy.  # noqa: E501


        :return: The is_default of this DfsPolicy.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this DfsPolicy.


        :param is_default: The is_default of this DfsPolicy.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this DfsPolicy.  # noqa: E501


        :return: The name of this DfsPolicy.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DfsPolicy.


        :param name: The name of this DfsPolicy.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def update(self):
        """Gets the update of this DfsPolicy.  # noqa: E501


        :return: The update of this DfsPolicy.  # noqa: E501
        :rtype: datetime
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this DfsPolicy.


        :param update: The update of this DfsPolicy.  # noqa: E501
        :type: datetime
        """

        self._update = update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DfsPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
