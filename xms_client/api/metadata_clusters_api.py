# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class MetadataClustersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_metadata_services_to_cluster(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """add_metadata_services_to_cluster  # noqa: E501

        Add metadata services to cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_metadata_services_to_cluster(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterAddServicesReq body: metadata services (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_metadata_services_to_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.add_metadata_services_to_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
            return data

    def add_metadata_services_to_cluster_with_http_info(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """add_metadata_services_to_cluster  # noqa: E501

        Add metadata services to cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_metadata_services_to_cluster_with_http_info(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterAddServicesReq body: metadata services (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_metadata_services_to_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `add_metadata_services_to_cluster`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `add_metadata_services_to_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}:add-metadata-services', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_metadata_cluster(self, body, **kwargs):  # noqa: E501
        """create_metadata_cluster  # noqa: E501

        Create metadata cluster on specific disk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_metadata_cluster(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param MetadataClusterCreateReq body: metadata cluster info (required)
        :param str cluster_id: cluster id
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_metadata_cluster_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_metadata_cluster_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_metadata_cluster_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_metadata_cluster  # noqa: E501

        Create metadata cluster on specific disk  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_metadata_cluster_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param MetadataClusterCreateReq body: metadata cluster info (required)
        :param str cluster_id: cluster id
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_metadata_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_metadata_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_metadata_cluster(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """delete_metadata_cluster  # noqa: E501

        delete a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_metadata_cluster(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_metadata_cluster_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_metadata_cluster_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
            return data

    def delete_metadata_cluster_with_http_info(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """delete_metadata_cluster  # noqa: E501

        delete a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_metadata_cluster_with_http_info(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_metadata_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `delete_metadata_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_cluster(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster  # noqa: E501

        get a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_cluster_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_cluster_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_metadata_cluster_with_http_info(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster  # noqa: E501

        get a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster_with_http_info(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `get_metadata_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_cluster_predictions(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster_predictions  # noqa: E501

        get a metadata cluster's prediction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster_predictions(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterPredictionsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_cluster_predictions_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_cluster_predictions_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_metadata_cluster_predictions_with_http_info(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster_predictions  # noqa: E501

        get a metadata cluster's prediction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster_predictions_with_http_info(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :return: MetadataClusterPredictionsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_cluster_predictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `get_metadata_cluster_predictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}/predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterPredictionsResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_cluster_samples(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster_samples  # noqa: E501

        get samples of a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster_samples(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: MetadataClusterSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_cluster_samples_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_cluster_samples_with_http_info(metadata_cluster_id, **kwargs)  # noqa: E501
            return data

    def get_metadata_cluster_samples_with_http_info(self, metadata_cluster_id, **kwargs):  # noqa: E501
        """get_metadata_cluster_samples  # noqa: E501

        get samples of a metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_cluster_samples_with_http_info(metadata_cluster_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: MetadataClusterSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_cluster_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `get_metadata_cluster_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterSamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_metadata_clusters(self, **kwargs):  # noqa: E501
        """list_metadata_clusters  # noqa: E501

        List all metadata clusters in the cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_metadata_clusters(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param str cluster_id: cluster id
        :param int host_id: host id
        :param int metadata_cluster_id: metadata cluster id
        :param str q: query param of search
        :param str sort: sort param of search
        :return: MetadataClustersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_metadata_clusters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_metadata_clusters_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_metadata_clusters_with_http_info(self, **kwargs):  # noqa: E501
        """list_metadata_clusters  # noqa: E501

        List all metadata clusters in the cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_metadata_clusters_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int limit: paging param
        :param int offset: paging param
        :param str cluster_id: cluster id
        :param int host_id: host id
        :param int metadata_cluster_id: metadata cluster id
        :param str q: query param of search
        :param str sort: sort param of search
        :return: MetadataClustersResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'cluster_id', 'host_id', 'metadata_cluster_id', 'q', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_metadata_clusters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501
        if 'host_id' in params:
            query_params.append(('host_id', params['host_id']))  # noqa: E501
        if 'metadata_cluster_id' in params:
            query_params.append(('metadata_cluster_id', params['metadata_cluster_id']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClustersResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_metadata_services_from_cluster(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """remove_metadata_services_from_cluster  # noqa: E501

        Remove metadata services from cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_metadata_services_from_cluster(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterRemoveServicesReq body: metadata services (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.remove_metadata_services_from_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_metadata_services_from_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
            return data

    def remove_metadata_services_from_cluster_with_http_info(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """remove_metadata_services_from_cluster  # noqa: E501

        Remove metadata services from cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.remove_metadata_services_from_cluster_with_http_info(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterRemoveServicesReq body: metadata services (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_metadata_services_from_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `remove_metadata_services_from_cluster`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `remove_metadata_services_from_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}:remove-metadata-services', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadata_cluster(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """update_metadata_cluster  # noqa: E501

        update metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_metadata_cluster(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterUpdateReq body: metadata cluster info (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_metadata_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_metadata_cluster_with_http_info(metadata_cluster_id, body, **kwargs)  # noqa: E501
            return data

    def update_metadata_cluster_with_http_info(self, metadata_cluster_id, body, **kwargs):  # noqa: E501
        """update_metadata_cluster  # noqa: E501

        update metadata cluster  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_metadata_cluster_with_http_info(metadata_cluster_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int metadata_cluster_id: metadata cluster id (required)
        :param MetadataClusterUpdateReq body: metadata cluster info (required)
        :return: MetadataClusterResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['metadata_cluster_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata_cluster" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'metadata_cluster_id' is set
        if ('metadata_cluster_id' not in params or
                params['metadata_cluster_id'] is None):
            raise ValueError("Missing the required parameter `metadata_cluster_id` when calling `update_metadata_cluster`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_metadata_cluster`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'metadata_cluster_id' in params:
            path_params['metadata_cluster_id'] = params['metadata_cluster_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/metadata-clusters/{metadata_cluster_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MetadataClusterResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
