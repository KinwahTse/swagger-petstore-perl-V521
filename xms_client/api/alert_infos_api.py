# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class AlertInfosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ack_alert_info(self, alert_info_id, **kwargs):  # noqa: E501
        """ack_alert_info  # noqa: E501

        set the acked status of alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ack_alert_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.ack_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.ack_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
            return data

    def ack_alert_info_with_http_info(self, alert_info_id, **kwargs):  # noqa: E501
        """ack_alert_info  # noqa: E501

        set the acked status of alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.ack_alert_info_with_http_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_info_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ack_alert_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_info_id' is set
        if ('alert_info_id' not in params or
                params['alert_info_id'] is None):
            raise ValueError("Missing the required parameter `alert_info_id` when calling `ack_alert_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_info_id' in params:
            path_params['alert_info_id'] = params['alert_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/{alert_info_id}:ack', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def count_alert_infos(self, **kwargs):  # noqa: E501
        """count_alert_infos  # noqa: E501

        count all alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_alert_infos(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :return: AlertStatsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.count_alert_infos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.count_alert_infos_with_http_info(**kwargs)  # noqa: E501
            return data

    def count_alert_infos_with_http_info(self, **kwargs):  # noqa: E501
        """count_alert_infos  # noqa: E501

        count all alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.count_alert_infos_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :return: AlertStatsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['acked', 'resolved', 'resource_type', 'resource_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method count_alert_infos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'acked' in params:
            query_params.append(('acked', params['acked']))  # noqa: E501
        if 'resolved' in params:
            query_params.append(('resolved', params['resolved']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertStatsResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_alert_info(self, alert_info_id, **kwargs):  # noqa: E501
        """delete_alert_info  # noqa: E501

        delete an alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_alert_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: AlertInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
            return data

    def delete_alert_info_with_http_info(self, alert_info_id, **kwargs):  # noqa: E501
        """delete_alert_info  # noqa: E501

        delete an alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_alert_info_with_http_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: AlertInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_info_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_alert_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_info_id' is set
        if ('alert_info_id' not in params or
                params['alert_info_id'] is None):
            raise ValueError("Missing the required parameter `alert_info_id` when calling `delete_alert_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_info_id' in params:
            path_params['alert_info_id'] = params['alert_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/{alert_info_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_info(self, alert_info_id, **kwargs):  # noqa: E501
        """get_alert_info  # noqa: E501

        get an alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: alert info id (required)
        :return: AlertInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
            return data

    def get_alert_info_with_http_info(self, alert_info_id, **kwargs):  # noqa: E501
        """get_alert_info  # noqa: E501

        get an alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_info_with_http_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: alert info id (required)
        :return: AlertInfoResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_info_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_info_id' is set
        if ('alert_info_id' not in params or
                params['alert_info_id'] is None):
            raise ValueError("Missing the required parameter `alert_info_id` when calling `get_alert_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_info_id' in params:
            path_params['alert_info_id'] = params['alert_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/{alert_info_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertInfoResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_alert_infos_report(self, **kwargs):  # noqa: E501
        """get_alert_infos_report  # noqa: E501

        Get report of alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_infos_report(async=True)
        >>> result = thread.get()

        :param async bool
        :param str level: level of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :param str create_after: create_after timestamp of alert info
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str group: group of alert info
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_alert_infos_report_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_alert_infos_report_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_alert_infos_report_with_http_info(self, **kwargs):  # noqa: E501
        """get_alert_infos_report  # noqa: E501

        Get report of alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_alert_infos_report_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str level: level of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :param str create_after: create_after timestamp of alert info
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str group: group of alert info
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['level', 'resource_type', 'resource_id', 'create_after', 'acked', 'resolved', 'group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_alert_infos_report" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501
        if 'create_after' in params:
            query_params.append(('create_after', params['create_after']))  # noqa: E501
        if 'acked' in params:
            query_params.append(('acked', params['acked']))  # noqa: E501
        if 'resolved' in params:
            query_params.append(('resolved', params['resolved']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_alert_infos(self, **kwargs):  # noqa: E501
        """list_alert_infos  # noqa: E501

        List all alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_alert_infos(async=True)
        >>> result = thread.get()

        :param async bool
        :param str q_must: must query param of search
        :param str q: should query param of search
        :param str related_resource: should query param of search
        :param str sort: sort param of search
        :param int limit: paging param
        :param int offset: paging param
        :param str level: level of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :param str create_after: create_after timestamp of alert info
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str group: group of alert info
        :return: AlertInfosResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_alert_infos_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_alert_infos_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_alert_infos_with_http_info(self, **kwargs):  # noqa: E501
        """list_alert_infos  # noqa: E501

        List all alert infos  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_alert_infos_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str q_must: must query param of search
        :param str q: should query param of search
        :param str related_resource: should query param of search
        :param str sort: sort param of search
        :param int limit: paging param
        :param int offset: paging param
        :param str level: level of alert info
        :param str resource_type: resource type of alert info
        :param int resource_id: resource id of alert info
        :param str create_after: create_after timestamp of alert info
        :param bool acked: acked of alert info
        :param bool resolved: resolved or not of alert info
        :param str group: group of alert info
        :return: AlertInfosResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q_must', 'q', 'related_resource', 'sort', 'limit', 'offset', 'level', 'resource_type', 'resource_id', 'create_after', 'acked', 'resolved', 'group']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_alert_infos" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q_must' in params:
            query_params.append(('q_must', params['q_must']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'related_resource' in params:
            query_params.append(('related_resource', params['related_resource']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
        if 'resource_id' in params:
            query_params.append(('resource_id', params['resource_id']))  # noqa: E501
        if 'create_after' in params:
            query_params.append(('create_after', params['create_after']))  # noqa: E501
        if 'acked' in params:
            query_params.append(('acked', params['acked']))  # noqa: E501
        if 'resolved' in params:
            query_params.append(('resolved', params['resolved']))  # noqa: E501
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AlertInfosResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolve_alert_info(self, alert_info_id, **kwargs):  # noqa: E501
        """resolve_alert_info  # noqa: E501

        set the resolved status of alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolve_alert_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolve_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
        else:
            (data) = self.resolve_alert_info_with_http_info(alert_info_id, **kwargs)  # noqa: E501
            return data

    def resolve_alert_info_with_http_info(self, alert_info_id, **kwargs):  # noqa: E501
        """resolve_alert_info  # noqa: E501

        set the resolved status of alert info  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolve_alert_info_with_http_info(alert_info_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int alert_info_id: the id of alert info (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['alert_info_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_alert_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'alert_info_id' is set
        if ('alert_info_id' not in params or
                params['alert_info_id'] is None):
            raise ValueError("Missing the required parameter `alert_info_id` when calling `resolve_alert_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'alert_info_id' in params:
            path_params['alert_info_id'] = params['alert_info_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/alert-infos/{alert_info_id}:resolve', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
