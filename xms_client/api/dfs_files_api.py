# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class DfsFilesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_dfs_file(self, body, **kwargs):  # noqa: E501
        """delete_dfs_file  # noqa: E501

        delete dfs file from rootfs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_file(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsFileDeleteReq body: active pool ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dfs_file_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dfs_file_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def delete_dfs_file_with_http_info(self, body, **kwargs):  # noqa: E501
        """delete_dfs_file  # noqa: E501

        delete dfs file from rootfs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_file_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsFileDeleteReq body: active pool ids (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dfs_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `delete_dfs_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files:delete', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_log_report(self, dfs_rootfs_id, paths, **kwargs):  # noqa: E501
        """get_dfs_log_report  # noqa: E501

        Get report of a gfs log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_log_report(dfs_rootfs_id, paths, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_rootfs_id: dfs rootfs id (required)
        :param str paths: dfs log path (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_log_report_with_http_info(dfs_rootfs_id, paths, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_log_report_with_http_info(dfs_rootfs_id, paths, **kwargs)  # noqa: E501
            return data

    def get_dfs_log_report_with_http_info(self, dfs_rootfs_id, paths, **kwargs):  # noqa: E501
        """get_dfs_log_report  # noqa: E501

        Get report of a gfs log  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_log_report_with_http_info(dfs_rootfs_id, paths, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_rootfs_id: dfs rootfs id (required)
        :param str paths: dfs log path (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_rootfs_id', 'paths']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_log_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_rootfs_id' is set
        if ('dfs_rootfs_id' not in params or
                params['dfs_rootfs_id'] is None):
            raise ValueError("Missing the required parameter `dfs_rootfs_id` when calling `get_dfs_log_report`")  # noqa: E501
        # verify the required parameter 'paths' is set
        if ('paths' not in params or
                params['paths'] is None):
            raise ValueError("Missing the required parameter `paths` when calling `get_dfs_log_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dfs_rootfs_id' in params:
            query_params.append(('dfs_rootfs_id', params['dfs_rootfs_id']))  # noqa: E501
        if 'paths' in params:
            query_params.append(('paths', params['paths']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files/log-report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dfs_files(self, **kwargs):  # noqa: E501
        """list_dfs_files  # noqa: E501

        List dfs files in a directory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_files(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param int limit: paging param
        :param str path: parent path
        :param str start: start file for list
        :param str prefix: prefix to filter file or directory
        :param str type: filter by file or dir type
        :param bool worm: check dir worm before enable filter
        :param bool reverse: sort reverse
        :param bool page_up: query last page instead of next
        :param bool hidden: show hidden files
        :return: DfsFilesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_dfs_files_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dfs_files_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dfs_files_with_http_info(self, **kwargs):  # noqa: E501
        """list_dfs_files  # noqa: E501

        List dfs files in a directory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_files_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param int limit: paging param
        :param str path: parent path
        :param str start: start file for list
        :param str prefix: prefix to filter file or directory
        :param str type: filter by file or dir type
        :param bool worm: check dir worm before enable filter
        :param bool reverse: sort reverse
        :param bool page_up: query last page instead of next
        :param bool hidden: show hidden files
        :return: DfsFilesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rootfs_id', 'limit', 'path', 'start', 'prefix', 'type', 'worm', 'reverse', 'page_up', 'hidden']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dfs_files" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rootfs_id' in params:
            query_params.append(('rootfs_id', params['rootfs_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'worm' in params:
            query_params.append(('worm', params['worm']))  # noqa: E501
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'page_up' in params:
            query_params.append(('page_up', params['page_up']))  # noqa: E501
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsFilesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dfs_files_0(self, **kwargs):  # noqa: E501
        """list_dfs_files_0  # noqa: E501

        List dfs files in a directory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_files_0(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param int limit: paging param
        :param str path: parent path
        :param str start: start file for list
        :param str prefix: prefix to filter file or directory
        :param str type: filter by file or dir type
        :param bool worm: check dir worm before enable filter
        :param bool reverse: sort reverse
        :param bool page_up: query last page instead of next
        :param bool hidden: show hidden files
        :return: DfsFilesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_dfs_files_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dfs_files_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dfs_files_0_with_http_info(self, **kwargs):  # noqa: E501
        """list_dfs_files_0  # noqa: E501

        List dfs files in a directory  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_files_0_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param int limit: paging param
        :param str path: parent path
        :param str start: start file for list
        :param str prefix: prefix to filter file or directory
        :param str type: filter by file or dir type
        :param bool worm: check dir worm before enable filter
        :param bool reverse: sort reverse
        :param bool page_up: query last page instead of next
        :param bool hidden: show hidden files
        :return: DfsFilesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rootfs_id', 'limit', 'path', 'start', 'prefix', 'type', 'worm', 'reverse', 'page_up', 'hidden']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dfs_files_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rootfs_id' in params:
            query_params.append(('rootfs_id', params['rootfs_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'start' in params:
            query_params.append(('start', params['start']))  # noqa: E501
        if 'prefix' in params:
            query_params.append(('prefix', params['prefix']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'worm' in params:
            query_params.append(('worm', params['worm']))  # noqa: E501
        if 'reverse' in params:
            query_params.append(('reverse', params['reverse']))  # noqa: E501
        if 'page_up' in params:
            query_params.append(('page_up', params['page_up']))  # noqa: E501
        if 'hidden' in params:
            query_params.append(('hidden', params['hidden']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsFilesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stat_dfs_file(self, **kwargs):  # noqa: E501
        """stat_dfs_file  # noqa: E501

        Get dfs file Stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_dfs_file(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param str path: parent path
        :return: DfsFileResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stat_dfs_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stat_dfs_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def stat_dfs_file_with_http_info(self, **kwargs):  # noqa: E501
        """stat_dfs_file  # noqa: E501

        Get dfs file Stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_dfs_file_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param str path: parent path
        :return: DfsFileResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rootfs_id', 'path']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stat_dfs_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rootfs_id' in params:
            query_params.append(('rootfs_id', params['rootfs_id']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files/:stat', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsFileResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stat_dfs_file_0(self, **kwargs):  # noqa: E501
        """stat_dfs_file_0  # noqa: E501

        Get dfs file Stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_dfs_file_0(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param str path: parent path
        :return: DfsFileResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.stat_dfs_file_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stat_dfs_file_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def stat_dfs_file_0_with_http_info(self, **kwargs):  # noqa: E501
        """stat_dfs_file_0  # noqa: E501

        Get dfs file Stat  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.stat_dfs_file_0_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int rootfs_id: dfs rootfs id
        :param str path: parent path
        :return: DfsFileResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rootfs_id', 'path']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stat_dfs_file_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'rootfs_id' in params:
            query_params.append(('rootfs_id', params['rootfs_id']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-files/:stat', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsFileResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
