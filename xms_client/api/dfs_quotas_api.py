# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class DfsQuotasApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dfs_quota(self, body, **kwargs):  # noqa: E501
        """create_dfs_quota  # noqa: E501

        Create dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dfs_quota(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsQuotaCreateReq body: quota info (required)
        :param bool allow_path_create: allow create path when not existed
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dfs_quota_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dfs_quota_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_dfs_quota_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_dfs_quota  # noqa: E501

        Create dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dfs_quota_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsQuotaCreateReq body: quota info (required)
        :param bool allow_path_create: allow create path when not existed
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'allow_path_create']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dfs_quota" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dfs_quota`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'allow_path_create' in params:
            query_params.append(('allow_path_create', params['allow_path_create']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dfs_quota(self, dfs_quota_id, **kwargs):  # noqa: E501
        """delete_dfs_quota  # noqa: E501

        delete dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_quota(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dfs_quota_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dfs_quota_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
            return data

    def delete_dfs_quota_with_http_info(self, dfs_quota_id, **kwargs):  # noqa: E501
        """delete_dfs_quota  # noqa: E501

        delete dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_quota_with_http_info(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_quota_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dfs_quota" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_quota_id' is set
        if ('dfs_quota_id' not in params or
                params['dfs_quota_id'] is None):
            raise ValueError("Missing the required parameter `dfs_quota_id` when calling `delete_dfs_quota`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfs_quota_id' in params:
            path_params['dfs_quota_id'] = params['dfs_quota_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/{dfs_quota_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def dfs_quota_overview(self, **kwargs):  # noqa: E501
        """dfs_quota_overview  # noqa: E501

        dfs quota overview about type and status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dfs_quota_overview(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DfsQuotaOverviewResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.dfs_quota_overview_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.dfs_quota_overview_with_http_info(**kwargs)  # noqa: E501
            return data

    def dfs_quota_overview_with_http_info(self, **kwargs):  # noqa: E501
        """dfs_quota_overview  # noqa: E501

        dfs quota overview about type and status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.dfs_quota_overview_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: DfsQuotaOverviewResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method dfs_quota_overview" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/overview', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaOverviewResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_quota(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota  # noqa: E501

        Get dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_quota_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_quota_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
            return data

    def get_dfs_quota_with_http_info(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota  # noqa: E501

        Get dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota_with_http_info(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_quota_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_quota" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_quota_id' is set
        if ('dfs_quota_id' not in params or
                params['dfs_quota_id'] is None):
            raise ValueError("Missing the required parameter `dfs_quota_id` when calling `get_dfs_quota`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfs_quota_id' in params:
            path_params['dfs_quota_id'] = params['dfs_quota_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/{dfs_quota_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_quota_predictions(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota_predictions  # noqa: E501

        get a quota's prediction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota_predictions(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaPredictionsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_quota_predictions_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_quota_predictions_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
            return data

    def get_dfs_quota_predictions_with_http_info(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota_predictions  # noqa: E501

        get a quota's prediction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota_predictions_with_http_info(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :return: DfsQuotaPredictionsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_quota_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_quota_predictions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_quota_id' is set
        if ('dfs_quota_id' not in params or
                params['dfs_quota_id'] is None):
            raise ValueError("Missing the required parameter `dfs_quota_id` when calling `get_dfs_quota_predictions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfs_quota_id' in params:
            path_params['dfs_quota_id'] = params['dfs_quota_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/{dfs_quota_id}/predictions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaPredictionsResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_quota_samples(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota_samples  # noqa: E501

        get a dfs quota's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota_samples(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: DfsQuotaSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_quota_samples_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_quota_samples_with_http_info(dfs_quota_id, **kwargs)  # noqa: E501
            return data

    def get_dfs_quota_samples_with_http_info(self, dfs_quota_id, **kwargs):  # noqa: E501
        """get_dfs_quota_samples  # noqa: E501

        get a dfs quota's samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_quota_samples_with_http_info(dfs_quota_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: dfs quota id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: DfsQuotaSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_quota_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_quota_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_quota_id' is set
        if ('dfs_quota_id' not in params or
                params['dfs_quota_id'] is None):
            raise ValueError("Missing the required parameter `dfs_quota_id` when calling `get_dfs_quota_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfs_quota_id' in params:
            path_params['dfs_quota_id'] = params['dfs_quota_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/{dfs_quota_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaSamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dfs_quotas(self, **kwargs):  # noqa: E501
        """list_dfs_quotas  # noqa: E501

        List dfs quotas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_quotas(async=True)
        >>> result = thread.get()

        :param async bool
        :param str path: dfs quota path
        :param str type: dfs quota type
        :param str domain_user_name: dfs quota domain user name
        :param str domain_user_group_name: dfs quota domain user group name
        :param int limit: paging param
        :param int offset: paging param
        :param str q: query param of search
        :param str sort: sort param of search
        :param str cluster_id: cluster id
        :return: DfsQuotasResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_dfs_quotas_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dfs_quotas_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dfs_quotas_with_http_info(self, **kwargs):  # noqa: E501
        """list_dfs_quotas  # noqa: E501

        List dfs quotas  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_quotas_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str path: dfs quota path
        :param str type: dfs quota type
        :param str domain_user_name: dfs quota domain user name
        :param str domain_user_group_name: dfs quota domain user group name
        :param int limit: paging param
        :param int offset: paging param
        :param str q: query param of search
        :param str sort: sort param of search
        :param str cluster_id: cluster id
        :return: DfsQuotasResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['path', 'type', 'domain_user_name', 'domain_user_group_name', 'limit', 'offset', 'q', 'sort', 'cluster_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dfs_quotas" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'domain_user_name' in params:
            query_params.append(('domain_user_name', params['domain_user_name']))  # noqa: E501
        if 'domain_user_group_name' in params:
            query_params.append(('domain_user_group_name', params['domain_user_group_name']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotasResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def path_validator(self, dfs_rootfs_id, path, **kwargs):  # noqa: E501
        """path_validator  # noqa: E501

        validate a path for dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.path_validator(dfs_rootfs_id, path, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_rootfs_id: dfs rootfs id (required)
        :param str path: dfs quota path (required)
        :return: DfsQuotaPathValidateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.path_validator_with_http_info(dfs_rootfs_id, path, **kwargs)  # noqa: E501
        else:
            (data) = self.path_validator_with_http_info(dfs_rootfs_id, path, **kwargs)  # noqa: E501
            return data

    def path_validator_with_http_info(self, dfs_rootfs_id, path, **kwargs):  # noqa: E501
        """path_validator  # noqa: E501

        validate a path for dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.path_validator_with_http_info(dfs_rootfs_id, path, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_rootfs_id: dfs rootfs id (required)
        :param str path: dfs quota path (required)
        :return: DfsQuotaPathValidateResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_rootfs_id', 'path']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method path_validator" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_rootfs_id' is set
        if ('dfs_rootfs_id' not in params or
                params['dfs_rootfs_id'] is None):
            raise ValueError("Missing the required parameter `dfs_rootfs_id` when calling `path_validator`")  # noqa: E501
        # verify the required parameter 'path' is set
        if ('path' not in params or
                params['path'] is None):
            raise ValueError("Missing the required parameter `path` when calling `path_validator`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'dfs_rootfs_id' in params:
            query_params.append(('dfs_rootfs_id', params['dfs_rootfs_id']))  # noqa: E501
        if 'path' in params:
            query_params.append(('path', params['path']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/path-validator', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaPathValidateResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dfs_quota(self, dfs_quota_id, body, **kwargs):  # noqa: E501
        """update_dfs_quota  # noqa: E501

        Update dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dfs_quota(dfs_quota_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: quota id (required)
        :param DfsQuotaUpdateReq body: dfs quota info (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dfs_quota_with_http_info(dfs_quota_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dfs_quota_with_http_info(dfs_quota_id, body, **kwargs)  # noqa: E501
            return data

    def update_dfs_quota_with_http_info(self, dfs_quota_id, body, **kwargs):  # noqa: E501
        """update_dfs_quota  # noqa: E501

        Update dfs quota  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dfs_quota_with_http_info(dfs_quota_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int dfs_quota_id: quota id (required)
        :param DfsQuotaUpdateReq body: dfs quota info (required)
        :return: DfsQuotaResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dfs_quota_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dfs_quota" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dfs_quota_id' is set
        if ('dfs_quota_id' not in params or
                params['dfs_quota_id'] is None):
            raise ValueError("Missing the required parameter `dfs_quota_id` when calling `update_dfs_quota`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dfs_quota`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dfs_quota_id' in params:
            path_params['dfs_quota_id'] = params['dfs_quota_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-quotas/{dfs_quota_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsQuotaResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
