# coding: utf-8

"""
    XMS API

    XMS is the controller of distributed storage system  # noqa: E501

    OpenAPI spec version: XSCALEROS_5.2.100.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from xms_client.api_client import ApiClient


class DfsS3BucketsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dfs_s3_bucket(self, body, **kwargs):  # noqa: E501
        """create_dfs_s3_bucket  # noqa: E501

        Create os bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dfs_s3_bucket(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsS3BucketCreateReq body: bucket info (required)
        :param str cluster_id: cluster id
        :param bool allow_path_create: allow create path when not existed
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_dfs_s3_bucket_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_dfs_s3_bucket_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_dfs_s3_bucket_with_http_info(self, body, **kwargs):  # noqa: E501
        """create_dfs_s3_bucket  # noqa: E501

        Create os bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_dfs_s3_bucket_with_http_info(body, async=True)
        >>> result = thread.get()

        :param async bool
        :param DfsS3BucketCreateReq body: bucket info (required)
        :param str cluster_id: cluster id
        :param bool allow_path_create: allow create path when not existed
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'cluster_id', 'allow_path_create']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dfs_s3_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dfs_s3_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501
        if 'allow_path_create' in params:
            query_params.append(('allow_path_create', params['allow_path_create']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dfs_s3_bucket(self, bucket_id, **kwargs):  # noqa: E501
        """delete_dfs_s3_bucket  # noqa: E501

        delete dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_s3_bucket(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param bool with_directory: also delete directory
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dfs_s3_bucket_with_http_info(bucket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dfs_s3_bucket_with_http_info(bucket_id, **kwargs)  # noqa: E501
            return data

    def delete_dfs_s3_bucket_with_http_info(self, bucket_id, **kwargs):  # noqa: E501
        """delete_dfs_s3_bucket  # noqa: E501

        delete dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_s3_bucket_with_http_info(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param bool with_directory: also delete directory
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'with_directory']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dfs_s3_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `delete_dfs_s3_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []
        if 'with_directory' in params:
            query_params.append(('with_directory', params['with_directory']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dfs_s3_bucket_policy(self, bucket_id, **kwargs):  # noqa: E501
        """delete_dfs_s3_bucket_policy  # noqa: E501

        delete dfs s3 bucket policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_s3_bucket_policy(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_dfs_s3_bucket_policy_with_http_info(bucket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dfs_s3_bucket_policy_with_http_info(bucket_id, **kwargs)  # noqa: E501
            return data

    def delete_dfs_s3_bucket_policy_with_http_info(self, bucket_id, **kwargs):  # noqa: E501
        """delete_dfs_s3_bucket_policy  # noqa: E501

        delete dfs s3 bucket policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_dfs_s3_bucket_policy_with_http_info(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dfs_s3_bucket_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `delete_dfs_s3_bucket_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}:delete-bucket-policy', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_s3_bucket(self, bucket_id, **kwargs):  # noqa: E501
        """get_dfs_s3_bucket  # noqa: E501

        Get dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_s3_bucket(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_s3_bucket_with_http_info(bucket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_s3_bucket_with_http_info(bucket_id, **kwargs)  # noqa: E501
            return data

    def get_dfs_s3_bucket_with_http_info(self, bucket_id, **kwargs):  # noqa: E501
        """get_dfs_s3_bucket  # noqa: E501

        Get dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_s3_bucket_with_http_info(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_s3_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `get_dfs_s3_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dfs_s3_bucket_samples(self, bucket_id, **kwargs):  # noqa: E501
        """get_dfs_s3_bucket_samples  # noqa: E501

        get an dfs s3 bucket's Samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_s3_bucket_samples(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: DfsS3BucketSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_dfs_s3_bucket_samples_with_http_info(bucket_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dfs_s3_bucket_samples_with_http_info(bucket_id, **kwargs)  # noqa: E501
            return data

    def get_dfs_s3_bucket_samples_with_http_info(self, bucket_id, **kwargs):  # noqa: E501
        """get_dfs_s3_bucket_samples  # noqa: E501

        get an dfs s3 bucket's Samples  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_dfs_s3_bucket_samples_with_http_info(bucket_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param str duration_begin: duration begin timestamp
        :param str duration_end: duration end timestamp
        :param str period: samples period
        :return: DfsS3BucketSamplesResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'duration_begin', 'duration_end', 'period']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dfs_s3_bucket_samples" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `get_dfs_s3_bucket_samples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []
        if 'duration_begin' in params:
            query_params.append(('duration_begin', params['duration_begin']))  # noqa: E501
        if 'duration_end' in params:
            query_params.append(('duration_end', params['duration_end']))  # noqa: E501
        if 'period' in params:
            query_params.append(('period', params['period']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}/samples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketSamplesResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dfs_s3_buckets(self, **kwargs):  # noqa: E501
        """list_dfs_s3_buckets  # noqa: E501

        List dfs s3 buckets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_s3_buckets(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cluster_id: cluster id
        :param int limit: paging param
        :param int offset: paging param
        :param str name: name of dfs s3 buckets
        :param int owner_id: The id of user buckets belong to
        :param int path_id: The id of bucket path
        :param str q: query param of search
        :param str sort: sort param of search
        :return: DfsS3BucketsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_dfs_s3_buckets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dfs_s3_buckets_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dfs_s3_buckets_with_http_info(self, **kwargs):  # noqa: E501
        """list_dfs_s3_buckets  # noqa: E501

        List dfs s3 buckets  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_dfs_s3_buckets_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str cluster_id: cluster id
        :param int limit: paging param
        :param int offset: paging param
        :param str name: name of dfs s3 buckets
        :param int owner_id: The id of user buckets belong to
        :param int path_id: The id of bucket path
        :param str q: query param of search
        :param str sort: sort param of search
        :return: DfsS3BucketsResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cluster_id', 'limit', 'offset', 'name', 'owner_id', 'path_id', 'q', 'sort']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dfs_s3_buckets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cluster_id' in params:
            query_params.append(('cluster_id', params['cluster_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('owner_id', params['owner_id']))  # noqa: E501
        if 'path_id' in params:
            query_params.append(('path_id', params['path_id']))  # noqa: E501
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketsResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_dfs_s3_bucket_policy(self, bucket_id, body, **kwargs):  # noqa: E501
        """set_dfs_s3_bucket_policy  # noqa: E501

        set dfs s3 bucket policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_dfs_s3_bucket_policy(bucket_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param DfsS3BucketPolicySetReq body: bucket policy info (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_dfs_s3_bucket_policy_with_http_info(bucket_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.set_dfs_s3_bucket_policy_with_http_info(bucket_id, body, **kwargs)  # noqa: E501
            return data

    def set_dfs_s3_bucket_policy_with_http_info(self, bucket_id, body, **kwargs):  # noqa: E501
        """set_dfs_s3_bucket_policy  # noqa: E501

        set dfs s3 bucket policy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_dfs_s3_bucket_policy_with_http_info(bucket_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param DfsS3BucketPolicySetReq body: bucket policy info (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_dfs_s3_bucket_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `set_dfs_s3_bucket_policy`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `set_dfs_s3_bucket_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}:set-bucket-policy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_dfs_s3_bucket(self, bucket_id, body, **kwargs):  # noqa: E501
        """update_dfs_s3_bucket  # noqa: E501

        Update dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dfs_s3_bucket(bucket_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param DfsS3BucketUpdateReq body: bucket info (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_dfs_s3_bucket_with_http_info(bucket_id, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_dfs_s3_bucket_with_http_info(bucket_id, body, **kwargs)  # noqa: E501
            return data

    def update_dfs_s3_bucket_with_http_info(self, bucket_id, body, **kwargs):  # noqa: E501
        """update_dfs_s3_bucket  # noqa: E501

        Update dfs s3 bucket  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_dfs_s3_bucket_with_http_info(bucket_id, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param int bucket_id: bucket id (required)
        :param DfsS3BucketUpdateReq body: bucket info (required)
        :return: DfsS3BucketResp
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['bucket_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_dfs_s3_bucket" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'bucket_id' is set
        if ('bucket_id' not in params or
                params['bucket_id'] is None):
            raise ValueError("Missing the required parameter `bucket_id` when calling `update_dfs_s3_bucket`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_dfs_s3_bucket`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'bucket_id' in params:
            path_params['bucket_id'] = params['bucket_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['tokenInHeader', 'tokenInQuery']  # noqa: E501

        return self.api_client.call_api(
            '/dfs-s3-buckets/{bucket_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DfsS3BucketResp',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
